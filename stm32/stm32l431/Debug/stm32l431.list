
stm32l431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00005ba0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d74  08005d74  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d7c  08005d7c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000001c  08005da0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08005da0  000201d0  2**0
=======
  1 .text         00005c00  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd4  08005dd4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ddc  08005ddc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000001c  08005e00  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08005e00  000201d0  2**0
>>>>>>> develop
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   000104c9  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239e  00000000  00000000  00030558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  000328f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a44  00000000  00000000  00033658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215f8  00000000  00000000  0003409c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f66f  00000000  00000000  00055694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0b0c  00000000  00000000  00064d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037f4  00000000  00000000  00135810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00139004  2**0
=======
 13 .debug_info   000104e5  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b1  00000000  00000000  00030574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00032928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a44  00000000  00000000  00033688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021616  00000000  00000000  000340cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6d0  00000000  00000000  000556e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0b36  00000000  00000000  00064db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037f8  00000000  00000000  001358e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001390e0  2**0
>>>>>>> develop
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001ac:	08005d14 	.word	0x08005d14
=======
 80001ac:	08005d74 	.word	0x08005d74
>>>>>>> develop

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000020 	.word	0x20000020
<<<<<<< HEAD
 80001c8:	08005d14 	.word	0x08005d14
=======
 80001c8:	08005d74 	.word	0x08005d74
>>>>>>> develop

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80004cc:	f000 fe71 	bl	80011b2 <HAL_Init>
=======
 80004ce:	f000 fea0 	bl	8001212 <HAL_Init>
>>>>>>> develop
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80004d0:	f000 f844 	bl	800055c <SystemClock_Config>
=======
 80004d2:	f000 f861 	bl	8000598 <SystemClock_Config>
>>>>>>> develop
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80004d4:	f000 fa40 	bl	8000958 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 fa20 	bl	800091c <MX_DMA_Init>
  MX_ADC1_Init();
 80004dc:	f000 f88e 	bl	80005fc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f9ec 	bl	80008bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	220d      	movs	r2, #13
 80004ea:	4916      	ldr	r1, [pc, #88]	; (8000544 <main+0x7c>)
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <main+0x80>)
 80004ee:	f004 f8a7 	bl	8004640 <HAL_UART_Transmit>
=======
 80004d6:	f000 fa5d 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 80004da:	f000 fa3d 	bl	8000958 <MX_DMA_Init>
  MX_ADC1_Init();
 80004de:	f000 f8ab 	bl	8000638 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 fa09 	bl	80008f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, data, sizeof(data), 1000);
 80004e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ea:	220d      	movs	r2, #13
 80004ec:	4923      	ldr	r1, [pc, #140]	; (800057c <main+0xb4>)
 80004ee:	4824      	ldr	r0, [pc, #144]	; (8000580 <main+0xb8>)
 80004f0:	f004 f8d6 	bl	80046a0 <HAL_UART_Transmit>
>>>>>>> develop
  // Timeout variables
//  uint32_t start_time = HAL_GetTick();
//  uint32_t timeout = 5000; // 5 seconds timeout
  // Loop to continuously check for 'r' character with timeout
  while (1) {
	  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
<<<<<<< HEAD
 80004f2:	2201      	movs	r2, #1
 80004f4:	4915      	ldr	r1, [pc, #84]	; (800054c <main+0x84>)
 80004f6:	4814      	ldr	r0, [pc, #80]	; (8000548 <main+0x80>)
 80004f8:	f004 f92c 	bl	8004754 <HAL_UART_Receive_IT>
	  if ((char)rx_data == 'r') {
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0x84>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b72      	cmp	r3, #114	; 0x72
 8000504:	d000      	beq.n	8000508 <main+0x40>
	  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000506:	e7f4      	b.n	80004f2 <main+0x2a>
		  break;
 8000508:	bf00      	nop
=======
 80004f4:	2201      	movs	r2, #1
 80004f6:	4923      	ldr	r1, [pc, #140]	; (8000584 <main+0xbc>)
 80004f8:	4821      	ldr	r0, [pc, #132]	; (8000580 <main+0xb8>)
 80004fa:	f004 f95b 	bl	80047b4 <HAL_UART_Receive_IT>
	  if ((char)rx_data == 'r') {
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <main+0xbc>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2b72      	cmp	r3, #114	; 0x72
 8000506:	d000      	beq.n	800050a <main+0x42>
	  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000508:	e7f4      	b.n	80004f4 <main+0x2c>
		  break;
 800050a:	bf00      	nop
//	  if ((HAL_GetTick() - start_time) > timeout) {
>>>>>>> develop
////		  printf("Timeout waiting for 'r' character\n");
//		  break;
//	  }
  }
<<<<<<< HEAD

  HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f000 fec5 	bl	800129c <HAL_Delay>
=======
  for (int i =0; i < 5; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	e014      	b.n	800053c <main+0x74>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000518:	481b      	ldr	r0, [pc, #108]	; (8000588 <main+0xc0>)
 800051a:	f002 feb5 	bl	8003288 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 800051e:	20c8      	movs	r0, #200	; 0xc8
 8000520:	f000 feec 	bl	80012fc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <main+0xc0>)
 800052c:	f002 feac 	bl	8003288 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000530:	20c8      	movs	r0, #200	; 0xc8
 8000532:	f000 fee3 	bl	80012fc <HAL_Delay>
  for (int i =0; i < 5; i++) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3301      	adds	r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b04      	cmp	r3, #4
 8000540:	dde7      	ble.n	8000512 <main+0x4a>
  }


  HAL_Delay(1000);
 8000542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000546:	f000 fed9 	bl	80012fc <HAL_Delay>
>>>>>>> develop
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 16);
<<<<<<< HEAD
 8000512:	2210      	movs	r2, #16
 8000514:	490e      	ldr	r1, [pc, #56]	; (8000550 <main+0x88>)
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <main+0x8c>)
 8000518:	f001 fa00 	bl	800191c <HAL_ADC_Start_DMA>
	HAL_Delay(10);
 800051c:	200a      	movs	r0, #10
 800051e:	f000 febd 	bl	800129c <HAL_Delay>
	ProcessLineSensor();
 8000522:	f000 fa91 	bl	8000a48 <ProcessLineSensor>

	while_counter++;
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x90>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <main+0x90>)
 800052e:	6013      	str	r3, [r2, #0]
	if (while_counter >=10000) while_counter = 0;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <main+0x90>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f242 720f 	movw	r2, #9999	; 0x270f
 8000538:	4293      	cmp	r3, r2
 800053a:	d9ea      	bls.n	8000512 <main+0x4a>
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <main+0x90>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 16);
 8000542:	e7e6      	b.n	8000512 <main+0x4a>
 8000544:	20000000 	.word	0x20000000
 8000548:	200000e4 	.word	0x200000e4
 800054c:	200001c0 	.word	0x200001c0
 8000550:	2000016c 	.word	0x2000016c
 8000554:	20000038 	.word	0x20000038
 8000558:	200001bc 	.word	0x200001bc

0800055c <SystemClock_Config>:
=======
 800054a:	2210      	movs	r2, #16
 800054c:	490f      	ldr	r1, [pc, #60]	; (800058c <main+0xc4>)
 800054e:	4810      	ldr	r0, [pc, #64]	; (8000590 <main+0xc8>)
 8000550:	f001 fa14 	bl	800197c <HAL_ADC_Start_DMA>
	HAL_Delay(10);
 8000554:	200a      	movs	r0, #10
 8000556:	f000 fed1 	bl	80012fc <HAL_Delay>
	ProcessLineSensor();
 800055a:	f000 fa93 	bl	8000a84 <ProcessLineSensor>

	while_counter++;
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <main+0xcc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <main+0xcc>)
 8000566:	6013      	str	r3, [r2, #0]
	if (while_counter >=10000) while_counter = 0;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <main+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000570:	4293      	cmp	r3, r2
 8000572:	d9ea      	bls.n	800054a <main+0x82>
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <main+0xcc>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 16);
 800057a:	e7e6      	b.n	800054a <main+0x82>
 800057c:	20000000 	.word	0x20000000
 8000580:	200000e4 	.word	0x200000e4
 8000584:	200001c0 	.word	0x200001c0
 8000588:	48000800 	.word	0x48000800
 800058c:	2000016c 	.word	0x2000016c
 8000590:	20000038 	.word	0x20000038
 8000594:	200001bc 	.word	0x200001bc

08000598 <SystemClock_Config>:
>>>>>>> develop
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	; 0x58
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	; 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f005 fba6 	bl	8005cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
=======
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 fbb8 	bl	8005d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
>>>>>>> develop

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
<<<<<<< HEAD
 800057e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000582:	f002 fe77 	bl	8003274 <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800058c:	f000 fc34 	bl	8000df8 <Error_Handler>
=======
 80005ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005be:	f002 fe89 	bl	80032d4 <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c8:	f000 fc46 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 8000590:	2301      	movs	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	2303      	movs	r3, #3
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005a6:	2314      	movs	r3, #20
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 feb0 	bl	8003320 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005c6:	f000 fc17 	bl	8000df8 <Error_Handler>
=======
 80005cc:	2301      	movs	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	2303      	movs	r3, #3
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005e2:	2314      	movs	r3, #20
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fec2 	bl	8003380 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000602:	f000 fc29 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fab0 	bl	8003b48 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ee:	f000 fc03 	bl	8000df8 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	; 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
=======
 8000606:	230f      	movs	r3, #15
 8000608:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	2104      	movs	r1, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fac2 	bl	8003ba8 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f000 fc15 	bl	8000e58 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3758      	adds	r7, #88	; 0x58
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_ADC1_Init>:
>>>>>>> develop
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
=======
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
=======
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]
>>>>>>> develop

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8000612:	4b98      	ldr	r3, [pc, #608]	; (8000874 <MX_ADC1_Init+0x278>)
 8000614:	4a98      	ldr	r2, [pc, #608]	; (8000878 <MX_ADC1_Init+0x27c>)
 8000616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000618:	4b96      	ldr	r3, [pc, #600]	; (8000874 <MX_ADC1_Init+0x278>)
 800061a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800061e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000620:	4b94      	ldr	r3, [pc, #592]	; (8000874 <MX_ADC1_Init+0x278>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000626:	4b93      	ldr	r3, [pc, #588]	; (8000874 <MX_ADC1_Init+0x278>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062c:	4b91      	ldr	r3, [pc, #580]	; (8000874 <MX_ADC1_Init+0x278>)
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b90      	ldr	r3, [pc, #576]	; (8000874 <MX_ADC1_Init+0x278>)
 8000634:	2204      	movs	r2, #4
 8000636:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b8e      	ldr	r3, [pc, #568]	; (8000874 <MX_ADC1_Init+0x278>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063e:	4b8d      	ldr	r3, [pc, #564]	; (8000874 <MX_ADC1_Init+0x278>)
 8000640:	2201      	movs	r2, #1
 8000642:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 16;
 8000644:	4b8b      	ldr	r3, [pc, #556]	; (8000874 <MX_ADC1_Init+0x278>)
 8000646:	2210      	movs	r2, #16
 8000648:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b8a      	ldr	r3, [pc, #552]	; (8000874 <MX_ADC1_Init+0x278>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b88      	ldr	r3, [pc, #544]	; (8000874 <MX_ADC1_Init+0x278>)
 8000654:	2200      	movs	r2, #0
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b86      	ldr	r3, [pc, #536]	; (8000874 <MX_ADC1_Init+0x278>)
 800065a:	2200      	movs	r2, #0
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b85      	ldr	r3, [pc, #532]	; (8000874 <MX_ADC1_Init+0x278>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b83      	ldr	r3, [pc, #524]	; (8000874 <MX_ADC1_Init+0x278>)
 8000668:	2200      	movs	r2, #0
 800066a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b81      	ldr	r3, [pc, #516]	; (8000874 <MX_ADC1_Init+0x278>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	487f      	ldr	r0, [pc, #508]	; (8000874 <MX_ADC1_Init+0x278>)
 8000676:	f001 f80f 	bl	8001698 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000680:	f000 fbba 	bl	8000df8 <Error_Handler>
=======
 800064e:	4b98      	ldr	r3, [pc, #608]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000650:	4a98      	ldr	r2, [pc, #608]	; (80008b4 <MX_ADC1_Init+0x27c>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000654:	4b96      	ldr	r3, [pc, #600]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000656:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b94      	ldr	r3, [pc, #592]	; (80008b0 <MX_ADC1_Init+0x278>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000662:	4b93      	ldr	r3, [pc, #588]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000668:	4b91      	ldr	r3, [pc, #580]	; (80008b0 <MX_ADC1_Init+0x278>)
 800066a:	2201      	movs	r2, #1
 800066c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b90      	ldr	r3, [pc, #576]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000670:	2204      	movs	r2, #4
 8000672:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000674:	4b8e      	ldr	r3, [pc, #568]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000676:	2200      	movs	r2, #0
 8000678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800067a:	4b8d      	ldr	r3, [pc, #564]	; (80008b0 <MX_ADC1_Init+0x278>)
 800067c:	2201      	movs	r2, #1
 800067e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 16;
 8000680:	4b8b      	ldr	r3, [pc, #556]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000682:	2210      	movs	r2, #16
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b8a      	ldr	r3, [pc, #552]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b88      	ldr	r3, [pc, #544]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b86      	ldr	r3, [pc, #536]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800069a:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <MX_ADC1_Init+0x278>)
 800069c:	2201      	movs	r2, #1
 800069e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a2:	4b83      	ldr	r3, [pc, #524]	; (80008b0 <MX_ADC1_Init+0x278>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006a8:	4b81      	ldr	r3, [pc, #516]	; (80008b0 <MX_ADC1_Init+0x278>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b0:	487f      	ldr	r0, [pc, #508]	; (80008b0 <MX_ADC1_Init+0x278>)
 80006b2:	f001 f821 	bl	80016f8 <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80006bc:	f000 fbcc 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
<<<<<<< HEAD
 8000684:	4b7d      	ldr	r3, [pc, #500]	; (800087c <MX_ADC1_Init+0x280>)
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000688:	2306      	movs	r3, #6
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000690:	237f      	movs	r3, #127	; 0x7f
 8000692:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000694:	2304      	movs	r3, #4
 8000696:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4874      	ldr	r0, [pc, #464]	; (8000874 <MX_ADC1_Init+0x278>)
 80006a2:	f001 fb91 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80006ac:	f000 fba4 	bl	8000df8 <Error_Handler>
=======
 80006c0:	4b7d      	ldr	r3, [pc, #500]	; (80008b8 <MX_ADC1_Init+0x280>)
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2306      	movs	r3, #6
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006cc:	237f      	movs	r3, #127	; 0x7f
 80006ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4874      	ldr	r0, [pc, #464]	; (80008b0 <MX_ADC1_Init+0x278>)
 80006de:	f001 fba3 	bl	8001e28 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80006e8:	f000 fbb6 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
<<<<<<< HEAD
 80006b0:	4b73      	ldr	r3, [pc, #460]	; (8000880 <MX_ADC1_Init+0x284>)
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006b4:	230c      	movs	r3, #12
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	486d      	ldr	r0, [pc, #436]	; (8000874 <MX_ADC1_Init+0x278>)
 80006be:	f001 fb83 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80006c8:	f000 fb96 	bl	8000df8 <Error_Handler>
=======
 80006ec:	4b73      	ldr	r3, [pc, #460]	; (80008bc <MX_ADC1_Init+0x284>)
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f0:	230c      	movs	r3, #12
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	486d      	ldr	r0, [pc, #436]	; (80008b0 <MX_ADC1_Init+0x278>)
 80006fa:	f001 fb95 	bl	8001e28 <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000704:	f000 fba8 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
<<<<<<< HEAD
 80006cc:	4b6d      	ldr	r3, [pc, #436]	; (8000884 <MX_ADC1_Init+0x288>)
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006d0:	2312      	movs	r3, #18
 80006d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4866      	ldr	r0, [pc, #408]	; (8000874 <MX_ADC1_Init+0x278>)
 80006da:	f001 fb75 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80006e4:	f000 fb88 	bl	8000df8 <Error_Handler>
=======
 8000708:	4b6d      	ldr	r3, [pc, #436]	; (80008c0 <MX_ADC1_Init+0x288>)
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800070c:	2312      	movs	r3, #18
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	4866      	ldr	r0, [pc, #408]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000716:	f001 fb87 	bl	8001e28 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000720:	f000 fb9a 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
<<<<<<< HEAD
 80006e8:	4b67      	ldr	r3, [pc, #412]	; (8000888 <MX_ADC1_Init+0x28c>)
 80006ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006ec:	2318      	movs	r3, #24
 80006ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	485f      	ldr	r0, [pc, #380]	; (8000874 <MX_ADC1_Init+0x278>)
 80006f6:	f001 fb67 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000700:	f000 fb7a 	bl	8000df8 <Error_Handler>
=======
 8000724:	4b67      	ldr	r3, [pc, #412]	; (80008c4 <MX_ADC1_Init+0x28c>)
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000728:	2318      	movs	r3, #24
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	485f      	ldr	r0, [pc, #380]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000732:	f001 fb79 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800073c:	f000 fb8c 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
<<<<<<< HEAD
 8000704:	4b61      	ldr	r3, [pc, #388]	; (800088c <MX_ADC1_Init+0x290>)
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4858      	ldr	r0, [pc, #352]	; (8000874 <MX_ADC1_Init+0x278>)
 8000714:	f001 fb58 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800071e:	f000 fb6b 	bl	8000df8 <Error_Handler>
=======
 8000740:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <MX_ADC1_Init+0x290>)
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4858      	ldr	r0, [pc, #352]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000750:	f001 fb6a 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800075a:	f000 fb7d 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
<<<<<<< HEAD
 8000722:	4b5b      	ldr	r3, [pc, #364]	; (8000890 <MX_ADC1_Init+0x294>)
 8000724:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000726:	f44f 7383 	mov.w	r3, #262	; 0x106
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4850      	ldr	r0, [pc, #320]	; (8000874 <MX_ADC1_Init+0x278>)
 8000732:	f001 fb49 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 800073c:	f000 fb5c 	bl	8000df8 <Error_Handler>
=======
 800075e:	4b5b      	ldr	r3, [pc, #364]	; (80008cc <MX_ADC1_Init+0x294>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000762:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4850      	ldr	r0, [pc, #320]	; (80008b0 <MX_ADC1_Init+0x278>)
 800076e:	f001 fb5b 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000778:	f000 fb6e 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
<<<<<<< HEAD
 8000740:	4b54      	ldr	r3, [pc, #336]	; (8000894 <MX_ADC1_Init+0x298>)
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000744:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4849      	ldr	r0, [pc, #292]	; (8000874 <MX_ADC1_Init+0x278>)
 8000750:	f001 fb3a 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 800075a:	f000 fb4d 	bl	8000df8 <Error_Handler>
=======
 800077c:	4b54      	ldr	r3, [pc, #336]	; (80008d0 <MX_ADC1_Init+0x298>)
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000780:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000784:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4849      	ldr	r0, [pc, #292]	; (80008b0 <MX_ADC1_Init+0x278>)
 800078c:	f001 fb4c 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8000796:	f000 fb5f 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
<<<<<<< HEAD
 800075e:	4b4e      	ldr	r3, [pc, #312]	; (8000898 <MX_ADC1_Init+0x29c>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000762:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <MX_ADC1_Init+0x278>)
 800076e:	f001 fb2b 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8000778:	f000 fb3e 	bl	8000df8 <Error_Handler>
=======
 800079a:	4b4e      	ldr	r3, [pc, #312]	; (80008d4 <MX_ADC1_Init+0x29c>)
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800079e:	f44f 7389 	mov.w	r3, #274	; 0x112
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4841      	ldr	r0, [pc, #260]	; (80008b0 <MX_ADC1_Init+0x278>)
 80007aa:	f001 fb3d 	bl	8001e28 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 80007b4:	f000 fb50 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
<<<<<<< HEAD
 800077c:	4b47      	ldr	r3, [pc, #284]	; (800089c <MX_ADC1_Init+0x2a0>)
 800077e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000780:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000784:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	483a      	ldr	r0, [pc, #232]	; (8000874 <MX_ADC1_Init+0x278>)
 800078c:	f001 fb1c 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x19e>
  {
    Error_Handler();
 8000796:	f000 fb2f 	bl	8000df8 <Error_Handler>
=======
 80007b8:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <MX_ADC1_Init+0x2a0>)
 80007ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80007bc:	f44f 738c 	mov.w	r3, #280	; 0x118
 80007c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	4619      	mov	r1, r3
 80007c6:	483a      	ldr	r0, [pc, #232]	; (80008b0 <MX_ADC1_Init+0x278>)
 80007c8:	f001 fb2e 	bl	8001e28 <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0x19e>
  {
    Error_Handler();
 80007d2:	f000 fb41 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
<<<<<<< HEAD
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <MX_ADC1_Init+0x2a4>)
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800079e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4832      	ldr	r0, [pc, #200]	; (8000874 <MX_ADC1_Init+0x278>)
 80007aa:	f001 fb0d 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 80007b4:	f000 fb20 	bl	8000df8 <Error_Handler>
=======
 80007d6:	4b41      	ldr	r3, [pc, #260]	; (80008dc <MX_ADC1_Init+0x2a4>)
 80007d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4832      	ldr	r0, [pc, #200]	; (80008b0 <MX_ADC1_Init+0x278>)
 80007e6:	f001 fb1f 	bl	8001e28 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 80007f0:	f000 fb32 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
<<<<<<< HEAD
 80007b8:	4b3a      	ldr	r3, [pc, #232]	; (80008a4 <MX_ADC1_Init+0x2a8>)
 80007ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007bc:	f240 2306 	movw	r3, #518	; 0x206
 80007c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c2:	463b      	mov	r3, r7
 80007c4:	4619      	mov	r1, r3
 80007c6:	482b      	ldr	r0, [pc, #172]	; (8000874 <MX_ADC1_Init+0x278>)
 80007c8:	f001 fafe 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 80007d2:	f000 fb11 	bl	8000df8 <Error_Handler>
=======
 80007f4:	4b3a      	ldr	r3, [pc, #232]	; (80008e0 <MX_ADC1_Init+0x2a8>)
 80007f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007f8:	f240 2306 	movw	r3, #518	; 0x206
 80007fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	482b      	ldr	r0, [pc, #172]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000804:	f001 fb10 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 800080e:	f000 fb23 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
<<<<<<< HEAD
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <MX_ADC1_Init+0x2ac>)
 80007d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80007da:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80007de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4823      	ldr	r0, [pc, #140]	; (8000874 <MX_ADC1_Init+0x278>)
 80007e6:	f001 faef 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x1f8>
  {
    Error_Handler();
 80007f0:	f000 fb02 	bl	8000df8 <Error_Handler>
=======
 8000812:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <MX_ADC1_Init+0x2ac>)
 8000814:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000816:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4823      	ldr	r0, [pc, #140]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000822:	f001 fb01 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x1f8>
  {
    Error_Handler();
 800082c:	f000 fb14 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
<<<<<<< HEAD
 80007f4:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_ADC1_Init+0x2b0>)
 80007f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80007f8:	f240 2312 	movw	r3, #530	; 0x212
 80007fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <MX_ADC1_Init+0x278>)
 8000804:	f001 fae0 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0x216>
  {
    Error_Handler();
 800080e:	f000 faf3 	bl	8000df8 <Error_Handler>
=======
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_ADC1_Init+0x2b0>)
 8000832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000834:	f240 2312 	movw	r3, #530	; 0x212
 8000838:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	481c      	ldr	r0, [pc, #112]	; (80008b0 <MX_ADC1_Init+0x278>)
 8000840:	f001 faf2 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0x216>
  {
    Error_Handler();
 800084a:	f000 fb05 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
<<<<<<< HEAD
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_ADC1_Init+0x2b4>)
 8000814:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000816:	f44f 7306 	mov.w	r3, #536	; 0x218
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_ADC1_Init+0x278>)
 8000822:	f001 fad1 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 800082c:	f000 fae4 	bl	8000df8 <Error_Handler>
=======
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_ADC1_Init+0x2b4>)
 8000850:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000852:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4814      	ldr	r0, [pc, #80]	; (80008b0 <MX_ADC1_Init+0x278>)
 800085e:	f001 fae3 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8000868:	f000 faf6 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
<<<<<<< HEAD
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_ADC1_Init+0x2b8>)
 8000832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000834:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000838:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_ADC1_Init+0x278>)
 8000840:	f001 fac2 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0x252>
  {
    Error_Handler();
 800084a:	f000 fad5 	bl	8000df8 <Error_Handler>
=======
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_ADC1_Init+0x2b8>)
 800086e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000870:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000874:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_ADC1_Init+0x278>)
 800087c:	f001 fad4 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0x252>
  {
    Error_Handler();
 8000886:	f000 fae7 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
<<<<<<< HEAD
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_ADC1_Init+0x2bc>)
 8000850:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000852:	f240 3306 	movw	r3, #774	; 0x306
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_ADC1_Init+0x278>)
 800085e:	f001 fab3 	bl	8001dc8 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x270>
  {
    Error_Handler();
 8000868:	f000 fac6 	bl	8000df8 <Error_Handler>
=======
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC1_Init+0x2bc>)
 800088c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 800088e:	f240 3306 	movw	r3, #774	; 0x306
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_ADC1_Init+0x278>)
 800089a:	f001 fac5 	bl	8001e28 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x270>
  {
    Error_Handler();
 80008a4:	f000 fad8 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 800086c:	bf00      	nop
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000038 	.word	0x20000038
 8000878:	50040000 	.word	0x50040000
 800087c:	04300002 	.word	0x04300002
 8000880:	08600004 	.word	0x08600004
 8000884:	0c900008 	.word	0x0c900008
 8000888:	10c00010 	.word	0x10c00010
 800088c:	14f00020 	.word	0x14f00020
 8000890:	19200040 	.word	0x19200040
 8000894:	1d500080 	.word	0x1d500080
 8000898:	21800100 	.word	0x21800100
 800089c:	25b00200 	.word	0x25b00200
 80008a0:	2a000400 	.word	0x2a000400
 80008a4:	2e300800 	.word	0x2e300800
 80008a8:	32601000 	.word	0x32601000
 80008ac:	36902000 	.word	0x36902000
 80008b0:	3ac04000 	.word	0x3ac04000
 80008b4:	3ef08000 	.word	0x3ef08000
 80008b8:	43210000 	.word	0x43210000

080008bc <MX_USART1_UART_Init>:
=======
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000038 	.word	0x20000038
 80008b4:	50040000 	.word	0x50040000
 80008b8:	04300002 	.word	0x04300002
 80008bc:	08600004 	.word	0x08600004
 80008c0:	0c900008 	.word	0x0c900008
 80008c4:	10c00010 	.word	0x10c00010
 80008c8:	14f00020 	.word	0x14f00020
 80008cc:	19200040 	.word	0x19200040
 80008d0:	1d500080 	.word	0x1d500080
 80008d4:	21800100 	.word	0x21800100
 80008d8:	25b00200 	.word	0x25b00200
 80008dc:	2a000400 	.word	0x2a000400
 80008e0:	2e300800 	.word	0x2e300800
 80008e4:	32601000 	.word	0x32601000
 80008e8:	36902000 	.word	0x36902000
 80008ec:	3ac04000 	.word	0x3ac04000
 80008f0:	3ef08000 	.word	0x3ef08000
 80008f4:	43210000 	.word	0x43210000

080008f8 <MX_USART1_UART_Init>:
>>>>>>> develop
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
=======
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008c2:	4a15      	ldr	r2, [pc, #84]	; (8000918 <MX_USART1_UART_Init+0x5c>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USART1_UART_Init+0x58>)
 8000900:	f003 fe50 	bl	80045a4 <HAL_UART_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 fa75 	bl	8000df8 <Error_Handler>
=======
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART1_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_USART1_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART1_UART_Init+0x58>)
 8000904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART1_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART1_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART1_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART1_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART1_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART1_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART1_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART1_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART1_UART_Init+0x58>)
 800093c:	f003 fe62 	bl	8004604 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 fa87 	bl	8000e58 <Error_Handler>
>>>>>>> develop
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000e4 	.word	0x200000e4
 8000918:	40013800 	.word	0x40013800

0800091c <MX_DMA_Init>:
=======
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000e4 	.word	0x200000e4
 8000954:	40013800 	.word	0x40013800

08000958 <MX_DMA_Init>:
>>>>>>> develop

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DMA_Init+0x38>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x38>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6493      	str	r3, [r2, #72]	; 0x48
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x38>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
=======
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_DMA_Init+0x38>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <MX_DMA_Init+0x38>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6493      	str	r3, [r2, #72]	; 0x48
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_DMA_Init+0x38>)
 800096c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
>>>>>>> develop

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
<<<<<<< HEAD
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	200b      	movs	r0, #11
 8000940:	f002 f84b 	bl	80029da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000944:	200b      	movs	r0, #11
 8000946:	f002 f864 	bl	8002a12 <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <MX_GPIO_Init>:
=======
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	200b      	movs	r0, #11
 800097c:	f002 f85d 	bl	8002a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000980:	200b      	movs	r0, #11
 8000982:	f002 f876 	bl	8002a72 <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <MX_GPIO_Init>:
>>>>>>> develop
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
=======
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
>>>>>>> develop
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <MX_GPIO_Init+0xa8>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <MX_GPIO_Init+0xa8>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_GPIO_Init+0xa8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_GPIO_Init+0xa8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <MX_GPIO_Init+0xa8>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_GPIO_Init+0xa8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_GPIO_Init+0xa8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <MX_GPIO_Init+0xa8>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_GPIO_Init+0xa8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_GPIO_Init+0xa8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <MX_GPIO_Init+0xa8>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_GPIO_Init+0xa8>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <MX_GPIO_Init+0xac>)
 80009d6:	f002 fc27 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_GPIO_Init+0xac>)
 80009f4:	f002 fa9e 	bl	8002f34 <HAL_GPIO_Init>
=======
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <MX_GPIO_Init+0xa8>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_GPIO_Init+0xa8>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <MX_GPIO_Init+0xac>)
 8000a12:	f002 fc39 	bl	8003288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0xac>)
 8000a30:	f002 fab0 	bl	8002f94 <HAL_GPIO_Init>
>>>>>>> develop

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000800 	.word	0x48000800

08000a08 <map>:
=======
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48000800 	.word	0x48000800

08000a44 <map>:
>>>>>>> develop

/* USER CODE BEGIN 4 */

uint8_t map(int input, int input_min, int input_max, int output_min, int output_max) {
<<<<<<< HEAD
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	603b      	str	r3, [r7, #0]
    return (input - input_min) * (output_max - output_min) / (input_max - input_min) + output_min;
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	69b9      	ldr	r1, [r7, #24]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	1a8a      	subs	r2, r1, r2
 8000a22:	fb03 f202 	mul.w	r2, r3, r2
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1acb      	subs	r3, r1, r3
 8000a2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <ProcessLineSensor>:
=======
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
    return (input - input_min) * (output_max - output_min) / (input_max - input_min) + output_min;
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	69b9      	ldr	r1, [r7, #24]
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	1a8a      	subs	r2, r1, r2
 8000a5e:	fb03 f202 	mul.w	r2, r3, r2
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1acb      	subs	r3, r1, r3
 8000a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	b2db      	uxtb	r3, r3
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <ProcessLineSensor>:
>>>>>>> develop
 * Weighted: 	-3	  -2   -1   0    0    1    2    3
 * Index:		[8]  [9]  [10]  [11]  [12]  [13]  [14]  [15]
 *
 *
 */
int16_t ProcessLineSensor(void) {
<<<<<<< HEAD
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
=======
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
>>>>>>> develop
//	uint16_t after_offset[8];
//	int16_t horizontal_value = 0; // ---
//	int16_t vertical_value = 0;   //   |
	working_sensor_horizontal = 0;
<<<<<<< HEAD
 8000a4e:	4b90      	ldr	r3, [pc, #576]	; (8000c90 <ProcessLineSensor+0x248>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
	working_sensor_vertical = 0;
 8000a54:	4b8f      	ldr	r3, [pc, #572]	; (8000c94 <ProcessLineSensor+0x24c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	working_sensor_total = 0;
 8000a5a:	4b8f      	ldr	r3, [pc, #572]	; (8000c98 <ProcessLineSensor+0x250>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
=======
 8000a8a:	4b9a      	ldr	r3, [pc, #616]	; (8000cf4 <ProcessLineSensor+0x270>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
	working_sensor_vertical = 0;
 8000a90:	4b99      	ldr	r3, [pc, #612]	; (8000cf8 <ProcessLineSensor+0x274>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
	working_sensor_total = 0;
 8000a96:	4b99      	ldr	r3, [pc, #612]	; (8000cfc <ProcessLineSensor+0x278>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
>>>>>>> develop


//	sum_after_offset = 0;
	for (int i = 0; i<16; i++) {
<<<<<<< HEAD
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	e040      	b.n	8000ae8 <ProcessLineSensor+0xa0>
		after_offset[i] = adc_buffer[i] - OFFSET_SENSOR;
 8000a66:	4a8d      	ldr	r2, [pc, #564]	; (8000c9c <ProcessLineSensor+0x254>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6e:	f6a3 53de 	subw	r3, r3, #3550	; 0xdde
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b219      	sxth	r1, r3
 8000a76:	4a8a      	ldr	r2, [pc, #552]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (after_offset[i] < MIN_OFFSET) after_offset[i] = MIN_OFFSET;
 8000a7e:	4a88      	ldr	r2, [pc, #544]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da04      	bge.n	8000a94 <ProcessLineSensor+0x4c>
 8000a8a:	4a85      	ldr	r2, [pc, #532]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (after_offset[i] > MAX_OFFSET) after_offset[i] = MAX_OFFSET;
 8000a94:	4a82      	ldr	r2, [pc, #520]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a9c:	2b46      	cmp	r3, #70	; 0x46
 8000a9e:	dd04      	ble.n	8000aaa <ProcessLineSensor+0x62>
 8000aa0:	4a7f      	ldr	r2, [pc, #508]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2146      	movs	r1, #70	; 0x46
 8000aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		sum_after_offset = sum_after_offset + after_offset[i];
		if (after_offset[i] != 0)  {
 8000aaa:	4a7d      	ldr	r2, [pc, #500]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d015      	beq.n	8000ae2 <ProcessLineSensor+0x9a>
			working_sensor_total++;
 8000ab6:	4b78      	ldr	r3, [pc, #480]	; (8000c98 <ProcessLineSensor+0x250>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <ProcessLineSensor+0x250>)
 8000ac0:	701a      	strb	r2, [r3, #0]
			if (i < 8) working_sensor_horizontal++;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	dc06      	bgt.n	8000ad6 <ProcessLineSensor+0x8e>
 8000ac8:	4b71      	ldr	r3, [pc, #452]	; (8000c90 <ProcessLineSensor+0x248>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b6f      	ldr	r3, [pc, #444]	; (8000c90 <ProcessLineSensor+0x248>)
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e005      	b.n	8000ae2 <ProcessLineSensor+0x9a>
			else working_sensor_vertical++;
 8000ad6:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <ProcessLineSensor+0x24c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b6d      	ldr	r3, [pc, #436]	; (8000c94 <ProcessLineSensor+0x24c>)
 8000ae0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<16; i++) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	ddbb      	ble.n	8000a66 <ProcessLineSensor+0x1e>
	}
	/*calculate direction of line*/
//	if (working_sensor_horizontal > working_sensor_vertical) line_direction = 0;
//	if (working_sensor_horizontal < working_sensor_vertical) line_direction = 1;

	if (working_sensor_horizontal <=3 && working_sensor_horizontal >= 1) {
 8000aee:	4b68      	ldr	r3, [pc, #416]	; (8000c90 <ProcessLineSensor+0x248>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d858      	bhi.n	8000ba8 <ProcessLineSensor+0x160>
 8000af6:	4b66      	ldr	r3, [pc, #408]	; (8000c90 <ProcessLineSensor+0x248>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d054      	beq.n	8000ba8 <ProcessLineSensor+0x160>
		horizontal_value = -(after_offset[0]*(-5) + after_offset[1]*(-2) + after_offset[2]*(-1)
 8000afe:	4b68      	ldr	r3, [pc, #416]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000b00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b66      	ldr	r3, [pc, #408]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	0389      	lsls	r1, r1, #14
 8000b12:	1ac9      	subs	r1, r1, r3
 8000b14:	0089      	lsls	r1, r1, #2
 8000b16:	1acb      	subs	r3, r1, r3
 8000b18:	b299      	uxth	r1, r3
 8000b1a:	4b61      	ldr	r3, [pc, #388]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000b1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	03c0      	lsls	r0, r0, #15
 8000b26:	1ac3      	subs	r3, r0, r3
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	440b      	add	r3, r1
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	b29a      	uxth	r2, r3
						 + after_offset[5]*(1) + after_offset[6]*(2) + after_offset[7]*(5));
 8000b34:	4b5a      	ldr	r3, [pc, #360]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000b36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b57      	ldr	r3, [pc, #348]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000b42:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	0389      	lsls	r1, r1, #14
 8000b4c:	1ac9      	subs	r1, r1, r3
 8000b4e:	0089      	lsls	r1, r1, #2
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	b299      	uxth	r1, r3
 8000b54:	4b52      	ldr	r3, [pc, #328]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000b56:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	b29b      	uxth	r3, r3
		horizontal_value = -(after_offset[0]*(-5) + after_offset[1]*(-2) + after_offset[2]*(-1)
 8000b60:	1acb      	subs	r3, r1, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4413      	add	r3, r2
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	b21a      	sxth	r2, r3
 8000b6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ca4 <ProcessLineSensor+0x25c>)
 8000b6c:	801a      	strh	r2, [r3, #0]
		if (horizontal_value > 500) horizontal_value = 500;
 8000b6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ca4 <ProcessLineSensor+0x25c>)
 8000b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b78:	dd03      	ble.n	8000b82 <ProcessLineSensor+0x13a>
 8000b7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <ProcessLineSensor+0x25c>)
 8000b7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b80:	801a      	strh	r2, [r3, #0]
		if (horizontal_value < -500) horizontal_value = -500;
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <ProcessLineSensor+0x25c>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000b8c:	da03      	bge.n	8000b96 <ProcessLineSensor+0x14e>
 8000b8e:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <ProcessLineSensor+0x25c>)
 8000b90:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8000b94:	801a      	strh	r2, [r3, #0]
		last_horizon_value = horizontal_value;
 8000b96:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <ProcessLineSensor+0x25c>)
 8000b98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b9c:	4b42      	ldr	r3, [pc, #264]	; (8000ca8 <ProcessLineSensor+0x260>)
 8000b9e:	801a      	strh	r2, [r3, #0]
		line_direction = 0;
 8000ba0:	4b42      	ldr	r3, [pc, #264]	; (8000cac <ProcessLineSensor+0x264>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e007      	b.n	8000bb8 <ProcessLineSensor+0x170>
=======
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	e040      	b.n	8000b24 <ProcessLineSensor+0xa0>
		after_offset[i] = adc_buffer[i] - OFFSET_SENSOR;
 8000aa2:	4a97      	ldr	r2, [pc, #604]	; (8000d00 <ProcessLineSensor+0x27c>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aaa:	f6a3 53de 	subw	r3, r3, #3550	; 0xdde
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	b219      	sxth	r1, r3
 8000ab2:	4a94      	ldr	r2, [pc, #592]	; (8000d04 <ProcessLineSensor+0x280>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (after_offset[i] < MIN_IR_VALUE) after_offset[i] = MIN_IR_VALUE;
 8000aba:	4a92      	ldr	r2, [pc, #584]	; (8000d04 <ProcessLineSensor+0x280>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	da04      	bge.n	8000ad0 <ProcessLineSensor+0x4c>
 8000ac6:	4a8f      	ldr	r2, [pc, #572]	; (8000d04 <ProcessLineSensor+0x280>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2100      	movs	r1, #0
 8000acc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (after_offset[i] > MAX_IR_VALUE) after_offset[i] = MAX_IR_VALUE;
 8000ad0:	4a8c      	ldr	r2, [pc, #560]	; (8000d04 <ProcessLineSensor+0x280>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ad8:	2b46      	cmp	r3, #70	; 0x46
 8000ada:	dd04      	ble.n	8000ae6 <ProcessLineSensor+0x62>
 8000adc:	4a89      	ldr	r2, [pc, #548]	; (8000d04 <ProcessLineSensor+0x280>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2146      	movs	r1, #70	; 0x46
 8000ae2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		sum_after_offset = sum_after_offset + after_offset[i];
		if (after_offset[i] != 0)  {
 8000ae6:	4a87      	ldr	r2, [pc, #540]	; (8000d04 <ProcessLineSensor+0x280>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d015      	beq.n	8000b1e <ProcessLineSensor+0x9a>
			working_sensor_total++;
 8000af2:	4b82      	ldr	r3, [pc, #520]	; (8000cfc <ProcessLineSensor+0x278>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b80      	ldr	r3, [pc, #512]	; (8000cfc <ProcessLineSensor+0x278>)
 8000afc:	701a      	strb	r2, [r3, #0]
			if (i < 8) working_sensor_horizontal++;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	dc06      	bgt.n	8000b12 <ProcessLineSensor+0x8e>
 8000b04:	4b7b      	ldr	r3, [pc, #492]	; (8000cf4 <ProcessLineSensor+0x270>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b79      	ldr	r3, [pc, #484]	; (8000cf4 <ProcessLineSensor+0x270>)
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	e005      	b.n	8000b1e <ProcessLineSensor+0x9a>
			else working_sensor_vertical++;
 8000b12:	4b79      	ldr	r3, [pc, #484]	; (8000cf8 <ProcessLineSensor+0x274>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b77      	ldr	r3, [pc, #476]	; (8000cf8 <ProcessLineSensor+0x274>)
 8000b1c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<16; i++) {
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3301      	adds	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	ddbb      	ble.n	8000aa2 <ProcessLineSensor+0x1e>
//	if (working_sensor_horizontal > working_sensor_vertical) line_direction = 0;
//	if (working_sensor_horizontal < working_sensor_vertical) line_direction = 1;


	/***********************CALCULATE FOR HORIZONTAL***************************/
	if (working_sensor_horizontal <=3 && working_sensor_horizontal >= 1) {
 8000b2a:	4b72      	ldr	r3, [pc, #456]	; (8000cf4 <ProcessLineSensor+0x270>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d860      	bhi.n	8000bf4 <ProcessLineSensor+0x170>
 8000b32:	4b70      	ldr	r3, [pc, #448]	; (8000cf4 <ProcessLineSensor+0x270>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d05c      	beq.n	8000bf4 <ProcessLineSensor+0x170>
		/*horizon sensor array is in line*/
		if (working_sensor_horizontal == 1) {
 8000b3a:	4b6e      	ldr	r3, [pc, #440]	; (8000cf4 <ProcessLineSensor+0x270>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d112      	bne.n	8000b68 <ProcessLineSensor+0xe4>
			/*reach the boundary*/
			if (after_offset[0] > 0) horizontal_value = -MAX_SUM_ALL_IR;
 8000b42:	4b70      	ldr	r3, [pc, #448]	; (8000d04 <ProcessLineSensor+0x280>)
 8000b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dd03      	ble.n	8000b54 <ProcessLineSensor+0xd0>
 8000b4c:	4b6e      	ldr	r3, [pc, #440]	; (8000d08 <ProcessLineSensor+0x284>)
 8000b4e:	f64f 62ca 	movw	r2, #65226	; 0xfeca
 8000b52:	801a      	strh	r2, [r3, #0]
			if (after_offset[7] > 0) horizontal_value = MAX_SUM_ALL_IR;
 8000b54:	4b6b      	ldr	r3, [pc, #428]	; (8000d04 <ProcessLineSensor+0x280>)
 8000b56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	dd41      	ble.n	8000be2 <ProcessLineSensor+0x15e>
 8000b5e:	4b6a      	ldr	r3, [pc, #424]	; (8000d08 <ProcessLineSensor+0x284>)
 8000b60:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000b64:	801a      	strh	r2, [r3, #0]
 8000b66:	e03c      	b.n	8000be2 <ProcessLineSensor+0x15e>
		}
		else {
			/*other position in line*/
			horizontal_value = 	WEIGHTED_3*(after_offset[7]-after_offset[0]) +
 8000b68:	4b66      	ldr	r3, [pc, #408]	; (8000d04 <ProcessLineSensor+0x280>)
 8000b6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b64      	ldr	r3, [pc, #400]	; (8000d04 <ProcessLineSensor+0x280>)
 8000b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	0052      	lsls	r2, r2, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	b29a      	uxth	r2, r3
								WEIGHTED_2*(after_offset[6]-after_offset[1]) +
 8000b82:	4b60      	ldr	r3, [pc, #384]	; (8000d04 <ProcessLineSensor+0x280>)
 8000b84:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4b5e      	ldr	r3, [pc, #376]	; (8000d04 <ProcessLineSensor+0x280>)
 8000b8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b90:	1acb      	subs	r3, r1, r3
			horizontal_value = 	WEIGHTED_3*(after_offset[7]-after_offset[0]) +
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4413      	add	r3, r2
 8000b9a:	b29a      	uxth	r2, r3
								WEIGHTED_1*(after_offset[5]-after_offset[2]);
 8000b9c:	4b59      	ldr	r3, [pc, #356]	; (8000d04 <ProcessLineSensor+0x280>)
 8000b9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ba2:	b299      	uxth	r1, r3
 8000ba4:	4b57      	ldr	r3, [pc, #348]	; (8000d04 <ProcessLineSensor+0x280>)
 8000ba6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	1acb      	subs	r3, r1, r3
 8000bae:	b29b      	uxth	r3, r3
								WEIGHTED_2*(after_offset[6]-after_offset[1]) +
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	b21a      	sxth	r2, r3
			horizontal_value = 	WEIGHTED_3*(after_offset[7]-after_offset[0]) +
 8000bb6:	4b54      	ldr	r3, [pc, #336]	; (8000d08 <ProcessLineSensor+0x284>)
 8000bb8:	801a      	strh	r2, [r3, #0]
			if (horizontal_value >  MAX_SUM_ALL_IR) horizontal_value = MAX_SUM_ALL_IR;
 8000bba:	4b53      	ldr	r3, [pc, #332]	; (8000d08 <ProcessLineSensor+0x284>)
 8000bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc0:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000bc4:	dd03      	ble.n	8000bce <ProcessLineSensor+0x14a>
 8000bc6:	4b50      	ldr	r3, [pc, #320]	; (8000d08 <ProcessLineSensor+0x284>)
 8000bc8:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000bcc:	801a      	strh	r2, [r3, #0]
			if (horizontal_value < -MAX_SUM_ALL_IR) horizontal_value = -MAX_SUM_ALL_IR;
 8000bce:	4b4e      	ldr	r3, [pc, #312]	; (8000d08 <ProcessLineSensor+0x284>)
 8000bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd4:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 8000bd8:	da03      	bge.n	8000be2 <ProcessLineSensor+0x15e>
 8000bda:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <ProcessLineSensor+0x284>)
 8000bdc:	f64f 62ca 	movw	r2, #65226	; 0xfeca
 8000be0:	801a      	strh	r2, [r3, #0]
		}
		last_horizon_value = horizontal_value;
 8000be2:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <ProcessLineSensor+0x284>)
 8000be4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000be8:	4b48      	ldr	r3, [pc, #288]	; (8000d0c <ProcessLineSensor+0x288>)
 8000bea:	801a      	strh	r2, [r3, #0]
		line_direction = 0;
 8000bec:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <ProcessLineSensor+0x28c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e007      	b.n	8000c04 <ProcessLineSensor+0x180>
>>>>>>> develop
	}
	else {
		/*out of line or to many sensors in 1 line*/
		horizontal_value = last_horizon_value;
<<<<<<< HEAD
 8000ba8:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <ProcessLineSensor+0x260>)
 8000baa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bae:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <ProcessLineSensor+0x25c>)
 8000bb0:	801a      	strh	r2, [r3, #0]
		line_direction = 2;
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <ProcessLineSensor+0x264>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	701a      	strb	r2, [r3, #0]
	}
	if (working_sensor_vertical <=3 && working_sensor_vertical >= 1) {
 8000bb8:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <ProcessLineSensor+0x24c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d858      	bhi.n	8000c72 <ProcessLineSensor+0x22a>
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <ProcessLineSensor+0x24c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d054      	beq.n	8000c72 <ProcessLineSensor+0x22a>
		vertical_value = -(after_offset[8]*(-5) + after_offset[9]*(-2) + after_offset[10]*(-1)
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000bca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000bd2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	0389      	lsls	r1, r1, #14
 8000bdc:	1ac9      	subs	r1, r1, r3
 8000bde:	0089      	lsls	r1, r1, #2
 8000be0:	1acb      	subs	r3, r1, r3
 8000be2:	b299      	uxth	r1, r3
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000be6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	03c0      	lsls	r0, r0, #15
 8000bf0:	1ac3      	subs	r3, r0, r3
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	440b      	add	r3, r1
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	b29a      	uxth	r2, r3
							 + after_offset[13]*(1) + after_offset[14]*(2) + after_offset[15]*(5));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000c00:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000c0c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	0389      	lsls	r1, r1, #14
 8000c16:	1ac9      	subs	r1, r1, r3
 8000c18:	0089      	lsls	r1, r1, #2
 8000c1a:	1acb      	subs	r3, r1, r3
 8000c1c:	b299      	uxth	r1, r3
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <ProcessLineSensor+0x258>)
 8000c20:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	b29b      	uxth	r3, r3
		vertical_value = -(after_offset[8]*(-5) + after_offset[9]*(-2) + after_offset[10]*(-1)
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <ProcessLineSensor+0x268>)
 8000c36:	801a      	strh	r2, [r3, #0]
		if (vertical_value > 500) vertical_value = 500;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <ProcessLineSensor+0x268>)
 8000c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c42:	dd03      	ble.n	8000c4c <ProcessLineSensor+0x204>
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <ProcessLineSensor+0x268>)
 8000c46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c4a:	801a      	strh	r2, [r3, #0]
		if (vertical_value < -500) vertical_value = -500;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <ProcessLineSensor+0x268>)
 8000c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c52:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000c56:	da03      	bge.n	8000c60 <ProcessLineSensor+0x218>
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <ProcessLineSensor+0x268>)
 8000c5a:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8000c5e:	801a      	strh	r2, [r3, #0]
		last_vertical_value = vertical_value;
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <ProcessLineSensor+0x268>)
 8000c62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <ProcessLineSensor+0x26c>)
 8000c68:	801a      	strh	r2, [r3, #0]
		line_direction = 1;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <ProcessLineSensor+0x264>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	e007      	b.n	8000c82 <ProcessLineSensor+0x23a>
	}
	else {
		/*out of line or to many sensors in 1 line*/
		vertical_value = last_vertical_value;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <ProcessLineSensor+0x26c>)
 8000c74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <ProcessLineSensor+0x268>)
 8000c7a:	801a      	strh	r2, [r3, #0]
		line_direction = 2;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <ProcessLineSensor+0x264>)
 8000c7e:	2202      	movs	r2, #2
 8000c80:	701a      	strb	r2, [r3, #0]
=======
 8000bf4:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <ProcessLineSensor+0x288>)
 8000bf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bfa:	4b43      	ldr	r3, [pc, #268]	; (8000d08 <ProcessLineSensor+0x284>)
 8000bfc:	801a      	strh	r2, [r3, #0]
		line_direction = 2;
 8000bfe:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <ProcessLineSensor+0x28c>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	701a      	strb	r2, [r3, #0]
	}

	/***********************CALCULATE FOR VERTICAL***************************/
	if (line_direction != 0) {
 8000c04:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <ProcessLineSensor+0x28c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d06c      	beq.n	8000ce6 <ProcessLineSensor+0x262>
		/*horizontal sensor not in line*/
		if (working_sensor_vertical <=3 && working_sensor_vertical >= 1) {
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <ProcessLineSensor+0x274>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d860      	bhi.n	8000cd6 <ProcessLineSensor+0x252>
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <ProcessLineSensor+0x274>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d05c      	beq.n	8000cd6 <ProcessLineSensor+0x252>
			/*vertical sensor array is in line*/
			if (working_sensor_vertical == 1) {
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <ProcessLineSensor+0x274>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d112      	bne.n	8000c4a <ProcessLineSensor+0x1c6>
				/*reach the boundary*/
				if (after_offset[8]  > 0) vertical_value = -MAX_SUM_ALL_IR;
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <ProcessLineSensor+0x280>)
 8000c26:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	dd03      	ble.n	8000c36 <ProcessLineSensor+0x1b2>
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <ProcessLineSensor+0x290>)
 8000c30:	f64f 62ca 	movw	r2, #65226	; 0xfeca
 8000c34:	801a      	strh	r2, [r3, #0]
				if (after_offset[15] > 0) vertical_value = MAX_SUM_ALL_IR;
 8000c36:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <ProcessLineSensor+0x280>)
 8000c38:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	dd41      	ble.n	8000cc4 <ProcessLineSensor+0x240>
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <ProcessLineSensor+0x290>)
 8000c42:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000c46:	801a      	strh	r2, [r3, #0]
 8000c48:	e03c      	b.n	8000cc4 <ProcessLineSensor+0x240>
			} else {
				/*other position in line*/
				vertical_value = 	WEIGHTED_3*(after_offset[15]-after_offset[8]) +
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <ProcessLineSensor+0x280>)
 8000c4c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <ProcessLineSensor+0x280>)
 8000c54:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	0052      	lsls	r2, r2, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	b29a      	uxth	r2, r3
									WEIGHTED_2*(after_offset[14]-after_offset[9]) +
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <ProcessLineSensor+0x280>)
 8000c66:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <ProcessLineSensor+0x280>)
 8000c6e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000c72:	1acb      	subs	r3, r1, r3
				vertical_value = 	WEIGHTED_3*(after_offset[15]-after_offset[8]) +
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b29a      	uxth	r2, r3
									WEIGHTED_1*(after_offset[13]-after_offset[10]);
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <ProcessLineSensor+0x280>)
 8000c80:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000c84:	b299      	uxth	r1, r3
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <ProcessLineSensor+0x280>)
 8000c88:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	1acb      	subs	r3, r1, r3
 8000c90:	b29b      	uxth	r3, r3
									WEIGHTED_2*(after_offset[14]-after_offset[9]) +
 8000c92:	4413      	add	r3, r2
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	b21a      	sxth	r2, r3
				vertical_value = 	WEIGHTED_3*(after_offset[15]-after_offset[8]) +
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <ProcessLineSensor+0x290>)
 8000c9a:	801a      	strh	r2, [r3, #0]
				if (vertical_value >  MAX_SUM_ALL_IR) vertical_value = MAX_SUM_ALL_IR;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <ProcessLineSensor+0x290>)
 8000c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca2:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000ca6:	dd03      	ble.n	8000cb0 <ProcessLineSensor+0x22c>
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <ProcessLineSensor+0x290>)
 8000caa:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000cae:	801a      	strh	r2, [r3, #0]
				if (vertical_value < -MAX_SUM_ALL_IR) vertical_value = -MAX_SUM_ALL_IR;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <ProcessLineSensor+0x290>)
 8000cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb6:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 8000cba:	da03      	bge.n	8000cc4 <ProcessLineSensor+0x240>
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <ProcessLineSensor+0x290>)
 8000cbe:	f64f 62ca 	movw	r2, #65226	; 0xfeca
 8000cc2:	801a      	strh	r2, [r3, #0]
			}
			last_vertical_value = vertical_value;
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <ProcessLineSensor+0x290>)
 8000cc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <ProcessLineSensor+0x294>)
 8000ccc:	801a      	strh	r2, [r3, #0]
			line_direction = 1;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <ProcessLineSensor+0x28c>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e007      	b.n	8000ce6 <ProcessLineSensor+0x262>
		}
		else {
			/*out of line or to many sensors in 1 line*/
			vertical_value = last_vertical_value;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <ProcessLineSensor+0x294>)
 8000cd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <ProcessLineSensor+0x290>)
 8000cde:	801a      	strh	r2, [r3, #0]
			line_direction = 2;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <ProcessLineSensor+0x28c>)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	701a      	strb	r2, [r3, #0]
>>>>>>> develop
//		return_value = 500;
//	}
//
//	return return_value;

	return 0;
<<<<<<< HEAD
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	200001ac 	.word	0x200001ac
 8000c94:	200001ad 	.word	0x200001ad
 8000c98:	200001ae 	.word	0x200001ae
 8000c9c:	2000016c 	.word	0x2000016c
 8000ca0:	2000018c 	.word	0x2000018c
 8000ca4:	200001b0 	.word	0x200001b0
 8000ca8:	200001b4 	.word	0x200001b4
 8000cac:	2000000d 	.word	0x2000000d
 8000cb0:	200001b2 	.word	0x200001b2
 8000cb4:	200001b6 	.word	0x200001b6

08000cb8 <TransmitPackedData>:
=======
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	200001ac 	.word	0x200001ac
 8000cf8:	200001ad 	.word	0x200001ad
 8000cfc:	200001ae 	.word	0x200001ae
 8000d00:	2000016c 	.word	0x2000016c
 8000d04:	2000018c 	.word	0x2000018c
 8000d08:	200001b0 	.word	0x200001b0
 8000d0c:	200001b4 	.word	0x200001b4
 8000d10:	2000000d 	.word	0x2000000d
 8000d14:	200001b2 	.word	0x200001b2
 8000d18:	200001b6 	.word	0x200001b6

08000d1c <TransmitPackedData>:
>>>>>>> develop
/*format : [s][dir][horizon_data][vertical_data][\0]
 * [dir]: 	0: send "h" - line on horizontal sensors
 * 			1: send "v" - line on vertical sensors
 */

void TransmitPackedData(uint8_t dir, uint8_t horizon_data, uint8_t vertical_data) {
<<<<<<< HEAD
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	71bb      	strb	r3, [r7, #6]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	717b      	strb	r3, [r7, #5]

	/*packaging data with prefix and suffix to message*/
	packed_data[0] = 's';
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <TransmitPackedData+0x68>)
 8000ccc:	2273      	movs	r2, #115	; 0x73
 8000cce:	701a      	strb	r2, [r3, #0]
	if (dir == 0) packed_data[1] = 'h';
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <TransmitPackedData+0x24>
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <TransmitPackedData+0x68>)
 8000cd8:	2268      	movs	r2, #104	; 0x68
 8000cda:	705a      	strb	r2, [r3, #1]
	if (dir == 1) packed_data[1] = 'v';
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d102      	bne.n	8000ce8 <TransmitPackedData+0x30>
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <TransmitPackedData+0x68>)
 8000ce4:	2276      	movs	r2, #118	; 0x76
 8000ce6:	705a      	strb	r2, [r3, #1]
	if (dir == 2) packed_data[1] = 'i';
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d102      	bne.n	8000cf4 <TransmitPackedData+0x3c>
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <TransmitPackedData+0x68>)
 8000cf0:	2269      	movs	r2, #105	; 0x69
 8000cf2:	705a      	strb	r2, [r3, #1]
	packed_data[2] = horizon_data;
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <TransmitPackedData+0x68>)
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	7093      	strb	r3, [r2, #2]
	packed_data[3] = vertical_data;
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <TransmitPackedData+0x68>)
 8000cfc:	797b      	ldrb	r3, [r7, #5]
 8000cfe:	70d3      	strb	r3, [r2, #3]
	packed_data[4] = '\0';
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <TransmitPackedData+0x68>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	711a      	strb	r2, [r3, #4]
=======
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	460b      	mov	r3, r1
 8000d28:	71bb      	strb	r3, [r7, #6]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	717b      	strb	r3, [r7, #5]

	/*packaging data with prefix and suffix to message*/
	packed_data[0] = 's';
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <TransmitPackedData+0x68>)
 8000d30:	2273      	movs	r2, #115	; 0x73
 8000d32:	701a      	strb	r2, [r3, #0]
	if (dir == 0) packed_data[1] = 'h';
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <TransmitPackedData+0x24>
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <TransmitPackedData+0x68>)
 8000d3c:	2268      	movs	r2, #104	; 0x68
 8000d3e:	705a      	strb	r2, [r3, #1]
	if (dir == 1) packed_data[1] = 'v';
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d102      	bne.n	8000d4c <TransmitPackedData+0x30>
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <TransmitPackedData+0x68>)
 8000d48:	2276      	movs	r2, #118	; 0x76
 8000d4a:	705a      	strb	r2, [r3, #1]
	if (dir == 2) packed_data[1] = 'i';
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d102      	bne.n	8000d58 <TransmitPackedData+0x3c>
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <TransmitPackedData+0x68>)
 8000d54:	2269      	movs	r2, #105	; 0x69
 8000d56:	705a      	strb	r2, [r3, #1]
	packed_data[2] = horizon_data;
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <TransmitPackedData+0x68>)
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	7093      	strb	r3, [r2, #2]
	packed_data[3] = vertical_data;
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <TransmitPackedData+0x68>)
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	70d3      	strb	r3, [r2, #3]
	packed_data[4] = '\0';
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <TransmitPackedData+0x68>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	711a      	strb	r2, [r3, #4]
>>>>>>> develop

	/*send the packed data*/
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	HAL_UART_Transmit(&huart1, packed_data, length, 1000);
<<<<<<< HEAD
 8000d06:	2305      	movs	r3, #5
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	4904      	ldr	r1, [pc, #16]	; (8000d20 <TransmitPackedData+0x68>)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <TransmitPackedData+0x6c>)
 8000d12:	f003 fc95 	bl	8004640 <HAL_UART_Transmit>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001c4 	.word	0x200001c4
 8000d24:	200000e4 	.word	0x200000e4

08000d28 <HAL_UART_RxCpltCallback>:
=======
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	4904      	ldr	r1, [pc, #16]	; (8000d84 <TransmitPackedData+0x68>)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <TransmitPackedData+0x6c>)
 8000d76:	f003 fc93 	bl	80046a0 <HAL_UART_Transmit>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001c4 	.word	0x200001c4
 8000d88:	200000e4 	.word	0x200000e4

08000d8c <HAL_UART_RxCpltCallback>:
>>>>>>> develop
    while (HAL_UART_Receive(huart, &dummy, 1, 10) == HAL_OK) {
        // Discard received data
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
<<<<<<< HEAD
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <HAL_UART_RxCpltCallback+0x54>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d11c      	bne.n	8000d72 <HAL_UART_RxCpltCallback+0x4a>
		// Check if the received character is 'r' (request to send)
//		Flush_UART_RX_Buffer(huart);
		if ((char)rx_data == 'r') {
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_UART_RxCpltCallback+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b72      	cmp	r3, #114	; 0x72
 8000d40:	d112      	bne.n	8000d68 <HAL_UART_RxCpltCallback+0x40>
			// Send acknowledgment 'a' (clear to send)
			uint8_t ack = 'a';
 8000d42:	2361      	movs	r3, #97	; 0x61
 8000d44:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart1, &ack, 1, 1000);
 8000d46:	f107 010f 	add.w	r1, r7, #15
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	2201      	movs	r2, #1
 8000d50:	480a      	ldr	r0, [pc, #40]	; (8000d7c <HAL_UART_RxCpltCallback+0x54>)
 8000d52:	f003 fc75 	bl	8004640 <HAL_UART_Transmit>

			// Transmit the packed data
			TransmitPackedData(line_direction, mapped_horizon_value, mapped_vertical_value);
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_UART_RxCpltCallback+0x5c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_UART_RxCpltCallback+0x60>)
 8000d5c:	7811      	ldrb	r1, [r2, #0]
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <HAL_UART_RxCpltCallback+0x64>)
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ffa8 	bl	8000cb8 <TransmitPackedData>
		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4905      	ldr	r1, [pc, #20]	; (8000d80 <HAL_UART_RxCpltCallback+0x58>)
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <HAL_UART_RxCpltCallback+0x54>)
 8000d6e:	f003 fcf1 	bl	8004754 <HAL_UART_Receive_IT>
	}
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200000e4 	.word	0x200000e4
 8000d80:	200001c0 	.word	0x200001c0
 8000d84:	2000000d 	.word	0x2000000d
 8000d88:	200001b8 	.word	0x200001b8
 8000d8c:	200001b9 	.word	0x200001b9

08000d90 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	6078      	str	r0, [r7, #4]
	ProcessLineSensor();
 8000d98:	f7ff fe56 	bl	8000a48 <ProcessLineSensor>
	mapped_horizon_value = map(horizontal_value, -500, 500, 1, 101);
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da2:	4618      	mov	r0, r3
 8000da4:	2365      	movs	r3, #101	; 0x65
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <HAL_ADC_ConvCpltCallback+0x58>)
 8000db0:	f7ff fe2a 	bl	8000a08 <map>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_ADC_ConvCpltCallback+0x5c>)
 8000dba:	701a      	strb	r2, [r3, #0]
	mapped_vertical_value = map(vertical_value, -500, 500, 1, 101);
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_ADC_ConvCpltCallback+0x60>)
 8000dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	2365      	movs	r3, #101	; 0x65
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dce:	4906      	ldr	r1, [pc, #24]	; (8000de8 <HAL_ADC_ConvCpltCallback+0x58>)
 8000dd0:	f7ff fe1a 	bl	8000a08 <map>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000dda:	701a      	strb	r2, [r3, #0]

}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200001b0 	.word	0x200001b0
 8000de8:	fffffe0c 	.word	0xfffffe0c
 8000dec:	200001b8 	.word	0x200001b8
 8000df0:	200001b2 	.word	0x200001b2
 8000df4:	200001b9 	.word	0x200001b9

08000df8 <Error_Handler>:
=======
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_UART_RxCpltCallback+0x54>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d11c      	bne.n	8000dd6 <HAL_UART_RxCpltCallback+0x4a>
		// Check if the received character is 'r' (request to send)
//		Flush_UART_RX_Buffer(huart);
		if ((char)rx_data == 'r') {
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_RxCpltCallback+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b72      	cmp	r3, #114	; 0x72
 8000da4:	d112      	bne.n	8000dcc <HAL_UART_RxCpltCallback+0x40>
			// Send acknowledgment 'a' (clear to send)
			uint8_t ack = 'a';
 8000da6:	2361      	movs	r3, #97	; 0x61
 8000da8:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart1, &ack, 1, 1000);
 8000daa:	f107 010f 	add.w	r1, r7, #15
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	2201      	movs	r2, #1
 8000db4:	480a      	ldr	r0, [pc, #40]	; (8000de0 <HAL_UART_RxCpltCallback+0x54>)
 8000db6:	f003 fc73 	bl	80046a0 <HAL_UART_Transmit>

			// Transmit the packed data
			TransmitPackedData(line_direction, mapped_horizon_value, mapped_vertical_value);
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_UART_RxCpltCallback+0x5c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <HAL_UART_RxCpltCallback+0x60>)
 8000dc0:	7811      	ldrb	r1, [r2, #0]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <HAL_UART_RxCpltCallback+0x64>)
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ffa8 	bl	8000d1c <TransmitPackedData>
		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4905      	ldr	r1, [pc, #20]	; (8000de4 <HAL_UART_RxCpltCallback+0x58>)
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <HAL_UART_RxCpltCallback+0x54>)
 8000dd2:	f003 fcef 	bl	80047b4 <HAL_UART_Receive_IT>
	}
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000e4 	.word	0x200000e4
 8000de4:	200001c0 	.word	0x200001c0
 8000de8:	2000000d 	.word	0x2000000d
 8000dec:	200001b8 	.word	0x200001b8
 8000df0:	200001b9 	.word	0x200001b9

08000df4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	6078      	str	r0, [r7, #4]
//	ProcessLineSensor();
	mapped_horizon_value = map(horizontal_value, -MAX_SUM_ALL_IR, MAX_SUM_ALL_IR, 1, 101);
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_ADC_ConvCpltCallback+0x50>)
 8000dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e02:	4618      	mov	r0, r3
 8000e04:	2365      	movs	r3, #101	; 0x65
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000e0e:	490e      	ldr	r1, [pc, #56]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x54>)
 8000e10:	f7ff fe18 	bl	8000a44 <map>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_ADC_ConvCpltCallback+0x58>)
 8000e1a:	701a      	strb	r2, [r3, #0]
	mapped_vertical_value = map(vertical_value, -MAX_SUM_ALL_IR, MAX_SUM_ALL_IR, 1, 101);
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e22:	4618      	mov	r0, r3
 8000e24:	2365      	movs	r3, #101	; 0x65
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000e2e:	4906      	ldr	r1, [pc, #24]	; (8000e48 <HAL_ADC_ConvCpltCallback+0x54>)
 8000e30:	f7ff fe08 	bl	8000a44 <map>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x60>)
 8000e3a:	701a      	strb	r2, [r3, #0]

}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200001b0 	.word	0x200001b0
 8000e48:	fffffeca 	.word	0xfffffeca
 8000e4c:	200001b8 	.word	0x200001b8
 8000e50:	200001b2 	.word	0x200001b2
 8000e54:	200001b9 	.word	0x200001b9

08000e58 <Error_Handler>:
>>>>>>> develop
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
=======
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
>>>>>>> develop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
=======
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
>>>>>>> develop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
=======
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
>>>>>>> develop
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
=======
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_MspInit+0x44>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6613      	str	r3, [r2, #96]	; 0x60
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_MspInit+0x44>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x44>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x44>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x44>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
=======
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6613      	str	r3, [r2, #96]	; 0x60
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
>>>>>>> develop
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_ADC_MspInit>:
=======
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_ADC_MspInit>:
>>>>>>> develop
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b0a2      	sub	sp, #136	; 0x88
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	225c      	movs	r2, #92	; 0x5c
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 ff25 	bl	8005cbc <memset>
  if(hadc->Instance==ADC1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <HAL_ADC_MspInit+0x188>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	f040 80a7 	bne.w	8000fcc <HAL_ADC_MspInit+0x180>
=======
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0a2      	sub	sp, #136	; 0x88
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	225c      	movs	r2, #92	; 0x5c
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 ff25 	bl	8005d1c <memset>
  if(hadc->Instance==ADC1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a57      	ldr	r2, [pc, #348]	; (8001034 <HAL_ADC_MspInit+0x188>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	f040 80a7 	bne.w	800102c <HAL_ADC_MspInit+0x180>
>>>>>>> develop

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
<<<<<<< HEAD
 8000e7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e82:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e92:	2308      	movs	r3, #8
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e96:	2307      	movs	r3, #7
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	4618      	mov	r0, r3
 8000eae:	f003 f86f 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000eb8:	f7ff ff9e 	bl	8000df8 <Error_Handler>
=======
 8000ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ee2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee8:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000eea:	2303      	movs	r3, #3
 8000eec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 f86f 	bl	8003ff0 <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000f18:	f7ff ff9e 	bl	8000e58 <Error_Handler>
>>>>>>> develop
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
<<<<<<< HEAD
 8000ebc:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a45      	ldr	r2, [pc, #276]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000ec2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed4:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a3f      	ldr	r2, [pc, #252]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	4a39      	ldr	r2, [pc, #228]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f10:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_ADC_MspInit+0x18c>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
=======
 8000f1c:	4b46      	ldr	r3, [pc, #280]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	4a45      	ldr	r2, [pc, #276]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f28:	4b43      	ldr	r3, [pc, #268]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	4b40      	ldr	r3, [pc, #256]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	4a3f      	ldr	r2, [pc, #252]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f50:	4a39      	ldr	r2, [pc, #228]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f58:	4b37      	ldr	r3, [pc, #220]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b34      	ldr	r3, [pc, #208]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a33      	ldr	r2, [pc, #204]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <HAL_ADC_MspInit+0x18c>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> develop
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
<<<<<<< HEAD
 8000f1c:	233f      	movs	r3, #63	; 0x3f
 8000f1e:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f20:	230b      	movs	r3, #11
 8000f22:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	482b      	ldr	r0, [pc, #172]	; (8000fdc <HAL_ADC_MspInit+0x190>)
 8000f30:	f002 f800 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f34:	23ff      	movs	r3, #255	; 0xff
 8000f36:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f001 fff3 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f52:	230b      	movs	r3, #11
 8000f54:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <HAL_ADC_MspInit+0x194>)
 8000f62:	f001 ffe7 	bl	8002f34 <HAL_GPIO_Init>
=======
 8000f7c:	233f      	movs	r3, #63	; 0x3f
 8000f7e:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f80:	230b      	movs	r3, #11
 8000f82:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482b      	ldr	r0, [pc, #172]	; (800103c <HAL_ADC_MspInit+0x190>)
 8000f90:	f002 f800 	bl	8002f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f94:	23ff      	movs	r3, #255	; 0xff
 8000f96:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f98:	230b      	movs	r3, #11
 8000f9a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f001 fff3 	bl	8002f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481f      	ldr	r0, [pc, #124]	; (8001040 <HAL_ADC_MspInit+0x194>)
 8000fc2:	f001 ffe7 	bl	8002f94 <HAL_GPIO_Init>
>>>>>>> develop

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
<<<<<<< HEAD
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f68:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_ADC_MspInit+0x19c>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f92:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f96:	2220      	movs	r2, #32
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa0:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000fa2:	f001 fd51 	bl	8002a48 <HAL_DMA_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8000fac:	f7ff ff24 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000fb4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_ADC_MspInit+0x198>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2012      	movs	r0, #18
 8000fc2:	f001 fd0a 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000fc6:	2012      	movs	r0, #18
 8000fc8:	f001 fd23 	bl	8002a12 <HAL_NVIC_EnableIRQ>
=======
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <HAL_ADC_MspInit+0x19c>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8001002:	f001 fd51 	bl	8002aa8 <HAL_DMA_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 800100c:	f7ff ff24 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8001014:	64da      	str	r2, [r3, #76]	; 0x4c
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_ADC_MspInit+0x198>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2012      	movs	r0, #18
 8001022:	f001 fd0a 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001026:	2012      	movs	r0, #18
 8001028:	f001 fd23 	bl	8002a72 <HAL_NVIC_EnableIRQ>
>>>>>>> develop
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000fcc:	bf00      	nop
 8000fce:	3788      	adds	r7, #136	; 0x88
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	50040000 	.word	0x50040000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000800 	.word	0x48000800
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	2000009c 	.word	0x2000009c
 8000fe8:	40020008 	.word	0x40020008

08000fec <HAL_UART_MspInit>:
=======
 800102c:	bf00      	nop
 800102e:	3788      	adds	r7, #136	; 0x88
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	50040000 	.word	0x50040000
 8001038:	40021000 	.word	0x40021000
 800103c:	48000800 	.word	0x48000800
 8001040:	48000400 	.word	0x48000400
 8001044:	2000009c 	.word	0x2000009c
 8001048:	40020008 	.word	0x40020008

0800104c <HAL_UART_MspInit>:
>>>>>>> develop
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0a0      	sub	sp, #128	; 0x80
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	225c      	movs	r2, #92	; 0x5c
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f004 fe55 	bl	8005cbc <memset>
  if(huart->Instance==USART1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <HAL_UART_MspInit+0xb8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d13f      	bne.n	800109c <HAL_UART_MspInit+0xb0>
=======
 800104c:	b580      	push	{r7, lr}
 800104e:	b0a0      	sub	sp, #128	; 0x80
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	225c      	movs	r2, #92	; 0x5c
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fe55 	bl	8005d1c <memset>
  if(huart->Instance==USART1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <HAL_UART_MspInit+0xb8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d13f      	bne.n	80010fc <HAL_UART_MspInit+0xb0>
>>>>>>> develop

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
<<<<<<< HEAD
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4618      	mov	r0, r3
 800102a:	f002 ffb1 	bl	8003f90 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001034:	f7ff fee0 	bl	8000df8 <Error_Handler>
=======
 800107c:	2301      	movs	r3, #1
 800107e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4618      	mov	r0, r3
 800108a:	f002 ffb1 	bl	8003ff0 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001094:	f7ff fee0 	bl	8000e58 <Error_Handler>
>>>>>>> develop
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_UART_MspInit+0xbc>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103c:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_UART_MspInit+0xbc>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001042:	6613      	str	r3, [r2, #96]	; 0x60
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_UART_MspInit+0xbc>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_MspInit+0xbc>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_UART_MspInit+0xbc>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_UART_MspInit+0xbc>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
=======
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_UART_MspInit+0xbc>)
 800109a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_UART_MspInit+0xbc>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	6613      	str	r3, [r2, #96]	; 0x60
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_UART_MspInit+0xbc>)
 80010a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_UART_MspInit+0xbc>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <HAL_UART_MspInit+0xbc>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_UART_MspInit+0xbc>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
>>>>>>> develop
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
 8001068:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800106c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800107a:	2307      	movs	r3, #7
 800107c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f001 ff54 	bl	8002f34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2025      	movs	r0, #37	; 0x25
 8001092:	f001 fca2 	bl	80029da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001096:	2025      	movs	r0, #37	; 0x25
 8001098:	f001 fcbb 	bl	8002a12 <HAL_NVIC_EnableIRQ>
=======
 80010c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010da:	2307      	movs	r3, #7
 80010dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 ff54 	bl	8002f94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2025      	movs	r0, #37	; 0x25
 80010f2:	f001 fca2 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010f6:	2025      	movs	r0, #37	; 0x25
 80010f8:	f001 fcbb 	bl	8002a72 <HAL_NVIC_EnableIRQ>
>>>>>>> develop
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800109c:	bf00      	nop
 800109e:	3780      	adds	r7, #128	; 0x80
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40021000 	.word	0x40021000

080010ac <NMI_Handler>:
=======
 80010fc:	bf00      	nop
 80010fe:	3780      	adds	r7, #128	; 0x80
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40013800 	.word	0x40013800
 8001108:	40021000 	.word	0x40021000

0800110c <NMI_Handler>:
>>>>>>> develop
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
=======
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:
=======
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:
>>>>>>> develop

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
=======
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:
=======
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:
>>>>>>> develop

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
=======
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:
=======
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:
>>>>>>> develop

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
=======
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:
=======
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:
>>>>>>> develop

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
=======
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:
=======
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:
>>>>>>> develop

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
=======
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:
=======
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:
>>>>>>> develop

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
=======
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:
=======
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:
>>>>>>> develop

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
=======
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
>>>>>>> develop

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:
=======
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:
>>>>>>> develop

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
=======
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80010f8:	f000 f8b0 	bl	800125c <HAL_IncTick>
=======
 8001158:	f000 f8b0 	bl	80012bc <HAL_IncTick>
>>>>>>> develop
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <DMA1_Channel1_IRQHandler>:
=======
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <DMA1_Channel1_IRQHandler>:
>>>>>>> develop

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
<<<<<<< HEAD
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
=======
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <DMA1_Channel1_IRQHandler+0x10>)
 8001106:	f001 fe36 	bl	8002d76 <HAL_DMA_IRQHandler>
=======
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <DMA1_Channel1_IRQHandler+0x10>)
 8001166:	f001 fe36 	bl	8002dd6 <HAL_DMA_IRQHandler>
>>>>>>> develop
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
<<<<<<< HEAD
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000009c 	.word	0x2000009c

08001114 <ADC1_IRQHandler>:
=======
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000009c 	.word	0x2000009c

08001174 <ADC1_IRQHandler>:
>>>>>>> develop

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
<<<<<<< HEAD
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
=======
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
<<<<<<< HEAD
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <ADC1_IRQHandler+0x10>)
 800111a:	f000 fc83 	bl	8001a24 <HAL_ADC_IRQHandler>
=======
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <ADC1_IRQHandler+0x10>)
 800117a:	f000 fc83 	bl	8001a84 <HAL_ADC_IRQHandler>
>>>>>>> develop
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
<<<<<<< HEAD
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000038 	.word	0x20000038

08001128 <USART1_IRQHandler>:
=======
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000038 	.word	0x20000038

08001188 <USART1_IRQHandler>:
>>>>>>> develop

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
=======
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
>>>>>>> develop
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART1_IRQHandler+0x10>)
 800112e:	f003 fb5d 	bl	80047ec <HAL_UART_IRQHandler>
=======
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <USART1_IRQHandler+0x10>)
 800118e:	f003 fb5d 	bl	800484c <HAL_UART_IRQHandler>
>>>>>>> develop
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000e4 	.word	0x200000e4

0800113c <SystemInit>:
=======
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000e4 	.word	0x200000e4

0800119c <SystemInit>:
>>>>>>> develop
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< HEAD
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
=======
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
>>>>>>> develop
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:
=======
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <SystemInit+0x20>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <SystemInit+0x20>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:
>>>>>>> develop

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
<<<<<<< HEAD
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001164:	f7ff ffea 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopForever+0x6>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopForever+0xe>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopForever+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f004 fd9d 	bl	8005ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001192:	f7ff f999 	bl	80004c8 <main>

08001196 <LoopForever>:

LoopForever:
    b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001198:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80011a4:	08005d84 	.word	0x08005d84
  ldr r2, =_sbss
 80011a8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80011ac:	200001d0 	.word	0x200001d0

080011b0 <CAN1_RX0_IRQHandler>:
=======
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c4:	f7ff ffea 	bl	800119c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopForever+0x6>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LoopForever+0xe>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <LoopForever+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f004 fd9d 	bl	8005d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f2:	f7ff f969 	bl	80004c8 <main>

080011f6 <LoopForever>:

LoopForever:
    b LoopForever
 80011f6:	e7fe      	b.n	80011f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001204:	08005de4 	.word	0x08005de4
  ldr r2, =_sbss
 8001208:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800120c:	200001d0 	.word	0x200001d0

08001210 <CAN1_RX0_IRQHandler>:
>>>>>>> develop
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 80011b0:	e7fe      	b.n	80011b0 <CAN1_RX0_IRQHandler>

080011b2 <HAL_Init>:
=======
 8001210:	e7fe      	b.n	8001210 <CAN1_RX0_IRQHandler>

08001212 <HAL_Init>:
>>>>>>> develop
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	71fb      	strb	r3, [r7, #7]
=======
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	71fb      	strb	r3, [r7, #7]
>>>>>>> develop
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80011bc:	2003      	movs	r0, #3
 80011be:	f001 fc01 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f80e 	bl	80011e4 <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e001      	b.n	80011d8 <HAL_Init+0x26>
=======
 800121c:	2003      	movs	r0, #3
 800121e:	f001 fc01 	bl	8002a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001222:	200f      	movs	r0, #15
 8001224:	f000 f80e 	bl	8001244 <HAL_InitTick>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e001      	b.n	8001238 <HAL_Init+0x26>
>>>>>>> develop
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 80011d4:	f7ff fe16 	bl	8000e04 <HAL_MspInit>
=======
 8001234:	f7ff fe16 	bl	8000e64 <HAL_MspInit>
>>>>>>> develop
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 80011d8:	79fb      	ldrb	r3, [r7, #7]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_InitTick>:
=======
 8001238:	79fb      	ldrb	r3, [r7, #7]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_InitTick>:
>>>>>>> develop
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_InitTick+0x6c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d023      	beq.n	8001240 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_InitTick+0x70>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_InitTick+0x6c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fc0d 	bl	8002a2e <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d809      	bhi.n	8001234 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f001 fbd7 	bl	80029da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_InitTick+0x74>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	e007      	b.n	8001244 <HAL_InitTick+0x60>
=======
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_InitTick+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d023      	beq.n	80012a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_InitTick+0x70>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_InitTick+0x6c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fc0d 	bl	8002a8e <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d809      	bhi.n	8001294 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f001 fbd7 	bl	8002a3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_InitTick+0x74>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e007      	b.n	80012a4 <HAL_InitTick+0x60>
>>>>>>> develop
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< HEAD
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e004      	b.n	8001244 <HAL_InitTick+0x60>
=======
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e004      	b.n	80012a4 <HAL_InitTick+0x60>
>>>>>>> develop
      }
    }
    else
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e001      	b.n	8001244 <HAL_InitTick+0x60>
=======
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e001      	b.n	80012a4 <HAL_InitTick+0x60>
>>>>>>> develop
    }
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< HEAD
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
=======
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
>>>>>>> develop
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000018 	.word	0x20000018
 8001254:	20000010 	.word	0x20000010
 8001258:	20000014 	.word	0x20000014

0800125c <HAL_IncTick>:
=======
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000018 	.word	0x20000018
 80012b4:	20000010 	.word	0x20000010
 80012b8:	20000014 	.word	0x20000014

080012bc <HAL_IncTick>:
>>>>>>> develop
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000018 	.word	0x20000018
 8001280:	200001cc 	.word	0x200001cc

08001284 <HAL_GetTick>:
=======
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000018 	.word	0x20000018
 80012e0:	200001cc 	.word	0x200001cc

080012e4 <HAL_GetTick>:
>>>>>>> develop
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200001cc 	.word	0x200001cc

0800129c <HAL_Delay>:
=======
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200001cc 	.word	0x200001cc

080012fc <HAL_Delay>:
>>>>>>> develop
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000018 	.word	0x20000018

080012e4 <LL_ADC_SetCommonClock>:
=======
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000018 	.word	0x20000018

08001344 <LL_ADC_SetCommonClock>:
>>>>>>> develop
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< HEAD
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	609a      	str	r2, [r3, #8]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_ADC_SetCommonPathInternalCh>:
=======
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> develop
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< HEAD
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_GetCommonPathInternalCh>:
=======
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	609a      	str	r2, [r3, #8]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> develop
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_SetOffset>:
=======
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_SetOffset>:
>>>>>>> develop
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< HEAD
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3360      	adds	r3, #96	; 0x60
 800135e:	461a      	mov	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <LL_ADC_SetOffset+0x44>)
 800136e:	4013      	ands	r3, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	4313      	orrs	r3, r2
 800137c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	03fff000 	.word	0x03fff000

08001394 <LL_ADC_GetOffsetChannel>:
=======
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3360      	adds	r3, #96	; 0x60
 80013be:	461a      	mov	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LL_ADC_SetOffset+0x44>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	03fff000 	.word	0x03fff000

080013f4 <LL_ADC_GetOffsetChannel>:
>>>>>>> develop
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< HEAD
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3360      	adds	r3, #96	; 0x60
 80013a2:	461a      	mov	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_SetOffsetState>:
=======
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3360      	adds	r3, #96	; 0x60
 8001402:	461a      	mov	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_SetOffsetState>:
>>>>>>> develop
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< HEAD
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3360      	adds	r3, #96	; 0x60
 80013d0:	461a      	mov	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
=======
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3360      	adds	r3, #96	; 0x60
 8001430:	461a      	mov	r2, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_REG_IsTriggerSourceSWStart>:
>>>>>>> develop
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_REG_SetSequencerRanks>:
=======
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> develop
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< HEAD
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
=======
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
>>>>>>> develop
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
<<<<<<< HEAD
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3330      	adds	r3, #48	; 0x30
 800142c:	461a      	mov	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	4413      	add	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	211f      	movs	r1, #31
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	401a      	ands	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	0e9b      	lsrs	r3, r3, #26
 8001454:	f003 011f 	and.w	r1, r3, #31
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	431a      	orrs	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	601a      	str	r2, [r3, #0]
=======
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3330      	adds	r3, #48	; 0x30
 800148c:	461a      	mov	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	4413      	add	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	211f      	movs	r1, #31
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	401a      	ands	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	0e9b      	lsrs	r3, r3, #26
 80014b4:	f003 011f 	and.w	r1, r3, #31
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	431a      	orrs	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	601a      	str	r2, [r3, #0]
>>>>>>> develop
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
<<<<<<< HEAD
 8001468:	bf00      	nop
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_INJ_IsTriggerSourceSWStart>:
=======
 80014c8:	bf00      	nop
 80014ca:	371c      	adds	r7, #28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
>>>>>>> develop
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001480:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001488:	2301      	movs	r3, #1
 800148a:	e000      	b.n	800148e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <LL_ADC_SetChannelSamplingTime>:
=======
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_ADC_SetChannelSamplingTime>:
>>>>>>> develop
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
<<<<<<< HEAD
 800149a:	b480      	push	{r7}
 800149c:	b087      	sub	sp, #28
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
=======
 80014fa:	b480      	push	{r7}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
>>>>>>> develop
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
<<<<<<< HEAD
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3314      	adds	r3, #20
 80014aa:	461a      	mov	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	0e5b      	lsrs	r3, r3, #25
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	0d1b      	lsrs	r3, r3, #20
 80014c2:	f003 031f 	and.w	r3, r3, #31
 80014c6:	2107      	movs	r1, #7
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	0d1b      	lsrs	r3, r3, #20
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	431a      	orrs	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014e4:	bf00      	nop
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_SetChannelSingleDiff>:
=======
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3314      	adds	r3, #20
 800150a:	461a      	mov	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	0e5b      	lsrs	r3, r3, #25
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	0d1b      	lsrs	r3, r3, #20
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	2107      	movs	r1, #7
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	0d1b      	lsrs	r3, r3, #20
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	431a      	orrs	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001544:	bf00      	nop
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_SetChannelSingleDiff>:
>>>>>>> develop
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
<<<<<<< HEAD
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
=======
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
>>>>>>> develop
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
<<<<<<< HEAD
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0318 	and.w	r3, r3, #24
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001514:	40d9      	lsrs	r1, r3
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	400b      	ands	r3, r1
 800151a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800151e:	431a      	orrs	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
=======
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001568:	43db      	mvns	r3, r3
 800156a:	401a      	ands	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0318 	and.w	r3, r3, #24
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001574:	40d9      	lsrs	r1, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	400b      	ands	r3, r1
 800157a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800157e:	431a      	orrs	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
>>>>>>> develop
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
<<<<<<< HEAD
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	0007ffff 	.word	0x0007ffff

08001538 <LL_ADC_DisableDeepPowerDown>:
=======
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	0007ffff 	.word	0x0007ffff

08001598 <LL_ADC_DisableDeepPowerDown>:
>>>>>>> develop
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
=======
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
<<<<<<< HEAD
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6093      	str	r3, [r2, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_IsDeepPowerDownEnabled>:
=======
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6093      	str	r3, [r2, #8]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_IsDeepPowerDownEnabled>:
>>>>>>> develop
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800156c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001570:	d101      	bne.n	8001576 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_EnableInternalRegulator>:
=======
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015d0:	d101      	bne.n	80015d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_EnableInternalRegulator>:
>>>>>>> develop
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
=======
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001598:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_IsInternalRegulatorEnabled>:
=======
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_IsInternalRegulatorEnabled>:
>>>>>>> develop
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015c0:	d101      	bne.n	80015c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_Enable>:
=======
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001620:	d101      	bne.n	8001626 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <LL_ADC_Enable>:
>>>>>>> develop
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
=======
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <LL_ADC_IsEnabled>:
=======
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_IsEnabled>:
>>>>>>> develop
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <LL_ADC_IsEnabled+0x18>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <LL_ADC_IsEnabled+0x1a>
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_REG_StartConversion>:
=======
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <LL_ADC_IsEnabled+0x18>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <LL_ADC_IsEnabled+0x1a>
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_ADC_REG_StartConversion>:
>>>>>>> develop
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
=======
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001632:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001636:	f043 0204 	orr.w	r2, r3, #4
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_ADC_REG_IsConversionOngoing>:
=======
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001692:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001696:	f043 0204 	orr.w	r2, r3, #4
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_ADC_REG_IsConversionOngoing>:
>>>>>>> develop
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b04      	cmp	r3, #4
 800165c:	d101      	bne.n	8001662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_INJ_IsConversionOngoing>:
=======
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d101      	bne.n	80016c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <LL_ADC_INJ_IsConversionOngoing>:
>>>>>>> develop
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b08      	cmp	r3, #8
 8001682:	d101      	bne.n	8001688 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_ADC_Init>:
=======
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d101      	bne.n	80016e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_ADC_Init>:
>>>>>>> develop
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
=======
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	77fb      	strb	r3, [r7, #31]
>>>>>>> develop
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
<<<<<<< HEAD
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e126      	b.n	8001900 <HAL_ADC_Init+0x268>
=======
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e126      	b.n	8001960 <HAL_ADC_Init+0x268>
>>>>>>> develop
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	2b00      	cmp	r3, #0
=======
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b00      	cmp	r3, #0
>>>>>>> develop
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_ADC_Init+0x3c>
=======
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <HAL_ADC_Init+0x3c>
>>>>>>> develop

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fbc3 	bl	8000e4c <HAL_ADC_MspInit>
=======
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fbc3 	bl	8000eac <HAL_ADC_MspInit>
>>>>>>> develop
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> develop
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff3f 	bl	800155c <LL_ADC_IsDeepPowerDownEnabled>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff25 	bl	8001538 <LL_ADC_DisableDeepPowerDown>
=======
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff3f 	bl	80015bc <LL_ADC_IsDeepPowerDownEnabled>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff25 	bl	8001598 <LL_ADC_DisableDeepPowerDown>
>>>>>>> develop
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff5a 	bl	80015ac <LL_ADC_IsInternalRegulatorEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff3e 	bl	8001584 <LL_ADC_EnableInternalRegulator>
=======
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ff5a 	bl	800160c <LL_ADC_IsInternalRegulatorEnabled>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d115      	bne.n	800178a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff3e 	bl	80015e4 <LL_ADC_EnableInternalRegulator>
>>>>>>> develop

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8001708:	4b7f      	ldr	r3, [pc, #508]	; (8001908 <HAL_ADC_Init+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	4a7f      	ldr	r2, [pc, #508]	; (800190c <HAL_ADC_Init+0x274>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	3301      	adds	r3, #1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800171c:	e002      	b.n	8001724 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3b01      	subs	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADC_Init+0x86>
=======
 8001768:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <HAL_ADC_Init+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	4a7f      	ldr	r2, [pc, #508]	; (800196c <HAL_ADC_Init+0x274>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	099b      	lsrs	r3, r3, #6
 8001776:	3301      	adds	r3, #1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800177c:	e002      	b.n	8001784 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3b01      	subs	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f9      	bne.n	800177e <HAL_ADC_Init+0x86>
>>>>>>> develop
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff3c 	bl	80015ac <LL_ADC_IsInternalRegulatorEnabled>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]
=======
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff3c 	bl	800160c <LL_ADC_IsInternalRegulatorEnabled>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10d      	bne.n	80017b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	77fb      	strb	r3, [r7, #31]
>>>>>>> develop

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff75 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80bf 	bne.w	80018ee <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 80bb 	bne.w	80018ee <HAL_ADC_Init+0x256>
=======
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff75 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 80017c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80bf 	bne.w	800194e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 80bb 	bne.w	800194e <HAL_ADC_Init+0x256>
>>>>>>> develop
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001780:	f043 0202 	orr.w	r2, r3, #2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017e0:	f043 0202 	orr.w	r2, r3, #2
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff35 	bl	80015fc <LL_ADC_IsEnabled>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001798:	485d      	ldr	r0, [pc, #372]	; (8001910 <HAL_ADC_Init+0x278>)
 800179a:	f7ff ff2f 	bl	80015fc <LL_ADC_IsEnabled>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d105      	bne.n	80017b0 <HAL_ADC_Init+0x118>
=======
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff35 	bl	800165c <LL_ADC_IsEnabled>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017f8:	485d      	ldr	r0, [pc, #372]	; (8001970 <HAL_ADC_Init+0x278>)
 80017fa:	f7ff ff2f 	bl	800165c <LL_ADC_IsEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_ADC_Init+0x118>
>>>>>>> develop
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4619      	mov	r1, r3
 80017aa:	485a      	ldr	r0, [pc, #360]	; (8001914 <HAL_ADC_Init+0x27c>)
 80017ac:	f7ff fd9a 	bl	80012e4 <LL_ADC_SetCommonClock>
=======
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4619      	mov	r1, r3
 800180a:	485a      	ldr	r0, [pc, #360]	; (8001974 <HAL_ADC_Init+0x27c>)
 800180c:	f7ff fd9a 	bl	8001344 <LL_ADC_SetCommonClock>
>>>>>>> develop
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7e5b      	ldrb	r3, [r3, #25]
 80017b4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017c0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017c6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d106      	bne.n	80017ec <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	3b01      	subs	r3, #1
 80017e4:	045b      	lsls	r3, r3, #17
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
=======
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7e5b      	ldrb	r3, [r3, #25]
 8001814:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800181a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001820:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001826:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d106      	bne.n	800184c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	3b01      	subs	r3, #1
 8001844:	045b      	lsls	r3, r3, #17
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
>>>>>>> develop
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
=======
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
>>>>>>> develop
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
<<<<<<< HEAD
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	4b42      	ldr	r3, [pc, #264]	; (8001918 <HAL_ADC_Init+0x280>)
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	430b      	orrs	r3, r1
 800181a:	60d3      	str	r3, [r2, #12]
=======
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <HAL_ADC_Init+0x280>)
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	69b9      	ldr	r1, [r7, #24]
 8001878:	430b      	orrs	r3, r1
 800187a:	60d3      	str	r3, [r2, #12]
>>>>>>> develop
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff25 	bl	8001670 <LL_ADC_INJ_IsConversionOngoing>
 8001826:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d13d      	bne.n	80018aa <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d13a      	bne.n	80018aa <HAL_ADC_Init+0x212>
=======
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff25 	bl	80016d0 <LL_ADC_INJ_IsConversionOngoing>
 8001886:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d13d      	bne.n	800190a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d13a      	bne.n	800190a <HAL_ADC_Init+0x212>
>>>>>>> develop
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< HEAD
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001838:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001840:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001850:	f023 0302 	bic.w	r3, r3, #2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	69b9      	ldr	r1, [r7, #24]
 800185a:	430b      	orrs	r3, r1
 800185c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001864:	2b01      	cmp	r3, #1
 8001866:	d118      	bne.n	800189a <HAL_ADC_Init+0x202>
=======
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001898:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018b0:	f023 0302 	bic.w	r3, r3, #2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	69b9      	ldr	r1, [r7, #24]
 80018ba:	430b      	orrs	r3, r1
 80018bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d118      	bne.n	80018fa <HAL_ADC_Init+0x202>
>>>>>>> develop
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< HEAD
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001872:	f023 0304 	bic.w	r3, r3, #4
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001884:	4311      	orrs	r1, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800188a:	430a      	orrs	r2, r1
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	e007      	b.n	80018aa <HAL_ADC_Init+0x212>
=======
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018e4:	4311      	orrs	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018ea:	430a      	orrs	r2, r1
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	e007      	b.n	800190a <HAL_ADC_Init+0x212>
>>>>>>> develop
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0201 	bic.w	r2, r2, #1
 80018a8:	611a      	str	r2, [r3, #16]
=======
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0201 	bic.w	r2, r2, #1
 8001908:	611a      	str	r2, [r3, #16]
>>>>>>> develop
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d10c      	bne.n	80018cc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f023 010f 	bic.w	r1, r3, #15
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ca:	e007      	b.n	80018dc <HAL_ADC_Init+0x244>
=======
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d10c      	bne.n	800192c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	f023 010f 	bic.w	r1, r3, #15
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
 800192a:	e007      	b.n	800193c <HAL_ADC_Init+0x244>
>>>>>>> develop
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 020f 	bic.w	r2, r2, #15
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 020f 	bic.w	r2, r2, #15
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> develop
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f023 0303 	bic.w	r3, r3, #3
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
 80018ec:	e007      	b.n	80018fe <HAL_ADC_Init+0x266>
=======
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	f023 0303 	bic.w	r3, r3, #3
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x266>
>>>>>>> develop
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	f043 0210 	orr.w	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	77fb      	strb	r3, [r7, #31]
=======
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	77fb      	strb	r3, [r7, #31]
>>>>>>> develop
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000010 	.word	0x20000010
 800190c:	053e2d63 	.word	0x053e2d63
 8001910:	50040000 	.word	0x50040000
 8001914:	50040300 	.word	0x50040300
 8001918:	fff0c007 	.word	0xfff0c007

0800191c <HAL_ADC_Start_DMA>:
=======
 800195e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000010 	.word	0x20000010
 800196c:	053e2d63 	.word	0x053e2d63
 8001970:	50040000 	.word	0x50040000
 8001974:	50040300 	.word	0x50040300
 8001978:	fff0c007 	.word	0xfff0c007

0800197c <HAL_ADC_Start_DMA>:
>>>>>>> develop
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
<<<<<<< HEAD
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
=======
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
>>>>>>> develop

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe8c 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d167      	bne.n	8001a08 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Start_DMA+0x2a>
 8001942:	2302      	movs	r3, #2
 8001944:	e063      	b.n	8001a0e <HAL_ADC_Start_DMA+0xf2>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe8c 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d167      	bne.n	8001a68 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Start_DMA+0x2a>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e063      	b.n	8001a6e <HAL_ADC_Start_DMA+0xf2>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> develop
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
<<<<<<< HEAD
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fe1c 	bl	800258c <ADC_Enable>
 8001954:	4603      	mov	r3, r0
 8001956:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d14f      	bne.n	80019fe <HAL_ADC_Start_DMA+0xe2>
=======
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fe1c 	bl	80025ec <ADC_Enable>
 80019b4:	4603      	mov	r3, r0
 80019b6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d14f      	bne.n	8001a5e <HAL_ADC_Start_DMA+0xe2>
>>>>>>> develop
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
<<<<<<< HEAD
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f023 0206 	bic.w	r2, r3, #6
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	659a      	str	r2, [r3, #88]	; 0x58
 800198a:	e002      	b.n	8001992 <HAL_ADC_Start_DMA+0x76>
=======
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	f023 0206 	bic.w	r2, r3, #6
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	659a      	str	r2, [r3, #88]	; 0x58
 80019ea:	e002      	b.n	80019f2 <HAL_ADC_Start_DMA+0x76>
>>>>>>> develop
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	659a      	str	r2, [r3, #88]	; 0x58
=======
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> develop
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
<<<<<<< HEAD
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a20      	ldr	r2, [pc, #128]	; (8001a18 <HAL_ADC_Start_DMA+0xfc>)
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <HAL_ADC_Start_DMA+0x100>)
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a1e      	ldr	r2, [pc, #120]	; (8001a20 <HAL_ADC_Start_DMA+0x104>)
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
=======
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_ADC_Start_DMA+0xfc>)
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <HAL_ADC_Start_DMA+0x100>)
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <HAL_ADC_Start_DMA+0x104>)
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> develop
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
<<<<<<< HEAD
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	221c      	movs	r2, #28
 80019b0:	601a      	str	r2, [r3, #0]
=======
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	221c      	movs	r2, #28
 8001a10:	601a      	str	r2, [r3, #0]
>>>>>>> develop

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> develop

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0210 	orr.w	r2, r2, #16
 80019c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0201 	orr.w	r2, r2, #1
 80019d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3340      	adds	r3, #64	; 0x40
 80019e4:	4619      	mov	r1, r3
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f001 f8e5 	bl	8002bb8 <HAL_DMA_Start_IT>
 80019ee:	4603      	mov	r3, r0
 80019f0:	75fb      	strb	r3, [r7, #23]
=======
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0210 	orr.w	r2, r2, #16
 8001a28:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3340      	adds	r3, #64	; 0x40
 8001a44:	4619      	mov	r1, r3
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f001 f8e5 	bl	8002c18 <HAL_DMA_Start_IT>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]
>>>>>>> develop
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
<<<<<<< HEAD
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fe13 	bl	8001622 <LL_ADC_REG_StartConversion>
 80019fc:	e006      	b.n	8001a0c <HAL_ADC_Start_DMA+0xf0>
=======
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fe13 	bl	8001682 <LL_ADC_REG_StartConversion>
 8001a5c:	e006      	b.n	8001a6c <HAL_ADC_Start_DMA+0xf0>
>>>>>>> develop
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a06:	e001      	b.n	8001a0c <HAL_ADC_Start_DMA+0xf0>
=======
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a66:	e001      	b.n	8001a6c <HAL_ADC_Start_DMA+0xf0>
>>>>>>> develop
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
<<<<<<< HEAD
 8001a08:	2302      	movs	r3, #2
 8001a0a:	75fb      	strb	r3, [r7, #23]
=======
 8001a68:	2302      	movs	r3, #2
 8001a6a:	75fb      	strb	r3, [r7, #23]
>>>>>>> develop
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	08002699 	.word	0x08002699
 8001a1c:	08002771 	.word	0x08002771
 8001a20:	0800278d 	.word	0x0800278d

08001a24 <HAL_ADC_IRQHandler>:
=======
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	080026f9 	.word	0x080026f9
 8001a7c:	080027d1 	.word	0x080027d1
 8001a80:	080027ed 	.word	0x080027ed

08001a84 <HAL_ADC_IRQHandler>:
>>>>>>> develop
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	617b      	str	r3, [r7, #20]
=======
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	617b      	str	r3, [r7, #20]
>>>>>>> develop
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
<<<<<<< HEAD
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d017      	beq.n	8001a7a <HAL_ADC_IRQHandler+0x56>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d012      	beq.n	8001a7a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d017      	beq.n	8001ada <HAL_ADC_IRQHandler+0x56>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d012      	beq.n	8001ada <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
<<<<<<< HEAD
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fecf 	bl	8002810 <HAL_ADCEx_EndOfSamplingCallback>
=======
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fecf 	bl	8002870 <HAL_ADCEx_EndOfSamplingCallback>
>>>>>>> develop
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
<<<<<<< HEAD
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2202      	movs	r2, #2
 8001a78:	601a      	str	r2, [r3, #0]
=======
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
>>>>>>> develop
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
<<<<<<< HEAD
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x6a>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d05e      	beq.n	8001b56 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d059      	beq.n	8001b56 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_ADC_IRQHandler+0x6a>
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d05e      	beq.n	8001bb6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d059      	beq.n	8001bb6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc99 	bl	80013f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d03e      	beq.n	8001b48 <HAL_ADC_IRQHandler+0x124>
=======
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fc99 	bl	8001456 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d03e      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x124>
>>>>>>> develop
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
<<<<<<< HEAD
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	613b      	str	r3, [r7, #16]
=======
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	613b      	str	r3, [r7, #16]
>>>>>>> develop
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
<<<<<<< HEAD
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d135      	bne.n	8001b48 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d12e      	bne.n	8001b48 <HAL_ADC_IRQHandler+0x124>
=======
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d135      	bne.n	8001ba8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d12e      	bne.n	8001ba8 <HAL_ADC_IRQHandler+0x124>
>>>>>>> develop
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fdab 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d11a      	bne.n	8001b30 <HAL_ADC_IRQHandler+0x10c>
=======
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fdab 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11a      	bne.n	8001b90 <HAL_ADC_IRQHandler+0x10c>
>>>>>>> develop
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
<<<<<<< HEAD
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 020c 	bic.w	r2, r2, #12
 8001b08:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d112      	bne.n	8001b48 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
 8001b2e:	e00b      	b.n	8001b48 <HAL_ADC_IRQHandler+0x124>
=======
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 020c 	bic.w	r2, r2, #12
 8001b68:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d112      	bne.n	8001ba8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
 8001b8e:	e00b      	b.n	8001ba8 <HAL_ADC_IRQHandler+0x124>
>>>>>>> develop
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f043 0210 	orr.w	r2, r3, #16
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f043 0210 	orr.w	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> develop
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff f921 	bl	8000d90 <HAL_ADC_ConvCpltCallback>
=======
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff f923 	bl	8000df4 <HAL_ADC_ConvCpltCallback>
>>>>>>> develop
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
<<<<<<< HEAD
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	220c      	movs	r2, #12
 8001b54:	601a      	str	r2, [r3, #0]
=======
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
>>>>>>> develop
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
<<<<<<< HEAD
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_ADC_IRQHandler+0x146>
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d072      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06d      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_ADC_IRQHandler+0x146>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d072      	beq.n	8001cba <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d06d      	beq.n	8001cba <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
<<<<<<< HEAD
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fc6a 	bl	8001474 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ba0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fc25 	bl	80013f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bac:	60b8      	str	r0, [r7, #8]
=======
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fc6a 	bl	80014d4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c00:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fc25 	bl	8001456 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c0c:	60b8      	str	r0, [r7, #8]
>>>>>>> develop
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
<<<<<<< HEAD
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	613b      	str	r3, [r7, #16]
=======
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	613b      	str	r3, [r7, #16]
>>>>>>> develop
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
<<<<<<< HEAD
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d047      	beq.n	8001c4c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_ADC_IRQHandler+0x1b2>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03f      	beq.n	8001c4c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d13a      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be0:	2b40      	cmp	r3, #64	; 0x40
 8001be2:	d133      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x228>
=======
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d047      	beq.n	8001cac <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_ADC_IRQHandler+0x1b2>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03f      	beq.n	8001cac <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d13a      	bne.n	8001cac <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b40      	cmp	r3, #64	; 0x40
 8001c42:	d133      	bne.n	8001cac <HAL_ADC_IRQHandler+0x228>
>>>>>>> develop
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
<<<<<<< HEAD
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d12e      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x228>
=======
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d12e      	bne.n	8001cac <HAL_ADC_IRQHandler+0x228>
>>>>>>> develop
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fd3c 	bl	8001670 <LL_ADC_INJ_IsConversionOngoing>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d11a      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c0c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d112      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
 8001c32:	e00b      	b.n	8001c4c <HAL_ADC_IRQHandler+0x228>
=======
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fd3c 	bl	80016d0 <LL_ADC_INJ_IsConversionOngoing>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11a      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c6c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d112      	bne.n	8001cac <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
 8001c92:	e00b      	b.n	8001cac <HAL_ADC_IRQHandler+0x228>
>>>>>>> develop
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0210 	orr.w	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> develop
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< HEAD
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fdb7 	bl	80027c0 <HAL_ADCEx_InjectedConvCpltCallback>
=======
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fdb7 	bl	8002820 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> develop
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
<<<<<<< HEAD
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2260      	movs	r2, #96	; 0x60
 8001c58:	601a      	str	r2, [r3, #0]
=======
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2260      	movs	r2, #96	; 0x60
 8001cb8:	601a      	str	r2, [r3, #0]
>>>>>>> develop
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
<<<<<<< HEAD
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d011      	beq.n	8001c88 <HAL_ADC_IRQHandler+0x264>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d011      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x264>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
<<<<<<< HEAD
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f890 	bl	8001da0 <HAL_ADC_LevelOutOfWindowCallback>
=======
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f890 	bl	8001e00 <HAL_ADC_LevelOutOfWindowCallback>
>>>>>>> develop
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
<<<<<<< HEAD
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	601a      	str	r2, [r3, #0]
=======
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	601a      	str	r2, [r3, #0]
>>>>>>> develop
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
<<<<<<< HEAD
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x294>
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d012      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x294>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00d      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
<<<<<<< HEAD
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fd9d 	bl	80027e8 <HAL_ADCEx_LevelOutOfWindow2Callback>
=======
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fd9d 	bl	8002848 <HAL_ADCEx_LevelOutOfWindow2Callback>
>>>>>>> develop
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
<<<<<<< HEAD
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb6:	601a      	str	r2, [r3, #0]
=======
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d16:	601a      	str	r2, [r3, #0]
>>>>>>> develop
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
<<<<<<< HEAD
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d012      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x2c4>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d012      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x2c4>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00d      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
<<<<<<< HEAD
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fd8f 	bl	80027fc <HAL_ADCEx_LevelOutOfWindow3Callback>
=======
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fd8f 	bl	800285c <HAL_ADCEx_LevelOutOfWindow3Callback>
>>>>>>> develop
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
<<<<<<< HEAD
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce6:	601a      	str	r2, [r3, #0]
=======
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d46:	601a      	str	r2, [r3, #0]
>>>>>>> develop
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
<<<<<<< HEAD
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d02a      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x324>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d025      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x324>
=======
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02a      	beq.n	8001da8 <HAL_ADC_IRQHandler+0x324>
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d025      	beq.n	8001da8 <HAL_ADC_IRQHandler+0x324>
>>>>>>> develop
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
<<<<<<< HEAD
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001d04:	2301      	movs	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	e008      	b.n	8001d1c <HAL_ADC_IRQHandler+0x2f8>
=======
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	e008      	b.n	8001d7c <HAL_ADC_IRQHandler+0x2f8>
>>>>>>> develop
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
<<<<<<< HEAD
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
=======
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
>>>>>>> develop
        }
      }
    }

    if (overrun_error == 1UL)
<<<<<<< HEAD
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10e      	bne.n	8001d40 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58
=======
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d10e      	bne.n	8001da0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> develop
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f83a 	bl	8001db4 <HAL_ADC_ErrorCallback>
=======
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f83a 	bl	8001e14 <HAL_ADC_ErrorCallback>
>>>>>>> develop
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< HEAD
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	601a      	str	r2, [r3, #0]
=======
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2210      	movs	r2, #16
 8001da6:	601a      	str	r2, [r3, #0]
>>>>>>> develop
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
<<<<<<< HEAD
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d018      	beq.n	8001d84 <HAL_ADC_IRQHandler+0x360>
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	f043 0208 	orr.w	r2, r3, #8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7c:	601a      	str	r2, [r3, #0]
=======
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d018      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x360>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f043 0208 	orr.w	r2, r3, #8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ddc:	601a      	str	r2, [r3, #0]
>>>>>>> develop

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
<<<<<<< HEAD
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fd28 	bl	80027d4 <HAL_ADCEx_InjectedQueueOverflowCallback>
=======
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fd28 	bl	8002834 <HAL_ADCEx_InjectedQueueOverflowCallback>
>>>>>>> develop
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
<<<<<<< HEAD
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_ADC_ConvHalfCpltCallback>:
=======
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> develop
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
=======
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_ADC_LevelOutOfWindowCallback>:
=======
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> develop
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
=======
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_ErrorCallback>:
=======
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_ErrorCallback>:
>>>>>>> develop
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
=======
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_ADC_ConfigChannel>:
=======
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ADC_ConfigChannel>:
>>>>>>> develop
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
<<<<<<< HEAD
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0b6      	sub	sp, #216	; 0xd8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
=======
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0b6      	sub	sp, #216	; 0xd8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
>>>>>>> develop
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x22>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e3bb      	b.n	8002562 <HAL_ADC_ConfigChannel+0x79a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x22>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e3bb      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x79a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> develop
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fc27 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 83a0 	bne.w	8002544 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
=======
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fc27 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 83a0 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
>>>>>>> develop
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
<<<<<<< HEAD
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d824      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	3b02      	subs	r3, #2
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d81b      	bhi.n	8001e56 <HAL_ADC_ConfigChannel+0x8e>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <HAL_ADC_ConfigChannel+0x5c>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e35 	.word	0x08001e35
 8001e28:	08001e3d 	.word	0x08001e3d
 8001e2c:	08001e45 	.word	0x08001e45
 8001e30:	08001e4d 	.word	0x08001e4d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e34:	230c      	movs	r3, #12
 8001e36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e3a:	e010      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e3c:	2312      	movs	r3, #18
 8001e3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e42:	e00c      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e44:	2318      	movs	r3, #24
 8001e46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e4a:	e008      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e54:	e003      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e56:	2306      	movs	r3, #6
 8001e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e5c:	bf00      	nop
=======
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d824      	bhi.n	8001ebe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	3b02      	subs	r3, #2
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d81b      	bhi.n	8001eb6 <HAL_ADC_ConfigChannel+0x8e>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <HAL_ADC_ConfigChannel+0x5c>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001e95 	.word	0x08001e95
 8001e88:	08001e9d 	.word	0x08001e9d
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001ead 	.word	0x08001ead
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e94:	230c      	movs	r3, #12
 8001e96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e9a:	e010      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e9c:	2312      	movs	r3, #18
 8001e9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ea2:	e00c      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ea4:	2318      	movs	r3, #24
 8001ea6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eaa:	e008      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eb4:	e003      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ebc:	bf00      	nop
>>>>>>> develop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
<<<<<<< HEAD
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001e6c:	f7ff fad6 	bl	800141c <LL_ADC_REG_SetSequencerRanks>
=======
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001ecc:	f7ff fad6 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
>>>>>>> develop
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fbe8 	bl	800164a <LL_ADC_REG_IsConversionOngoing>
 8001e7a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fbf4 	bl	8001670 <LL_ADC_INJ_IsConversionOngoing>
 8001e88:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 81a4 	bne.w	80021de <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 819f 	bne.w	80021de <HAL_ADC_ConfigChannel+0x416>
=======
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fbe8 	bl	80016aa <LL_ADC_REG_IsConversionOngoing>
 8001eda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fbf4 	bl	80016d0 <LL_ADC_INJ_IsConversionOngoing>
 8001ee8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 81a4 	bne.w	800223e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 819f 	bne.w	800223e <HAL_ADC_ConfigChannel+0x416>
>>>>>>> develop
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
<<<<<<< HEAD
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6819      	ldr	r1, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	461a      	mov	r2, r3
 8001eae:	f7ff faf4 	bl	800149a <LL_ADC_SetChannelSamplingTime>
=======
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6819      	ldr	r1, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f7ff faf4 	bl	80014fa <LL_ADC_SetChannelSamplingTime>
>>>>>>> develop

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
<<<<<<< HEAD
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d00a      	beq.n	8001eea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6919      	ldr	r1, [r3, #16]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ee4:	f7ff fa32 	bl	800134c <LL_ADC_SetOffset>
 8001ee8:	e179      	b.n	80021de <HAL_ADC_ConfigChannel+0x416>
=======
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d00a      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6919      	ldr	r1, [r3, #16]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f44:	f7ff fa32 	bl	80013ac <LL_ADC_SetOffset>
 8001f48:	e179      	b.n	800223e <HAL_ADC_ConfigChannel+0x416>
>>>>>>> develop
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
<<<<<<< HEAD
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fa4f 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x14e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fa44 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	e01e      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x18c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fa39 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
=======
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fa4f 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10a      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x14e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa44 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	e01e      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x18c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fa39 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
>>>>>>> develop
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 8001f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
=======
 8001f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
>>>>>>> develop
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< HEAD
 8001f34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 8001f94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> develop
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< HEAD
 8001f3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e004      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1a4>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	e018      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1d6>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001f80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001f88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001f90:	2320      	movs	r3, #32
 8001f92:	e004      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d106      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fa08 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f9ec 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10a      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x214>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2101      	movs	r1, #1
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f9e1 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	0e9b      	lsrs	r3, r3, #26
 8001fd6:	f003 021f 	and.w	r2, r3, #31
 8001fda:	e01e      	b.n	800201a <HAL_ADC_ConfigChannel+0x252>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f9d6 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e004      	b.n	8002018 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800200e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x26a>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	e018      	b.n	8002064 <HAL_ADC_ConfigChannel+0x29c>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002046:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800204a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800204e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e004      	b.n	8002064 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800205a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002064:	429a      	cmp	r2, r3
 8002066:	d106      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	2101      	movs	r1, #1
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f9a5 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2102      	movs	r1, #2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f989 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x2da>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2102      	movs	r1, #2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f97e 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	0e9b      	lsrs	r3, r3, #26
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	e01e      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x318>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2102      	movs	r1, #2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f973 	bl	8001394 <LL_ADC_GetOffsetChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80020c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80020c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e004      	b.n	80020de <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80020d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x330>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	e014      	b.n	8002122 <HAL_ADC_ConfigChannel+0x35a>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800210c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002114:	2320      	movs	r3, #32
 8002116:	e004      	b.n	8002122 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002122:	429a      	cmp	r2, r3
 8002124:	d106      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f946 	bl	80013c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2103      	movs	r1, #3
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff f92a 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x398>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2103      	movs	r1, #3
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff f91f 	bl	8001394 <LL_ADC_GetOffsetChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	f003 021f 	and.w	r2, r3, #31
 800215e:	e017      	b.n	8002190 <HAL_ADC_ConfigChannel+0x3c8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2103      	movs	r1, #3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f914 	bl	8001394 <LL_ADC_GetOffsetChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800217c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e003      	b.n	800218e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x3e0>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	e011      	b.n	80021cc <HAL_ADC_ConfigChannel+0x404>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80021b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80021ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021c0:	2320      	movs	r3, #32
 80021c2:	e003      	b.n	80021cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2103      	movs	r1, #3
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f8f1 	bl	80013c0 <LL_ADC_SetOffsetState>
=======
 8001f9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e004      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001fa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1a4>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	e018      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x1d6>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001fe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e004      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001ff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fa08 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f9ec 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_ADC_ConfigChannel+0x214>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff f9e1 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 021f 	and.w	r2, r3, #31
 800203a:	e01e      	b.n	800207a <HAL_ADC_ConfigChannel+0x252>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f9d6 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800205a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800205e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002062:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e004      	b.n	8002078 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800206e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x26a>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	0e9b      	lsrs	r3, r3, #26
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	e018      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x29c>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80020a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80020ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80020b6:	2320      	movs	r3, #32
 80020b8:	e004      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80020ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2101      	movs	r1, #1
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f9a5 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2102      	movs	r1, #2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f989 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x2da>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f97e 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	e01e      	b.n	8002140 <HAL_ADC_ConfigChannel+0x318>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2102      	movs	r1, #2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff f973 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002128:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e004      	b.n	800213e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x330>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	e014      	b.n	8002182 <HAL_ADC_ConfigChannel+0x35a>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800216c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e004      	b.n	8002182 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002182:	429a      	cmp	r2, r3
 8002184:	d106      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2200      	movs	r2, #0
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f946 	bl	8001420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2103      	movs	r1, #3
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f92a 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x398>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2103      	movs	r1, #3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff f91f 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	0e9b      	lsrs	r3, r3, #26
 80021ba:	f003 021f 	and.w	r2, r3, #31
 80021be:	e017      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x3c8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2103      	movs	r1, #3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f914 	bl	80013f4 <LL_ADC_GetOffsetChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021da:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80021dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e003      	b.n	80021ee <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80021e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x3e0>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	e011      	b.n	800222c <HAL_ADC_ConfigChannel+0x404>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002218:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800221a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800222c:	429a      	cmp	r2, r3
 800222e:	d106      	bne.n	800223e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2200      	movs	r2, #0
 8002236:	2103      	movs	r1, #3
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f8f1 	bl	8001420 <LL_ADC_SetOffsetState>
>>>>>>> develop
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fa0a 	bl	80015fc <LL_ADC_IsEnabled>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8140 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	461a      	mov	r2, r3
 80021fe:	f7ff f977 	bl	80014f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4a8f      	ldr	r2, [pc, #572]	; (8002444 <HAL_ADC_ConfigChannel+0x67c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	f040 8131 	bne.w	8002470 <HAL_ADC_ConfigChannel+0x6a8>
=======
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fa0a 	bl	800165c <LL_ADC_IsEnabled>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 8140 	bne.w	80024d0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	461a      	mov	r2, r3
 800225e:	f7ff f977 	bl	8001550 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4a8f      	ldr	r2, [pc, #572]	; (80024a4 <HAL_ADC_ConfigChannel+0x67c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	f040 8131 	bne.w	80024d0 <HAL_ADC_ConfigChannel+0x6a8>
>>>>>>> develop
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10b      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x46e>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	0e9b      	lsrs	r3, r3, #26
 8002224:	3301      	adds	r3, #1
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2b09      	cmp	r3, #9
 800222c:	bf94      	ite	ls
 800222e:	2301      	movls	r3, #1
 8002230:	2300      	movhi	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	e019      	b.n	800226a <HAL_ADC_ConfigChannel+0x4a2>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002246:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800224e:	2320      	movs	r3, #32
 8002250:	e003      	b.n	800225a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2b09      	cmp	r3, #9
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226a:	2b00      	cmp	r3, #0
 800226c:	d079      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d107      	bne.n	800228a <HAL_ADC_ConfigChannel+0x4c2>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	3301      	adds	r3, #1
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002288:	e015      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x4ee>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800229c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80022a2:	2320      	movs	r3, #32
 80022a4:	e003      	b.n	80022ae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80022a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	069b      	lsls	r3, r3, #26
 80022b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x50e>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	e017      	b.n	8002306 <HAL_ADC_ConfigChannel+0x53e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e003      	b.n	80022fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80022f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	ea42 0103 	orr.w	r1, r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_ADC_ConfigChannel+0x564>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	3301      	adds	r3, #1
 800231e:	f003 021f 	and.w	r2, r3, #31
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	051b      	lsls	r3, r3, #20
 800232a:	e018      	b.n	800235e <HAL_ADC_ConfigChannel+0x596>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e003      	b.n	8002350 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235e:	430b      	orrs	r3, r1
 8002360:	e081      	b.n	8002466 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_ADC_ConfigChannel+0x5b6>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0e9b      	lsrs	r3, r3, #26
 8002374:	3301      	adds	r3, #1
 8002376:	069b      	lsls	r3, r3, #26
 8002378:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800237c:	e015      	b.n	80023aa <HAL_ADC_ConfigChannel+0x5e2>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e003      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	069b      	lsls	r3, r3, #26
 80023a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x602>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	e017      	b.n	80023fa <HAL_ADC_ConfigChannel+0x632>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	61bb      	str	r3, [r7, #24]
  return result;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80023e2:	2320      	movs	r3, #32
 80023e4:	e003      	b.n	80023ee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	ea42 0103 	orr.w	r1, r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x65e>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	3301      	adds	r3, #1
 8002412:	f003 021f 	and.w	r2, r3, #31
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	3b1e      	subs	r3, #30
 800241e:	051b      	lsls	r3, r3, #20
 8002420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002424:	e01e      	b.n	8002464 <HAL_ADC_ConfigChannel+0x69c>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	60fb      	str	r3, [r7, #12]
  return result;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e006      	b.n	8002450 <HAL_ADC_ConfigChannel+0x688>
 8002442:	bf00      	nop
 8002444:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f003 021f 	and.w	r2, r3, #31
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	3b1e      	subs	r3, #30
 800245e:	051b      	lsls	r3, r3, #20
 8002460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002464:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800246a:	4619      	mov	r1, r3
 800246c:	f7ff f815 	bl	800149a <LL_ADC_SetChannelSamplingTime>
=======
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10b      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x46e>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	3301      	adds	r3, #1
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2b09      	cmp	r3, #9
 800228c:	bf94      	ite	ls
 800228e:	2301      	movls	r3, #1
 8002290:	2300      	movhi	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e019      	b.n	80022ca <HAL_ADC_ConfigChannel+0x4a2>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e003      	b.n	80022ba <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80022b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	bf94      	ite	ls
 80022c4:	2301      	movls	r3, #1
 80022c6:	2300      	movhi	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d079      	beq.n	80023c2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x4c2>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0e9b      	lsrs	r3, r3, #26
 80022e0:	3301      	adds	r3, #1
 80022e2:	069b      	lsls	r3, r3, #26
 80022e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e8:	e015      	b.n	8002316 <HAL_ADC_ConfigChannel+0x4ee>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e003      	b.n	800230e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	069b      	lsls	r3, r3, #26
 8002312:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x50e>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	3301      	adds	r3, #1
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	e017      	b.n	8002366 <HAL_ADC_ConfigChannel+0x53e>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002346:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e003      	b.n	800235a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	ea42 0103 	orr.w	r1, r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <HAL_ADC_ConfigChannel+0x564>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	3301      	adds	r3, #1
 800237e:	f003 021f 	and.w	r2, r3, #31
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	051b      	lsls	r3, r3, #20
 800238a:	e018      	b.n	80023be <HAL_ADC_ConfigChannel+0x596>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80023a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 021f 	and.w	r2, r3, #31
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023be:	430b      	orrs	r3, r1
 80023c0:	e081      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d107      	bne.n	80023de <HAL_ADC_ConfigChannel+0x5b6>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	3301      	adds	r3, #1
 80023d6:	069b      	lsls	r3, r3, #26
 80023d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023dc:	e015      	b.n	800240a <HAL_ADC_ConfigChannel+0x5e2>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80023f6:	2320      	movs	r3, #32
 80023f8:	e003      	b.n	8002402 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3301      	adds	r3, #1
 8002404:	069b      	lsls	r3, r3, #26
 8002406:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_ADC_ConfigChannel+0x602>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0e9b      	lsrs	r3, r3, #26
 800241c:	3301      	adds	r3, #1
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2101      	movs	r1, #1
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	e017      	b.n	800245a <HAL_ADC_ConfigChannel+0x632>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	61bb      	str	r3, [r7, #24]
  return result;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002442:	2320      	movs	r3, #32
 8002444:	e003      	b.n	800244e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	ea42 0103 	orr.w	r1, r2, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10d      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x65e>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	3301      	adds	r3, #1
 8002472:	f003 021f 	and.w	r2, r3, #31
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	3b1e      	subs	r3, #30
 800247e:	051b      	lsls	r3, r3, #20
 8002480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002484:	e01e      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x69c>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	60fb      	str	r3, [r7, #12]
  return result;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d104      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800249e:	2320      	movs	r3, #32
 80024a0:	e006      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x688>
 80024a2:	bf00      	nop
 80024a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	f003 021f 	and.w	r2, r3, #31
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	3b1e      	subs	r3, #30
 80024be:	051b      	lsls	r3, r3, #20
 80024c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7ff f815 	bl	80014fa <LL_ADC_SetChannelSamplingTime>
>>>>>>> develop
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
<<<<<<< HEAD
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_ADC_ConfigChannel+0x7a4>)
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d06c      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247c:	483c      	ldr	r0, [pc, #240]	; (8002570 <HAL_ADC_ConfigChannel+0x7a8>)
 800247e:	f7fe ff57 	bl	8001330 <LL_ADC_GetCommonPathInternalCh>
 8002482:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
=======
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_ADC_ConfigChannel+0x7a4>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d06c      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024dc:	483c      	ldr	r0, [pc, #240]	; (80025d0 <HAL_ADC_ConfigChannel+0x7a8>)
 80024de:	f7fe ff57 	bl	8001390 <LL_ADC_GetCommonPathInternalCh>
 80024e2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
>>>>>>> develop

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
<<<<<<< HEAD
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a3a      	ldr	r2, [pc, #232]	; (8002574 <HAL_ADC_ConfigChannel+0x7ac>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d127      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d121      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a35      	ldr	r2, [pc, #212]	; (8002578 <HAL_ADC_ConfigChannel+0x7b0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d157      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024ae:	4619      	mov	r1, r3
 80024b0:	482f      	ldr	r0, [pc, #188]	; (8002570 <HAL_ADC_ConfigChannel+0x7a8>)
 80024b2:	f7fe ff2a 	bl	800130a <LL_ADC_SetCommonPathInternalCh>
=======
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <HAL_ADC_ConfigChannel+0x7ac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d127      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d121      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a35      	ldr	r2, [pc, #212]	; (80025d8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d157      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002506:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800250a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800250e:	4619      	mov	r1, r3
 8002510:	482f      	ldr	r0, [pc, #188]	; (80025d0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002512:	f7fe ff2a 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
>>>>>>> develop
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_ADC_ConfigChannel+0x7b4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	4a30      	ldr	r2, [pc, #192]	; (8002580 <HAL_ADC_ConfigChannel+0x7b8>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	099b      	lsrs	r3, r3, #6
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024de:	e03a      	b.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
=======
 8002516:	4b31      	ldr	r3, [pc, #196]	; (80025dc <HAL_ADC_ConfigChannel+0x7b4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	099b      	lsrs	r3, r3, #6
 800251c:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <HAL_ADC_ConfigChannel+0x7b8>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002530:	e002      	b.n	8002538 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3b01      	subs	r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f9      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800253e:	e03a      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
>>>>>>> develop
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
<<<<<<< HEAD
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <HAL_ADC_ConfigChannel+0x7bc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d113      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <HAL_ADC_ConfigChannel+0x7b0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d12a      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002508:	4619      	mov	r1, r3
 800250a:	4819      	ldr	r0, [pc, #100]	; (8002570 <HAL_ADC_ConfigChannel+0x7a8>)
 800250c:	f7fe fefd 	bl	800130a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002510:	e021      	b.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
=======
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d113      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800254a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800254e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d12a      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002568:	4619      	mov	r1, r3
 800256a:	4819      	ldr	r0, [pc, #100]	; (80025d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800256c:	f7fe fefd 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002570:	e021      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
>>>>>>> develop
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
<<<<<<< HEAD
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <HAL_ADC_ConfigChannel+0x7c0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d11c      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800251c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d116      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <HAL_ADC_ConfigChannel+0x7b0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d111      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002536:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800253a:	4619      	mov	r1, r3
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <HAL_ADC_ConfigChannel+0x7a8>)
 800253e:	f7fe fee4 	bl	800130a <LL_ADC_SetCommonPathInternalCh>
 8002542:	e008      	b.n	8002556 <HAL_ADC_ConfigChannel+0x78e>
=======
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d11c      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800257c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d116      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <HAL_ADC_ConfigChannel+0x7b0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d111      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002592:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002596:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800259a:	4619      	mov	r1, r3
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <HAL_ADC_ConfigChannel+0x7a8>)
 800259e:	f7fe fee4 	bl	800136a <LL_ADC_SetCommonPathInternalCh>
 80025a2:	e008      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x78e>
>>>>>>> develop
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
=======
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
>>>>>>> develop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800255e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002562:	4618      	mov	r0, r3
 8002564:	37d8      	adds	r7, #216	; 0xd8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	80080000 	.word	0x80080000
 8002570:	50040300 	.word	0x50040300
 8002574:	c7520000 	.word	0xc7520000
 8002578:	50040000 	.word	0x50040000
 800257c:	20000010 	.word	0x20000010
 8002580:	053e2d63 	.word	0x053e2d63
 8002584:	cb840000 	.word	0xcb840000
 8002588:	80000001 	.word	0x80000001

0800258c <ADC_Enable>:
=======
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	37d8      	adds	r7, #216	; 0xd8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	80080000 	.word	0x80080000
 80025d0:	50040300 	.word	0x50040300
 80025d4:	c7520000 	.word	0xc7520000
 80025d8:	50040000 	.word	0x50040000
 80025dc:	20000010 	.word	0x20000010
 80025e0:	053e2d63 	.word	0x053e2d63
 80025e4:	cb840000 	.word	0xcb840000
 80025e8:	80000001 	.word	0x80000001

080025ec <ADC_Enable>:
>>>>>>> develop
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
=======
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
>>>>>>> develop

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f82d 	bl	80015fc <LL_ADC_IsEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d169      	bne.n	800267c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <ADC_Enable+0xfc>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <ADC_Enable+0x46>
=======
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff f82d 	bl	800165c <LL_ADC_IsEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d169      	bne.n	80026dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <ADC_Enable+0xfc>)
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <ADC_Enable+0x46>
>>>>>>> develop
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e055      	b.n	800267e <ADC_Enable+0xf2>
=======
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f043 0210 	orr.w	r2, r3, #16
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e055      	b.n	80026de <ADC_Enable+0xf2>
>>>>>>> develop
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
<<<<<<< HEAD
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fffc 	bl	80015d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025dc:	482b      	ldr	r0, [pc, #172]	; (800268c <ADC_Enable+0x100>)
 80025de:	f7fe fea7 	bl	8001330 <LL_ADC_GetCommonPathInternalCh>
 80025e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <ADC_Enable+0x88>
=======
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fffc 	bl	8001634 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800263c:	482b      	ldr	r0, [pc, #172]	; (80026ec <ADC_Enable+0x100>)
 800263e:	f7fe fea7 	bl	8001390 <LL_ADC_GetCommonPathInternalCh>
 8002642:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002648:	2b00      	cmp	r3, #0
 800264a:	d013      	beq.n	8002674 <ADC_Enable+0x88>
>>>>>>> develop

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 80025ec:	4b28      	ldr	r3, [pc, #160]	; (8002690 <ADC_Enable+0x104>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	4a28      	ldr	r2, [pc, #160]	; (8002694 <ADC_Enable+0x108>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002606:	e002      	b.n	800260e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3b01      	subs	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f9      	bne.n	8002608 <ADC_Enable+0x7c>
=======
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <ADC_Enable+0x104>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <ADC_Enable+0x108>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002666:	e002      	b.n	800266e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	3b01      	subs	r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f9      	bne.n	8002668 <ADC_Enable+0x7c>
>>>>>>> develop
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002614:	f7fe fe36 	bl	8001284 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800261a:	e028      	b.n	800266e <ADC_Enable+0xe2>
=======
 8002674:	f7fe fe36 	bl	80012e4 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800267a:	e028      	b.n	80026ce <ADC_Enable+0xe2>
>>>>>>> develop
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe ffeb 	bl	80015fc <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d104      	bne.n	8002636 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe ffcf 	bl	80015d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002636:	f7fe fe25 	bl	8001284 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d914      	bls.n	800266e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00d      	beq.n	800266e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e007      	b.n	800267e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d1cf      	bne.n	800261c <ADC_Enable+0x90>
=======
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe ffeb 	bl	800165c <LL_ADC_IsEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe ffcf 	bl	8001634 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002696:	f7fe fe25 	bl	80012e4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d914      	bls.n	80026ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d00d      	beq.n	80026ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e007      	b.n	80026de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d1cf      	bne.n	800267c <ADC_Enable+0x90>
>>>>>>> develop
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	8000003f 	.word	0x8000003f
 800268c:	50040300 	.word	0x50040300
 8002690:	20000010 	.word	0x20000010
 8002694:	053e2d63 	.word	0x053e2d63

08002698 <ADC_DMAConvCplt>:
=======
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	8000003f 	.word	0x8000003f
 80026ec:	50040300 	.word	0x50040300
 80026f0:	20000010 	.word	0x20000010
 80026f4:	053e2d63 	.word	0x053e2d63

080026f8 <ADC_DMAConvCplt>:
>>>>>>> develop
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d14b      	bne.n	800274a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800270e:	2b00      	cmp	r3, #0
 8002710:	d14b      	bne.n	80027aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
<<<<<<< HEAD
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d021      	beq.n	8002710 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fe90 	bl	80013f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d032      	beq.n	8002742 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d12b      	bne.n	8002742 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11f      	bne.n	8002742 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
 800270e:	e018      	b.n	8002742 <ADC_DMAConvCplt+0xaa>
=======
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d021      	beq.n	8002770 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fe90 	bl	8001456 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d12b      	bne.n	80027a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11f      	bne.n	80027a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
 800276e:	e018      	b.n	80027a2 <ADC_DMAConvCplt+0xaa>
>>>>>>> develop
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
<<<<<<< HEAD
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d111      	bne.n	8002742 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d111      	bne.n	80027a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> develop

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7fe fb24 	bl	8000d90 <HAL_ADC_ConvCpltCallback>
=======
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7fe fb26 	bl	8000df4 <HAL_ADC_ConvCpltCallback>
>>>>>>> develop
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 8002748:	e00e      	b.n	8002768 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fb2c 	bl	8001db4 <HAL_ADC_ErrorCallback>
}
 800275c:	e004      	b.n	8002768 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <ADC_DMAHalfConvCplt>:
=======
 80027a8:	e00e      	b.n	80027c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f7ff fb2c 	bl	8001e14 <HAL_ADC_ErrorCallback>
}
 80027bc:	e004      	b.n	80027c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
}
 80027c8:	bf00      	nop
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <ADC_DMAHalfConvCplt>:
>>>>>>> develop
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	60fb      	str	r3, [r7, #12]
=======
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	60fb      	str	r3, [r7, #12]
>>>>>>> develop

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff fb04 	bl	8001d8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <ADC_DMAError>:
=======
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff fb04 	bl	8001dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <ADC_DMAError>:
>>>>>>> develop
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	f043 0204 	orr.w	r2, r3, #4
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	659a      	str	r2, [r3, #88]	; 0x58
=======
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f043 0204 	orr.w	r2, r3, #4
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> develop

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff fafe 	bl	8001db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fafe 	bl	8001e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> develop
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
=======
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
=======
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_ADCEx_InjectedQueueOverflowCallback>:
>>>>>>> develop
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
=======
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
=======
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_ADCEx_LevelOutOfWindow2Callback>:
>>>>>>> develop
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
=======
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ADCEx_LevelOutOfWindow3Callback>:
=======
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_ADCEx_LevelOutOfWindow3Callback>:
>>>>>>> develop
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
=======
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_ADCEx_EndOfSamplingCallback>:
=======
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_ADCEx_EndOfSamplingCallback>:
>>>>>>> develop
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
=======
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <__NVIC_SetPriorityGrouping>:
=======
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <__NVIC_SetPriorityGrouping>:
>>>>>>> develop
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800284c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	60d3      	str	r3, [r2, #12]
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_GetPriorityGrouping>:
=======
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b6:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_GetPriorityGrouping>:
>>>>>>> develop
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <__NVIC_GetPriorityGrouping+0x18>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 0307 	and.w	r3, r3, #7
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_EnableIRQ>:
=======
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_EnableIRQ>:
>>>>>>> develop
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	2b00      	cmp	r3, #0
 8002898:	db0b      	blt.n	80028b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	4907      	ldr	r1, [pc, #28]	; (80028c0 <__NVIC_EnableIRQ+0x38>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2001      	movs	r0, #1
 80028aa:	fa00 f202 	lsl.w	r2, r0, r2
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <__NVIC_SetPriority>:
=======
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db0b      	blt.n	8002912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4907      	ldr	r1, [pc, #28]	; (8002920 <__NVIC_EnableIRQ+0x38>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2001      	movs	r0, #1
 800290a:	fa00 f202 	lsl.w	r2, r0, r2
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000e100 	.word	0xe000e100

08002924 <__NVIC_SetPriority>:
>>>>>>> develop
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db0a      	blt.n	80028ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	490c      	ldr	r1, [pc, #48]	; (8002910 <__NVIC_SetPriority+0x4c>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	440b      	add	r3, r1
 80028e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	6039      	str	r1, [r7, #0]
 800292e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	2b00      	cmp	r3, #0
 8002936:	db0a      	blt.n	800294e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	490c      	ldr	r1, [pc, #48]	; (8002970 <__NVIC_SetPriority+0x4c>)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	0112      	lsls	r2, r2, #4
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	440b      	add	r3, r1
 8002948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> develop
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80028ec:	e00a      	b.n	8002904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <__NVIC_SetPriority+0x50>)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	3b04      	subs	r3, #4
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	440b      	add	r3, r1
 8002902:	761a      	strb	r2, [r3, #24]
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000e100 	.word	0xe000e100
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <NVIC_EncodePriority>:
=======
 800294c:	e00a      	b.n	8002964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4908      	ldr	r1, [pc, #32]	; (8002974 <__NVIC_SetPriority+0x50>)
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3b04      	subs	r3, #4
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	440b      	add	r3, r1
 8002962:	761a      	strb	r2, [r3, #24]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000e100 	.word	0xe000e100
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <NVIC_EncodePriority>:
>>>>>>> develop
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	61fb      	str	r3, [r7, #28]
=======
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	; 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	61fb      	str	r3, [r7, #28]
>>>>>>> develop
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f1c3 0307 	rsb	r3, r3, #7
 8002932:	2b04      	cmp	r3, #4
 8002934:	bf28      	it	cs
 8002936:	2304      	movcs	r3, #4
 8002938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3304      	adds	r3, #4
 800293e:	2b06      	cmp	r3, #6
 8002940:	d902      	bls.n	8002948 <NVIC_EncodePriority+0x30>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3b03      	subs	r3, #3
 8002946:	e000      	b.n	800294a <NVIC_EncodePriority+0x32>
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	f04f 32ff 	mov.w	r2, #4294967295
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43da      	mvns	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	401a      	ands	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	f04f 31ff 	mov.w	r1, #4294967295
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43d9      	mvns	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	4313      	orrs	r3, r2
         );
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <SysTick_Config>:
=======
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f1c3 0307 	rsb	r3, r3, #7
 8002992:	2b04      	cmp	r3, #4
 8002994:	bf28      	it	cs
 8002996:	2304      	movcs	r3, #4
 8002998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3304      	adds	r3, #4
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d902      	bls.n	80029a8 <NVIC_EncodePriority+0x30>
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3b03      	subs	r3, #3
 80029a6:	e000      	b.n	80029aa <NVIC_EncodePriority+0x32>
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	f04f 32ff 	mov.w	r2, #4294967295
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	401a      	ands	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c0:	f04f 31ff 	mov.w	r1, #4294967295
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	43d9      	mvns	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	4313      	orrs	r3, r2
         );
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3724      	adds	r7, #36	; 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <SysTick_Config>:
>>>>>>> develop
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002990:	d301      	bcc.n	8002996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002992:	2301      	movs	r3, #1
 8002994:	e00f      	b.n	80029b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <SysTick_Config+0x40>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299e:	210f      	movs	r1, #15
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f7ff ff8e 	bl	80028c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <SysTick_Config+0x40>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ae:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <SysTick_Config+0x40>)
 80029b0:	2207      	movs	r2, #7
 80029b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_NVIC_SetPriorityGrouping>:
=======
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f0:	d301      	bcc.n	80029f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00f      	b.n	8002a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <SysTick_Config+0x40>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fe:	210f      	movs	r1, #15
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f7ff ff8e 	bl	8002924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <SysTick_Config+0x40>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0e:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <SysTick_Config+0x40>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000e010 	.word	0xe000e010

08002a24 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> develop
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
=======
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff29 	bl	8002824 <__NVIC_SetPriorityGrouping>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
=======
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff29 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_SetPriority>:
>>>>>>> develop
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
=======
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
>>>>>>> develop

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 80029ec:	f7ff ff3e 	bl	800286c <__NVIC_GetPriorityGrouping>
 80029f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ff8e 	bl	8002918 <NVIC_EncodePriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff5d 	bl	80028c4 <__NVIC_SetPriority>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_EnableIRQ>:
=======
 8002a4c:	f7ff ff3e 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002a50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f7ff ff8e 	bl	8002978 <NVIC_EncodePriority>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff5d 	bl	8002924 <__NVIC_SetPriority>
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_EnableIRQ>:
>>>>>>> develop
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
=======
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	71fb      	strb	r3, [r7, #7]
>>>>>>> develop
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff31 	bl	8002888 <__NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_SYSTICK_Config>:
=======
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff ff31 	bl	80028e8 <__NVIC_EnableIRQ>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SYSTICK_Config>:
>>>>>>> develop
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ffa2 	bl	8002980 <SysTick_Config>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_DMA_Init>:
=======
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffa2 	bl	80029e0 <SysTick_Config>
 8002a9c:	4603      	mov	r3, r0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_DMA_Init>:
>>>>>>> develop
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
=======
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
<<<<<<< HEAD
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e098      	b.n	8002b8c <HAL_DMA_Init+0x144>
=======
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e098      	b.n	8002bec <HAL_DMA_Init+0x144>
>>>>>>> develop
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< HEAD
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <HAL_DMA_Init+0x150>)
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d80f      	bhi.n	8002a86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <HAL_DMA_Init+0x154>)
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a4b      	ldr	r2, [pc, #300]	; (8002ba0 <HAL_DMA_Init+0x158>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	009a      	lsls	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a48      	ldr	r2, [pc, #288]	; (8002ba4 <HAL_DMA_Init+0x15c>)
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
 8002a84:	e00e      	b.n	8002aa4 <HAL_DMA_Init+0x5c>
=======
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_DMA_Init+0x150>)
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d80f      	bhi.n	8002ae6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b4b      	ldr	r3, [pc, #300]	; (8002bfc <HAL_DMA_Init+0x154>)
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a4b      	ldr	r2, [pc, #300]	; (8002c00 <HAL_DMA_Init+0x158>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	009a      	lsls	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a48      	ldr	r2, [pc, #288]	; (8002c04 <HAL_DMA_Init+0x15c>)
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae4:	e00e      	b.n	8002b04 <HAL_DMA_Init+0x5c>
>>>>>>> develop
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
<<<<<<< HEAD
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_DMA_Init+0x160>)
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <HAL_DMA_Init+0x158>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	009a      	lsls	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a42      	ldr	r2, [pc, #264]	; (8002bac <HAL_DMA_Init+0x164>)
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_DMA_Init+0x160>)
 8002aee:	4413      	add	r3, r2
 8002af0:	4a43      	ldr	r2, [pc, #268]	; (8002c00 <HAL_DMA_Init+0x158>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	009a      	lsls	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a42      	ldr	r2, [pc, #264]	; (8002c0c <HAL_DMA_Init+0x164>)
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> develop
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
=======
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
>>>>>>> develop
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]
=======
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	601a      	str	r2, [r3, #0]
>>>>>>> develop
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
<<<<<<< HEAD
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afe:	d039      	beq.n	8002b74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	4a27      	ldr	r2, [pc, #156]	; (8002ba4 <HAL_DMA_Init+0x15c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d11a      	bne.n	8002b40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b0a:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <HAL_DMA_Init+0x168>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f003 031c 	and.w	r3, r3, #28
 8002b16:	210f      	movs	r1, #15
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4924      	ldr	r1, [pc, #144]	; (8002bb0 <HAL_DMA_Init+0x168>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_DMA_Init+0x168>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f003 031c 	and.w	r3, r3, #28
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	491d      	ldr	r1, [pc, #116]	; (8002bb0 <HAL_DMA_Init+0x168>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
 8002b3e:	e019      	b.n	8002b74 <HAL_DMA_Init+0x12c>
=======
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5e:	d039      	beq.n	8002bd4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_DMA_Init+0x15c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d11a      	bne.n	8002ba0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_DMA_Init+0x168>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f003 031c 	and.w	r3, r3, #28
 8002b76:	210f      	movs	r1, #15
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	4924      	ldr	r1, [pc, #144]	; (8002c10 <HAL_DMA_Init+0x168>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_DMA_Init+0x168>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f003 031c 	and.w	r3, r3, #28
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	491d      	ldr	r1, [pc, #116]	; (8002c10 <HAL_DMA_Init+0x168>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
 8002b9e:	e019      	b.n	8002bd4 <HAL_DMA_Init+0x12c>
>>>>>>> develop
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
<<<<<<< HEAD
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_DMA_Init+0x16c>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f003 031c 	and.w	r3, r3, #28
 8002b4c:	210f      	movs	r1, #15
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_DMA_Init+0x16c>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_DMA_Init+0x16c>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6859      	ldr	r1, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	f003 031c 	and.w	r3, r3, #28
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	4911      	ldr	r1, [pc, #68]	; (8002bb4 <HAL_DMA_Init+0x16c>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
=======
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_DMA_Init+0x16c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba8:	f003 031c 	and.w	r3, r3, #28
 8002bac:	210f      	movs	r1, #15
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	4917      	ldr	r1, [pc, #92]	; (8002c14 <HAL_DMA_Init+0x16c>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_DMA_Init+0x16c>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f003 031c 	and.w	r3, r3, #28
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	4911      	ldr	r1, [pc, #68]	; (8002c14 <HAL_DMA_Init+0x16c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
>>>>>>> develop
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40020407 	.word	0x40020407
 8002b9c:	bffdfff8 	.word	0xbffdfff8
 8002ba0:	cccccccd 	.word	0xcccccccd
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	bffdfbf8 	.word	0xbffdfbf8
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	400200a8 	.word	0x400200a8
 8002bb4:	400204a8 	.word	0x400204a8

08002bb8 <HAL_DMA_Start_IT>:
=======
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40020407 	.word	0x40020407
 8002bfc:	bffdfff8 	.word	0xbffdfff8
 8002c00:	cccccccd 	.word	0xcccccccd
 8002c04:	40020000 	.word	0x40020000
 8002c08:	bffdfbf8 	.word	0xbffdfbf8
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	400200a8 	.word	0x400200a8
 8002c14:	400204a8 	.word	0x400204a8

08002c18 <HAL_DMA_Start_IT>:
>>>>>>> develop
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
=======
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
>>>>>>> develop

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_DMA_Start_IT+0x20>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e04b      	b.n	8002c70 <HAL_DMA_Start_IT+0xb8>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d13a      	bne.n	8002c62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f95f 	bl	8002ed4 <DMA_SetConfig>
=======
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Start_IT+0x20>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e04b      	b.n	8002cd0 <HAL_DMA_Start_IT+0xb8>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d13a      	bne.n	8002cc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f95f 	bl	8002f34 <DMA_SetConfig>
>>>>>>> develop

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
<<<<<<< HEAD
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 020e 	orr.w	r2, r2, #14
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e00f      	b.n	8002c50 <HAL_DMA_Start_IT+0x98>
=======
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 020e 	orr.w	r2, r2, #14
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e00f      	b.n	8002cb0 <HAL_DMA_Start_IT+0x98>
>>>>>>> develop
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 020a 	orr.w	r2, r2, #10
 8002c4e:	601a      	str	r2, [r3, #0]
=======
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0204 	bic.w	r2, r2, #4
 8002c9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 020a 	orr.w	r2, r2, #10
 8002cae:	601a      	str	r2, [r3, #0]
>>>>>>> develop
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e005      	b.n	8002c6e <HAL_DMA_Start_IT+0xb6>
=======
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e005      	b.n	8002cce <HAL_DMA_Start_IT+0xb6>
>>>>>>> develop
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_DMA_Abort>:
=======
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_DMA_Abort>:
>>>>>>> develop
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d008      	beq.n	8002ca2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2204      	movs	r2, #4
 8002c94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e022      	b.n	8002ce8 <HAL_DMA_Abort+0x70>
=======
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d008      	beq.n	8002d02 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e022      	b.n	8002d48 <HAL_DMA_Abort+0x70>
>>>>>>> develop
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 020e 	bic.w	r2, r2, #14
 8002cb0:	601a      	str	r2, [r3, #0]
=======
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 020e 	bic.w	r2, r2, #14
 8002d10:	601a      	str	r2, [r3, #0]
>>>>>>> develop
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f003 021c 	and.w	r2, r3, #28
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	605a      	str	r2, [r3, #4]
=======
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	f003 021c 	and.w	r2, r3, #28
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	605a      	str	r2, [r3, #4]
>>>>>>> develop
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_DMA_Abort_IT>:
=======
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_DMA_Abort_IT>:
>>>>>>> develop
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d005      	beq.n	8002d18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e029      	b.n	8002d6c <HAL_DMA_Abort_IT+0x78>
=======
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d005      	beq.n	8002d78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	e029      	b.n	8002dcc <HAL_DMA_Abort_IT+0x78>
>>>>>>> develop
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 020e 	bic.w	r2, r2, #14
 8002d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
=======
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 020e 	bic.w	r2, r2, #14
 8002d86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
>>>>>>> develop
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
<<<<<<< HEAD
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	f003 021c 	and.w	r2, r3, #28
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2101      	movs	r1, #1
 8002d46:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4a:	605a      	str	r2, [r3, #4]
=======
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f003 021c 	and.w	r2, r3, #28
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	605a      	str	r2, [r3, #4]
>>>>>>> develop
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
    }
  }
  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_DMA_IRQHandler>:
=======
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4798      	blx	r3
    }
  }
  return status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_DMA_IRQHandler>:
>>>>>>> develop
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f003 031c 	and.w	r3, r3, #28
 8002d96:	2204      	movs	r2, #4
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d026      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x7a>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d021      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0204 	bic.w	r2, r2, #4
 8002dc8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f003 021c 	and.w	r2, r3, #28
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2104      	movs	r1, #4
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	605a      	str	r2, [r3, #4]
=======
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f003 031c 	and.w	r3, r3, #28
 8002df6:	2204      	movs	r2, #4
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d026      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x7a>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d021      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0204 	bic.w	r2, r2, #4
 8002e28:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f003 021c 	and.w	r2, r3, #28
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2104      	movs	r1, #4
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	605a      	str	r2, [r3, #4]
>>>>>>> develop

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d071      	beq.n	8002eca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002dee:	e06c      	b.n	8002eca <HAL_DMA_IRQHandler+0x154>
=======
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d071      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e4e:	e06c      	b.n	8002f2a <HAL_DMA_IRQHandler+0x154>
>>>>>>> develop
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
<<<<<<< HEAD
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	f003 031c 	and.w	r3, r3, #28
 8002df8:	2202      	movs	r2, #2
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d02e      	beq.n	8002e62 <HAL_DMA_IRQHandler+0xec>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d029      	beq.n	8002e62 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_DMA_IRQHandler+0xbe>
=======
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f003 031c 	and.w	r3, r3, #28
 8002e58:	2202      	movs	r2, #2
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d02e      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xec>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d029      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_DMA_IRQHandler+0xbe>
>>>>>>> develop
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
<<<<<<< HEAD
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 020a 	bic.w	r2, r2, #10
 8002e2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	f003 021c 	and.w	r2, r3, #28
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2102      	movs	r1, #2
 8002e42:	fa01 f202 	lsl.w	r2, r1, r2
 8002e46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d038      	beq.n	8002eca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e60:	e033      	b.n	8002eca <HAL_DMA_IRQHandler+0x154>
=======
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 020a 	bic.w	r2, r2, #10
 8002e8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	f003 021c 	and.w	r2, r3, #28
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d038      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ec0:	e033      	b.n	8002f2a <HAL_DMA_IRQHandler+0x154>
>>>>>>> develop
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
<<<<<<< HEAD
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f003 031c 	and.w	r3, r3, #28
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d02a      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x156>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d025      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x156>
=======
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f003 031c 	and.w	r3, r3, #28
 8002eca:	2208      	movs	r2, #8
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02a      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x156>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d025      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x156>
>>>>>>> develop
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 020e 	bic.w	r2, r2, #14
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f003 021c 	and.w	r2, r3, #28
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
=======
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020e 	bic.w	r2, r2, #14
 8002eee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f003 021c 	and.w	r2, r3, #28
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f202 	lsl.w	r2, r1, r2
 8002f02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
>>>>>>> develop
  }
  else
  {
    /* Nothing To Do */
  }
  return;
<<<<<<< HEAD
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
}
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <DMA_SetConfig>:
=======
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
}
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <DMA_SetConfig>:
>>>>>>> develop
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
=======
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
>>>>>>> develop
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
<<<<<<< HEAD
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f003 021c 	and.w	r2, r3, #28
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d108      	bne.n	8002f18 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	60da      	str	r2, [r3, #12]
=======
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f003 021c 	and.w	r2, r3, #28
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d108      	bne.n	8002f78 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	60da      	str	r2, [r3, #12]
>>>>>>> develop
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 8002f16:	e007      	b.n	8002f28 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	60da      	str	r2, [r3, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_GPIO_Init>:
=======
 8002f76:	e007      	b.n	8002f88 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	60da      	str	r2, [r3, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_GPIO_Init>:
>>>>>>> develop
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
=======
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
>>>>>>> develop
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8002f42:	e154      	b.n	80031ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	4013      	ands	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8146 	beq.w	80031e8 <HAL_GPIO_Init+0x2b4>
=======
 8002fa2:	e154      	b.n	800324e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8146 	beq.w	8003248 <HAL_GPIO_Init+0x2b4>
>>>>>>> develop
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d005      	beq.n	8002f74 <HAL_GPIO_Init+0x40>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d130      	bne.n	8002fd6 <HAL_GPIO_Init+0xa2>
=======
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d005      	beq.n	8002fd4 <HAL_GPIO_Init+0x40>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d130      	bne.n	8003036 <HAL_GPIO_Init+0xa2>
>>>>>>> develop
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	2203      	movs	r2, #3
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002faa:	2201      	movs	r2, #1
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0201 	and.w	r2, r3, #1
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	605a      	str	r2, [r3, #4]
=======
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800300a:	2201      	movs	r2, #1
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 0201 	and.w	r2, r3, #1
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	605a      	str	r2, [r3, #4]
>>>>>>> develop
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d017      	beq.n	8003012 <HAL_GPIO_Init+0xde>
=======
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b03      	cmp	r3, #3
 8003040:	d017      	beq.n	8003072 <HAL_GPIO_Init+0xde>
>>>>>>> develop
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2203      	movs	r2, #3
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	60da      	str	r2, [r3, #12]
=======
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	60da      	str	r2, [r3, #12]
>>>>>>> develop
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d123      	bne.n	8003066 <HAL_GPIO_Init+0x132>
=======
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d123      	bne.n	80030c6 <HAL_GPIO_Init+0x132>
>>>>>>> develop
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	220f      	movs	r2, #15
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	08da      	lsrs	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3208      	adds	r2, #8
 8003060:	6939      	ldr	r1, [r7, #16]
 8003062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	08da      	lsrs	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3208      	adds	r2, #8
 8003086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	08da      	lsrs	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3208      	adds	r2, #8
 80030c0:	6939      	ldr	r1, [r7, #16]
 80030c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> develop
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0203 	and.w	r2, r3, #3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	601a      	str	r2, [r3, #0]
=======
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	2203      	movs	r2, #3
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0203 	and.w	r2, r3, #3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	601a      	str	r2, [r3, #0]
>>>>>>> develop

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80a0 	beq.w	80031e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a8:	4b58      	ldr	r3, [pc, #352]	; (800320c <HAL_GPIO_Init+0x2d8>)
 80030aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ac:	4a57      	ldr	r2, [pc, #348]	; (800320c <HAL_GPIO_Init+0x2d8>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6613      	str	r3, [r2, #96]	; 0x60
 80030b4:	4b55      	ldr	r3, [pc, #340]	; (800320c <HAL_GPIO_Init+0x2d8>)
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030c0:	4a53      	ldr	r2, [pc, #332]	; (8003210 <HAL_GPIO_Init+0x2dc>)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	089b      	lsrs	r3, r3, #2
 80030c6:	3302      	adds	r3, #2
 80030c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ea:	d019      	beq.n	8003120 <HAL_GPIO_Init+0x1ec>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a49      	ldr	r2, [pc, #292]	; (8003214 <HAL_GPIO_Init+0x2e0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d013      	beq.n	800311c <HAL_GPIO_Init+0x1e8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a48      	ldr	r2, [pc, #288]	; (8003218 <HAL_GPIO_Init+0x2e4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00d      	beq.n	8003118 <HAL_GPIO_Init+0x1e4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a47      	ldr	r2, [pc, #284]	; (800321c <HAL_GPIO_Init+0x2e8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <HAL_GPIO_Init+0x1e0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_GPIO_Init+0x2ec>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_GPIO_Init+0x1dc>
 800310c:	2304      	movs	r3, #4
 800310e:	e008      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 8003110:	2307      	movs	r3, #7
 8003112:	e006      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 8003114:	2303      	movs	r3, #3
 8003116:	e004      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 8003118:	2302      	movs	r3, #2
 800311a:	e002      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_GPIO_Init+0x1ee>
 8003120:	2300      	movs	r3, #0
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	f002 0203 	and.w	r2, r2, #3
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	4093      	lsls	r3, r2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003132:	4937      	ldr	r1, [pc, #220]	; (8003210 <HAL_GPIO_Init+0x2dc>)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003140:	4b38      	ldr	r3, [pc, #224]	; (8003224 <HAL_GPIO_Init+0x2f0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003164:	4a2f      	ldr	r2, [pc, #188]	; (8003224 <HAL_GPIO_Init+0x2f0>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_GPIO_Init+0x2f0>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800318e:	4a25      	ldr	r2, [pc, #148]	; (8003224 <HAL_GPIO_Init+0x2f0>)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_GPIO_Init+0x2f0>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	43db      	mvns	r3, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031b8:	4a1a      	ldr	r2, [pc, #104]	; (8003224 <HAL_GPIO_Init+0x2f0>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_GPIO_Init+0x2f0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031e2:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_GPIO_Init+0x2f0>)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	6013      	str	r3, [r2, #0]
=======
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80a0 	beq.w	8003248 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003108:	4b58      	ldr	r3, [pc, #352]	; (800326c <HAL_GPIO_Init+0x2d8>)
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	4a57      	ldr	r2, [pc, #348]	; (800326c <HAL_GPIO_Init+0x2d8>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6613      	str	r3, [r2, #96]	; 0x60
 8003114:	4b55      	ldr	r3, [pc, #340]	; (800326c <HAL_GPIO_Init+0x2d8>)
 8003116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003120:	4a53      	ldr	r2, [pc, #332]	; (8003270 <HAL_GPIO_Init+0x2dc>)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	3302      	adds	r3, #2
 8003128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	220f      	movs	r2, #15
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800314a:	d019      	beq.n	8003180 <HAL_GPIO_Init+0x1ec>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a49      	ldr	r2, [pc, #292]	; (8003274 <HAL_GPIO_Init+0x2e0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <HAL_GPIO_Init+0x1e8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a48      	ldr	r2, [pc, #288]	; (8003278 <HAL_GPIO_Init+0x2e4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00d      	beq.n	8003178 <HAL_GPIO_Init+0x1e4>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a47      	ldr	r2, [pc, #284]	; (800327c <HAL_GPIO_Init+0x2e8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <HAL_GPIO_Init+0x1e0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a46      	ldr	r2, [pc, #280]	; (8003280 <HAL_GPIO_Init+0x2ec>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d101      	bne.n	8003170 <HAL_GPIO_Init+0x1dc>
 800316c:	2304      	movs	r3, #4
 800316e:	e008      	b.n	8003182 <HAL_GPIO_Init+0x1ee>
 8003170:	2307      	movs	r3, #7
 8003172:	e006      	b.n	8003182 <HAL_GPIO_Init+0x1ee>
 8003174:	2303      	movs	r3, #3
 8003176:	e004      	b.n	8003182 <HAL_GPIO_Init+0x1ee>
 8003178:	2302      	movs	r3, #2
 800317a:	e002      	b.n	8003182 <HAL_GPIO_Init+0x1ee>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_GPIO_Init+0x1ee>
 8003180:	2300      	movs	r3, #0
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	f002 0203 	and.w	r2, r2, #3
 8003188:	0092      	lsls	r2, r2, #2
 800318a:	4093      	lsls	r3, r2
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003192:	4937      	ldr	r1, [pc, #220]	; (8003270 <HAL_GPIO_Init+0x2dc>)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a0:	4b38      	ldr	r3, [pc, #224]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031c4:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031ca:	4b2e      	ldr	r3, [pc, #184]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031f4:	4b23      	ldr	r3, [pc, #140]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003218:	4a1a      	ldr	r2, [pc, #104]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800321e:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_GPIO_Init+0x2f0>)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	6013      	str	r3, [r2, #0]
>>>>>>> develop
      }
    }

    position++;
<<<<<<< HEAD
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3301      	adds	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f47f aea3 	bne.w	8002f44 <HAL_GPIO_Init+0x10>
  }
}
 80031fe:	bf00      	nop
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	40021000 	.word	0x40021000
 8003210:	40010000 	.word	0x40010000
 8003214:	48000400 	.word	0x48000400
 8003218:	48000800 	.word	0x48000800
 800321c:	48000c00 	.word	0x48000c00
 8003220:	48001000 	.word	0x48001000
 8003224:	40010400 	.word	0x40010400

08003228 <HAL_GPIO_WritePin>:
=======
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	3301      	adds	r3, #1
 800324c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	f47f aea3 	bne.w	8002fa4 <HAL_GPIO_Init+0x10>
  }
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	40010000 	.word	0x40010000
 8003274:	48000400 	.word	0x48000400
 8003278:	48000800 	.word	0x48000800
 800327c:	48000c00 	.word	0x48000c00
 8003280:	48001000 	.word	0x48001000
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_WritePin>:
>>>>>>> develop
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
=======
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	807b      	strh	r3, [r7, #2]
 8003294:	4613      	mov	r3, r2
 8003296:	707b      	strb	r3, [r7, #1]
>>>>>>> develop
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
=======
 8003298:	787b      	ldrb	r3, [r7, #1]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	619a      	str	r2, [r3, #24]
>>>>>>> develop
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 8003244:	e002      	b.n	800324c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_PWREx_GetVoltageRange>:
=======
 80032a4:	e002      	b.n	80032ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_PWREx_GetVoltageRange>:
>>>>>>> develop
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< HEAD
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
=======
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
>>>>>>> develop
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
<<<<<<< HEAD
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_PWREx_GetVoltageRange+0x18>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_PWREx_ControlVoltageScaling>:
=======
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40007000 	.word	0x40007000

080032d4 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> develop
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< HEAD
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
=======
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< HEAD
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003282:	d130      	bne.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d038      	beq.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800329a:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2232      	movs	r2, #50	; 0x32
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	0c9b      	lsrs	r3, r3, #18
 80032b4:	3301      	adds	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b8:	e002      	b.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3b01      	subs	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	d102      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f2      	bne.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d110      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e00f      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x92>
=======
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e2:	d130      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f0:	d038      	beq.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003300:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2232      	movs	r2, #50	; 0x32
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0c9b      	lsrs	r3, r3, #18
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003318:	e002      	b.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3b01      	subs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332c:	d102      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x60>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f2      	bne.n	800331a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003340:	d110      	bne.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x92>
>>>>>>> develop
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
<<<<<<< HEAD
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d007      	beq.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032fc:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003302:	6013      	str	r3, [r2, #0]
=======
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d007      	beq.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800335c:	4a05      	ldr	r2, [pc, #20]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003362:	6013      	str	r3, [r2, #0]
>>>>>>> develop
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< HEAD
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40007000 	.word	0x40007000
 8003318:	20000010 	.word	0x20000010
 800331c:	431bde83 	.word	0x431bde83

08003320 <HAL_RCC_OscConfig>:
=======
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40007000 	.word	0x40007000
 8003378:	20000010 	.word	0x20000010
 800337c:	431bde83 	.word	0x431bde83

08003380 <HAL_RCC_OscConfig>:
>>>>>>> develop
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
=======
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f000 bc02 	b.w	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f000 bc02 	b.w	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8003334:	4b96      	ldr	r3, [pc, #600]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333e:	4b94      	ldr	r3, [pc, #592]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80e4 	beq.w	800351e <HAL_RCC_OscConfig+0x1fe>
=======
 8003394:	4b96      	ldr	r3, [pc, #600]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339e:	4b94      	ldr	r3, [pc, #592]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80e4 	beq.w	800357e <HAL_RCC_OscConfig+0x1fe>
>>>>>>> develop
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< HEAD
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_RCC_OscConfig+0x4c>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	f040 808b 	bne.w	800347a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	f040 8087 	bne.w	800347a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336c:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_OscConfig+0x64>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e3d9      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <HAL_RCC_OscConfig+0x4c>
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	f040 808b 	bne.w	80034da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	f040 8087 	bne.w	80034da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033cc:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_OscConfig+0x64>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e3d9      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< HEAD
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1a      	ldr	r2, [r3, #32]
 8003388:	4b81      	ldr	r3, [pc, #516]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_RCC_OscConfig+0x7e>
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339c:	e005      	b.n	80033aa <HAL_RCC_OscConfig+0x8a>
 800339e:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d223      	bcs.n	80033f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fd8c 	bl	8003ed0 <RCC_SetFlashLatencyFromMSIRange>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e3ba      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1a      	ldr	r2, [r3, #32]
 80033e8:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <HAL_RCC_OscConfig+0x7e>
 80033f4:	4b7e      	ldr	r3, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fc:	e005      	b.n	800340a <HAL_RCC_OscConfig+0x8a>
 80033fe:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340a:	4293      	cmp	r3, r2
 800340c:	d223      	bcs.n	8003456 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fd8c 	bl	8003f30 <RCC_SetFlashLatencyFromMSIRange>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e3ba      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 80033c2:	4b73      	ldr	r3, [pc, #460]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a72      	ldr	r2, [pc, #456]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	496d      	ldr	r1, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e0:	4b6b      	ldr	r3, [pc, #428]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	4968      	ldr	r1, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
 80033f4:	e025      	b.n	8003442 <HAL_RCC_OscConfig+0x122>
=======
 8003422:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a72      	ldr	r2, [pc, #456]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003428:	f043 0308 	orr.w	r3, r3, #8
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b70      	ldr	r3, [pc, #448]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	496d      	ldr	r1, [pc, #436]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003440:	4b6b      	ldr	r3, [pc, #428]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	4968      	ldr	r1, [pc, #416]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
 8003454:	e025      	b.n	80034a2 <HAL_RCC_OscConfig+0x122>
>>>>>>> develop
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 80033f6:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b63      	ldr	r3, [pc, #396]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4960      	ldr	r1, [pc, #384]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	495b      	ldr	r1, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
=======
 8003456:	4b66      	ldr	r3, [pc, #408]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4960      	ldr	r1, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	495b      	ldr	r1, [pc, #364]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
>>>>>>> develop

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< HEAD
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fd4c 	bl	8003ed0 <RCC_SetFlashLatencyFromMSIRange>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e37a      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fd4c 	bl	8003f30 <RCC_SetFlashLatencyFromMSIRange>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e37a      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8003442:	f000 fc81 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003446:	4602      	mov	r2, r0
 8003448:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4950      	ldr	r1, [pc, #320]	; (8003594 <HAL_RCC_OscConfig+0x274>)
 8003454:	5ccb      	ldrb	r3, [r1, r3]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a4e      	ldr	r2, [pc, #312]	; (8003598 <HAL_RCC_OscConfig+0x278>)
 8003460:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003462:	4b4e      	ldr	r3, [pc, #312]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd febc 	bl	80011e4 <HAL_InitTick>
 800346c:	4603      	mov	r3, r0
 800346e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d052      	beq.n	800351c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	e35e      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 80034a2:	f000 fc81 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	4950      	ldr	r1, [pc, #320]	; (80035f4 <HAL_RCC_OscConfig+0x274>)
 80034b4:	5ccb      	ldrb	r3, [r1, r3]
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	fa22 f303 	lsr.w	r3, r2, r3
 80034be:	4a4e      	ldr	r2, [pc, #312]	; (80035f8 <HAL_RCC_OscConfig+0x278>)
 80034c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034c2:	4b4e      	ldr	r3, [pc, #312]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd febc 	bl	8001244 <HAL_InitTick>
 80034cc:	4603      	mov	r3, r0
 80034ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d052      	beq.n	800357c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	e35e      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d032      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a42      	ldr	r2, [pc, #264]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800348e:	f7fd fef9 	bl	8001284 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003496:	f7fd fef5 	bl	8001284 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e347      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x176>
=======
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d032      	beq.n	8003548 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034e2:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a42      	ldr	r2, [pc, #264]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ee:	f7fd fef9 	bl	80012e4 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f6:	f7fd fef5 	bl	80012e4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e347      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003508:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x176>
>>>>>>> develop
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a35      	ldr	r2, [pc, #212]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4930      	ldr	r1, [pc, #192]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	492b      	ldr	r1, [pc, #172]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
 80034e6:	e01a      	b.n	800351e <HAL_RCC_OscConfig+0x1fe>
=======
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 800351a:	f043 0308 	orr.w	r3, r3, #8
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4930      	ldr	r1, [pc, #192]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003532:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	492b      	ldr	r1, [pc, #172]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
 8003546:	e01a      	b.n	800357e <HAL_RCC_OscConfig+0x1fe>
>>>>>>> develop

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a28      	ldr	r2, [pc, #160]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034f4:	f7fd fec6 	bl	8001284 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034fc:	f7fd fec2 	bl	8001284 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e314      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1dc>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800351c:	bf00      	nop
=======
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a28      	ldr	r2, [pc, #160]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003554:	f7fd fec6 	bl	80012e4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800355c:	f7fd fec2 	bl	80012e4 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e314      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x1dc>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800357c:	bf00      	nop
>>>>>>> develop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d073      	beq.n	8003612 <HAL_RCC_OscConfig+0x2f2>
=======
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d073      	beq.n	8003672 <HAL_RCC_OscConfig+0x2f2>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< HEAD
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d005      	beq.n	800353c <HAL_RCC_OscConfig+0x21c>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d10e      	bne.n	8003554 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d063      	beq.n	8003610 <HAL_RCC_OscConfig+0x2f0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d15f      	bne.n	8003610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e2f1      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d005      	beq.n	800359c <HAL_RCC_OscConfig+0x21c>
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d10e      	bne.n	80035b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d10b      	bne.n	80035b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d063      	beq.n	8003670 <HAL_RCC_OscConfig+0x2f0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d15f      	bne.n	8003670 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e2f1      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x24c>
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e025      	b.n	80035b8 <HAL_RCC_OscConfig+0x298>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003574:	d114      	bne.n	80035a0 <HAL_RCC_OscConfig+0x280>
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a02      	ldr	r2, [pc, #8]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e013      	b.n	80035b8 <HAL_RCC_OscConfig+0x298>
 8003590:	40021000 	.word	0x40021000
 8003594:	08005d2c 	.word	0x08005d2c
 8003598:	20000010 	.word	0x20000010
 800359c:	20000014 	.word	0x20000014
 80035a0:	4ba0      	ldr	r3, [pc, #640]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a9f      	ldr	r2, [pc, #636]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b9d      	ldr	r3, [pc, #628]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a9c      	ldr	r2, [pc, #624]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd fe60 	bl	8001284 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fd fe5c 	bl	8001284 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e2ae      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035da:	4b92      	ldr	r3, [pc, #584]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x2a8>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x2f2>
=======
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035bc:	d106      	bne.n	80035cc <HAL_RCC_OscConfig+0x24c>
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e025      	b.n	8003618 <HAL_RCC_OscConfig+0x298>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d4:	d114      	bne.n	8003600 <HAL_RCC_OscConfig+0x280>
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80035dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a02      	ldr	r2, [pc, #8]	; (80035f0 <HAL_RCC_OscConfig+0x270>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e013      	b.n	8003618 <HAL_RCC_OscConfig+0x298>
 80035f0:	40021000 	.word	0x40021000
 80035f4:	08005d8c 	.word	0x08005d8c
 80035f8:	20000010 	.word	0x20000010
 80035fc:	20000014 	.word	0x20000014
 8003600:	4ba0      	ldr	r3, [pc, #640]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a9f      	ldr	r2, [pc, #636]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b9d      	ldr	r3, [pc, #628]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a9c      	ldr	r2, [pc, #624]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd fe60 	bl	80012e4 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fd fe5c 	bl	80012e4 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e2ae      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363a:	4b92      	ldr	r3, [pc, #584]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x2a8>
 8003646:	e014      	b.n	8003672 <HAL_RCC_OscConfig+0x2f2>
>>>>>>> develop
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80035e8:	f7fd fe4c 	bl	8001284 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fd fe48 	bl	8001284 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e29a      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2d0>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
=======
 8003648:	f7fd fe4c 	bl	80012e4 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7fd fe48 	bl	80012e4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e29a      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003662:	4b88      	ldr	r3, [pc, #544]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x2d0>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	bf00      	nop
>>>>>>> develop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d060      	beq.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
=======
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d060      	beq.n	8003740 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> develop
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< HEAD
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d005      	beq.n	8003630 <HAL_RCC_OscConfig+0x310>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d119      	bne.n	800365e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d116      	bne.n	800365e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003630:	4b7c      	ldr	r3, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x328>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e277      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d005      	beq.n	8003690 <HAL_RCC_OscConfig+0x310>
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d119      	bne.n	80036be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d116      	bne.n	80036be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003690:	4b7c      	ldr	r3, [pc, #496]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_OscConfig+0x328>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e277      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003648:	4b76      	ldr	r3, [pc, #472]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	4973      	ldr	r1, [pc, #460]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800365c:	e040      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
=======
 80036a8:	4b76      	ldr	r3, [pc, #472]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	4973      	ldr	r1, [pc, #460]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036bc:	e040      	b.n	8003740 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> develop
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d023      	beq.n	80036ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003666:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6e      	ldr	r2, [pc, #440]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd fe07 	bl	8001284 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367a:	f7fd fe03 	bl	8001284 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e255      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368c:	4b65      	ldr	r3, [pc, #404]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x35a>
=======
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d023      	beq.n	800370e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c6:	4b6f      	ldr	r3, [pc, #444]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a6e      	ldr	r2, [pc, #440]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7fd fe07 	bl	80012e4 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036da:	f7fd fe03 	bl	80012e4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e255      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ec:	4b65      	ldr	r3, [pc, #404]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x35a>
>>>>>>> develop
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003698:	4b62      	ldr	r3, [pc, #392]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	495f      	ldr	r1, [pc, #380]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
=======
 80036f8:	4b62      	ldr	r3, [pc, #392]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	061b      	lsls	r3, r3, #24
 8003706:	495f      	ldr	r1, [pc, #380]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
 800370c:	e018      	b.n	8003740 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> develop
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5c      	ldr	r2, [pc, #368]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fde3 	bl	8001284 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fd fddf 	bl	8001284 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e231      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
=======
 800370e:	4b5d      	ldr	r3, [pc, #372]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5c      	ldr	r2, [pc, #368]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fd fde3 	bl	80012e4 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003722:	f7fd fddf 	bl	80012e4 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e231      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCC_OscConfig+0x3a2>
>>>>>>> develop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03c      	beq.n	8003766 <HAL_RCC_OscConfig+0x446>
=======
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d03c      	beq.n	80037c6 <HAL_RCC_OscConfig+0x446>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01c      	beq.n	800372e <HAL_RCC_OscConfig+0x40e>
=======
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01c      	beq.n	800378e <HAL_RCC_OscConfig+0x40e>
>>>>>>> develop
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 80036f4:	4b4b      	ldr	r3, [pc, #300]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fa:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fdbe 	bl	8001284 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd fdba 	bl	8001284 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e20c      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <HAL_RCC_OscConfig+0x3ec>
 800372c:	e01b      	b.n	8003766 <HAL_RCC_OscConfig+0x446>
=======
 8003754:	4b4b      	ldr	r3, [pc, #300]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375a:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fd fdbe 	bl	80012e4 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376c:	f7fd fdba 	bl	80012e4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e20c      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCC_OscConfig+0x3ec>
 800378c:	e01b      	b.n	80037c6 <HAL_RCC_OscConfig+0x446>
>>>>>>> develop
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 800372e:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003734:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373e:	f7fd fda1 	bl	8001284 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003746:	f7fd fd9d 	bl	8001284 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e1ef      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003758:	4b32      	ldr	r3, [pc, #200]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ef      	bne.n	8003746 <HAL_RCC_OscConfig+0x426>
=======
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003794:	4a3b      	ldr	r2, [pc, #236]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fd fda1 	bl	80012e4 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a6:	f7fd fd9d 	bl	80012e4 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1ef      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ef      	bne.n	80037a6 <HAL_RCC_OscConfig+0x426>
>>>>>>> develop
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80a6 	beq.w	80038c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	77fb      	strb	r3, [r7, #31]
=======
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80a6 	beq.w	8003920 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d4:	2300      	movs	r3, #0
 80037d6:	77fb      	strb	r3, [r7, #31]
>>>>>>> develop
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< HEAD
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	6593      	str	r3, [r2, #88]	; 0x58
 8003790:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379c:	2301      	movs	r3, #1
 800379e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d118      	bne.n	80037de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b8:	f7fd fd64 	bl	8001284 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c0:	f7fd fd60 	bl	8001284 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1b2      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4a0>
=======
 80037d8:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10d      	bne.n	8003800 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b27      	ldr	r3, [pc, #156]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6593      	str	r3, [r2, #88]	; 0x58
 80037f0:	4b24      	ldr	r3, [pc, #144]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fc:	2301      	movs	r3, #1
 80037fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003800:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCC_OscConfig+0x508>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d118      	bne.n	800383e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380c:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <HAL_RCC_OscConfig+0x508>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <HAL_RCC_OscConfig+0x508>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003818:	f7fd fd64 	bl	80012e4 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fd fd60 	bl	80012e4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1b2      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <HAL_RCC_OscConfig+0x508>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> develop
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4d8>
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f6:	e029      	b.n	800384c <HAL_RCC_OscConfig+0x52c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d115      	bne.n	800382c <HAL_RCC_OscConfig+0x50c>
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a07      	ldr	r2, [pc, #28]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	4a03      	ldr	r2, [pc, #12]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x52c>
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	4b9a      	ldr	r3, [pc, #616]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	4a99      	ldr	r2, [pc, #612]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383c:	4b96      	ldr	r3, [pc, #600]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a95      	ldr	r2, [pc, #596]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d108      	bne.n	8003858 <HAL_RCC_OscConfig+0x4d8>
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003856:	e029      	b.n	80038ac <HAL_RCC_OscConfig+0x52c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b05      	cmp	r3, #5
 800385e:	d115      	bne.n	800388c <HAL_RCC_OscConfig+0x50c>
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	4a07      	ldr	r2, [pc, #28]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	4a03      	ldr	r2, [pc, #12]	; (8003884 <HAL_RCC_OscConfig+0x504>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003880:	e014      	b.n	80038ac <HAL_RCC_OscConfig+0x52c>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	40007000 	.word	0x40007000
 800388c:	4b9a      	ldr	r3, [pc, #616]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	4a99      	ldr	r2, [pc, #612]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800389c:	4b96      	ldr	r3, [pc, #600]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	4a95      	ldr	r2, [pc, #596]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 80038a4:	f023 0304 	bic.w	r3, r3, #4
 80038a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> develop
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< HEAD
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d016      	beq.n	8003882 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd fd16 	bl	8001284 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fd fd12 	bl	8001284 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e162      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003872:	4b89      	ldr	r3, [pc, #548]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ed      	beq.n	800385c <HAL_RCC_OscConfig+0x53c>
 8003880:	e015      	b.n	80038ae <HAL_RCC_OscConfig+0x58e>
=======
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d016      	beq.n	80038e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fd fd16 	bl	80012e4 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fd fd12 	bl	80012e4 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e162      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d2:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ed      	beq.n	80038bc <HAL_RCC_OscConfig+0x53c>
 80038e0:	e015      	b.n	800390e <HAL_RCC_OscConfig+0x58e>
>>>>>>> develop
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003882:	f7fd fcff 	bl	8001284 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fcfb 	bl	8001284 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e14b      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a0:	4b7d      	ldr	r3, [pc, #500]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ed      	bne.n	800388a <HAL_RCC_OscConfig+0x56a>
=======
 80038e2:	f7fd fcff 	bl	80012e4 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e8:	e00a      	b.n	8003900 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	f7fd fcfb 	bl	80012e4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e14b      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003900:	4b7d      	ldr	r3, [pc, #500]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1ed      	bne.n	80038ea <HAL_RCC_OscConfig+0x56a>
>>>>>>> develop
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b78      	ldr	r3, [pc, #480]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	4a77      	ldr	r2, [pc, #476]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038be:	6593      	str	r3, [r2, #88]	; 0x58
=======
 800390e:	7ffb      	ldrb	r3, [r7, #31]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003914:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	4a77      	ldr	r2, [pc, #476]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391e:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> develop
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03c      	beq.n	8003946 <HAL_RCC_OscConfig+0x626>
=======
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d03c      	beq.n	80039a6 <HAL_RCC_OscConfig+0x626>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01c      	beq.n	800390e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038d4:	4b70      	ldr	r3, [pc, #448]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038da:	4a6f      	ldr	r2, [pc, #444]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fcce 	bl	8001284 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ec:	f7fd fcca 	bl	8001284 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e11c      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fe:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <HAL_RCC_OscConfig+0x5cc>
 800390c:	e01b      	b.n	8003946 <HAL_RCC_OscConfig+0x626>
=======
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01c      	beq.n	800396e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003934:	4b70      	ldr	r3, [pc, #448]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393a:	4a6f      	ldr	r2, [pc, #444]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd fcce 	bl	80012e4 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800394c:	f7fd fcca 	bl	80012e4 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e11c      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800395e:	4b66      	ldr	r3, [pc, #408]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <HAL_RCC_OscConfig+0x5cc>
 800396c:	e01b      	b.n	80039a6 <HAL_RCC_OscConfig+0x626>
>>>>>>> develop
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 800390e:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003914:	4a60      	ldr	r2, [pc, #384]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fd fcb1 	bl	8001284 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003926:	f7fd fcad 	bl	8001284 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0ff      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003938:	4b57      	ldr	r3, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 800393a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ef      	bne.n	8003926 <HAL_RCC_OscConfig+0x606>
=======
 800396e:	4b62      	ldr	r3, [pc, #392]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003974:	4a60      	ldr	r2, [pc, #384]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fd fcb1 	bl	80012e4 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003986:	f7fd fcad 	bl	80012e4 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0ff      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003998:	4b57      	ldr	r3, [pc, #348]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 800399a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ef      	bne.n	8003986 <HAL_RCC_OscConfig+0x606>
>>>>>>> develop
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80f3 	beq.w	8003b36 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	2b02      	cmp	r3, #2
 8003956:	f040 80c9 	bne.w	8003aec <HAL_RCC_OscConfig+0x7cc>
=======
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80f3 	beq.w	8003b96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	f040 80c9 	bne.w	8003b4c <HAL_RCC_OscConfig+0x7cc>
>>>>>>> develop
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 800395a:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 0203 	and.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	429a      	cmp	r2, r3
 800396c:	d12c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	3b01      	subs	r3, #1
 800397a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d123      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d11b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d113      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
=======
 80039ba:	4b4f      	ldr	r3, [pc, #316]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0203 	and.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d12c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	3b01      	subs	r3, #1
 80039da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d123      	bne.n	8003a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d11b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d113      	bne.n	8003a28 <HAL_RCC_OscConfig+0x6a8>
>>>>>>> develop
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
<<<<<<< HEAD
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	3b01      	subs	r3, #1
 80039ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d109      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d06b      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d062      	beq.n	8003a94 <HAL_RCC_OscConfig+0x774>
=======
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d109      	bne.n	8003a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d06b      	beq.n	8003b00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d062      	beq.n	8003af4 <HAL_RCC_OscConfig+0x774>
>>>>>>> develop
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< HEAD
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x6be>
=======
 8003a2e:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x6be>
>>>>>>> develop
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
<<<<<<< HEAD
 80039da:	2301      	movs	r3, #1
 80039dc:	e0ac      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0ac      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80039de:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80039e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ea:	f7fd fc4b 	bl	8001284 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fd fc47 	bl	8001284 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e099      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x6d2>
=======
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a4a:	f7fd fc4b 	bl	80012e4 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd fc47 	bl	80012e4 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e099      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x6d2>
>>>>>>> develop
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <HAL_RCC_OscConfig+0x77c>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a2a:	0212      	lsls	r2, r2, #8
 8003a2c:	4311      	orrs	r1, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a32:	0852      	lsrs	r2, r2, #1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	0552      	lsls	r2, r2, #21
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a3e:	0852      	lsrs	r2, r2, #1
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0652      	lsls	r2, r2, #25
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a4a:	06d2      	lsls	r2, r2, #27
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4912      	ldr	r1, [pc, #72]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
=======
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCC_OscConfig+0x77c>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a8a:	0212      	lsls	r2, r2, #8
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0552      	lsls	r2, r2, #21
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a9e:	0852      	lsrs	r2, r2, #1
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	0652      	lsls	r2, r2, #25
 8003aa4:	4311      	orrs	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aaa:	06d2      	lsls	r2, r2, #27
 8003aac:	430a      	orrs	r2, r1
 8003aae:	4912      	ldr	r1, [pc, #72]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60cb      	str	r3, [r1, #12]
>>>>>>> develop
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a6c:	f7fd fc0a 	bl	8001284 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fc06 	bl	8001284 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e058      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a92:	e050      	b.n	8003b36 <HAL_RCC_OscConfig+0x816>
=======
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0f      	ldr	r2, [pc, #60]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a0c      	ldr	r2, [pc, #48]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003acc:	f7fd fc0a 	bl	80012e4 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fc06 	bl	80012e4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e058      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <HAL_RCC_OscConfig+0x778>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af2:	e050      	b.n	8003b96 <HAL_RCC_OscConfig+0x816>
>>>>>>> develop
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< HEAD
 8003a94:	2301      	movs	r3, #1
 8003a96:	e04f      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	019d808c 	.word	0x019d808c
=======
 8003af4:	2301      	movs	r3, #1
 8003af6:	e04f      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	019d808c 	.word	0x019d808c
>>>>>>> develop
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< HEAD
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d144      	bne.n	8003b36 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ac4:	f7fd fbde 	bl	8001284 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fbda 	bl	8001284 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e02c      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x7ac>
 8003aea:	e024      	b.n	8003b36 <HAL_RCC_OscConfig+0x816>
=======
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d144      	bne.n	8003b96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a23      	ldr	r2, [pc, #140]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b18:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b24:	f7fd fbde 	bl	80012e4 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd fbda 	bl	80012e4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e02c      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x7ac>
 8003b4a:	e024      	b.n	8003b96 <HAL_RCC_OscConfig+0x816>
>>>>>>> develop
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d01f      	beq.n	8003b32 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd fbc1 	bl	8001284 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fd fbbd 	bl	8001284 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e00f      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x7e6>
=======
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d01f      	beq.n	8003b92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5e:	f7fd fbc1 	bl	80012e4 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b66:	f7fd fbbd 	bl	80012e4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e00f      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x7e6>
>>>>>>> develop
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
<<<<<<< HEAD
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	4905      	ldr	r1, [pc, #20]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_OscConfig+0x824>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
 8003b30:	e001      	b.n	8003b36 <HAL_RCC_OscConfig+0x816>
=======
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	4905      	ldr	r1, [pc, #20]	; (8003ba0 <HAL_RCC_OscConfig+0x820>)
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_OscConfig+0x824>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60cb      	str	r3, [r1, #12]
 8003b90:	e001      	b.n	8003b96 <HAL_RCC_OscConfig+0x816>
>>>>>>> develop
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< HEAD
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
=======
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_RCC_OscConfig+0x818>
>>>>>>> develop
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	feeefffc 	.word	0xfeeefffc

08003b48 <HAL_RCC_ClockConfig>:
=======
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	feeefffc 	.word	0xfeeefffc

08003ba8 <HAL_RCC_ClockConfig>:
>>>>>>> develop
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
=======
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
>>>>>>> develop
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0e7      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
=======
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0e7      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> develop
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003b5c:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b72      	ldr	r3, [pc, #456]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4970      	ldr	r1, [pc, #448]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
=======
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d910      	bls.n	8003bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	4970      	ldr	r1, [pc, #448]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
>>>>>>> develop

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003b7a:	4b6e      	ldr	r3, [pc, #440]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0cf      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
=======
 8003bda:	4b6e      	ldr	r3, [pc, #440]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0cf      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> develop
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_RCC_ClockConfig+0x72>
=======
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x72>
>>>>>>> develop
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< HEAD
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d908      	bls.n	8003bba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba8:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4960      	ldr	r1, [pc, #384]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
=======
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	4b66      	ldr	r3, [pc, #408]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d908      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b63      	ldr	r3, [pc, #396]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4960      	ldr	r1, [pc, #384]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
>>>>>>> develop
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d04c      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x118>
=======
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d04c      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x118>
>>>>>>> develop
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	4b5a      	ldr	r3, [pc, #360]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d121      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0a6      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
=======
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	4b5a      	ldr	r3, [pc, #360]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d121      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0a6      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> develop
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	4b54      	ldr	r3, [pc, #336]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d115      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e09a      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
=======
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	4b54      	ldr	r3, [pc, #336]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d115      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e09a      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> develop
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< HEAD
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfe:	4b4e      	ldr	r3, [pc, #312]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e08e      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
=======
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e08e      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> develop
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< HEAD
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e086      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
=======
 8003c6e:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e086      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> develop
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4943      	ldr	r1, [pc, #268]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd fb28 	bl	8001284 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fd fb24 	bl	8001284 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e06e      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xf0>
=======
 8003c7e:	4b46      	ldr	r3, [pc, #280]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4943      	ldr	r1, [pc, #268]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c90:	f7fd fb28 	bl	80012e4 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fd fb24 	bl	80012e4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e06e      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf0>
>>>>>>> develop
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d208      	bcs.n	8003c8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	492b      	ldr	r1, [pc, #172]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
=======
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d208      	bcs.n	8003cee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	492b      	ldr	r1, [pc, #172]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
>>>>>>> develop
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d210      	bcs.n	8003cbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 0207 	bic.w	r2, r3, #7
 8003ca4:	4923      	ldr	r1, [pc, #140]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
=======
 8003cee:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d210      	bcs.n	8003d1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f023 0207 	bic.w	r2, r3, #7
 8003d04:	4923      	ldr	r1, [pc, #140]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
>>>>>>> develop

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e036      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
=======
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e036      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> develop
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4918      	ldr	r1, [pc, #96]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
=======
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4918      	ldr	r1, [pc, #96]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]
>>>>>>> develop
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4910      	ldr	r1, [pc, #64]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]
=======
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d009      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d48:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4910      	ldr	r1, [pc, #64]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]
>>>>>>> develop
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8003cfc:	f000 f824 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	490b      	ldr	r1, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x1f4>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1f8>)
 8003d1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1fc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd fa5f 	bl	80011e4 <HAL_InitTick>
 8003d26:	4603      	mov	r3, r0
 8003d28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	08005d2c 	.word	0x08005d2c
 8003d40:	20000010 	.word	0x20000010
 8003d44:	20000014 	.word	0x20000014

08003d48 <HAL_RCC_GetSysClockFreq>:
=======
 8003d5c:	f000 f824 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	490b      	ldr	r1, [pc, #44]	; (8003d9c <HAL_RCC_ClockConfig+0x1f4>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
 8003d78:	4a09      	ldr	r2, [pc, #36]	; (8003da0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_RCC_ClockConfig+0x1fc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd fa5f 	bl	8001244 <HAL_InitTick>
 8003d86:	4603      	mov	r3, r0
 8003d88:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40022000 	.word	0x40022000
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	08005d8c 	.word	0x08005d8c
 8003da0:	20000010 	.word	0x20000010
 8003da4:	20000014 	.word	0x20000014

08003da8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> develop
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
=======
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
>>>>>>> develop
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8003d56:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x34>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d121      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d11e      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x72>
=======
 8003db6:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc0:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x34>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d121      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d11e      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> develop
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< HEAD
 8003d7c:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e005      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 8003ddc:	4b34      	ldr	r3, [pc, #208]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e005      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> develop
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< HEAD
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003da4:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d102      	bne.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dcc:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003dce:	61bb      	str	r3, [r7, #24]
=======
 8003df8:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e04:	4a2b      	ldr	r2, [pc, #172]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e20:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	e004      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e2c:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e2e:	61bb      	str	r3, [r7, #24]
>>>>>>> develop
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d134      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0xf8>
=======
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d134      	bne.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> develop
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0xa6>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d003      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0xac>
 8003dec:	e005      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003df0:	617b      	str	r3, [r7, #20]
      break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003df6:	617b      	str	r3, [r7, #20]
      break;
 8003df8:	e002      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xb8>
=======
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d003      	beq.n	8003e4e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0xac>
 8003e4c:	e005      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e50:	617b      	str	r3, [r7, #20]
      break;
 8003e52:	e005      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e56:	617b      	str	r3, [r7, #20]
      break;
 8003e58:	e002      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> develop

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< HEAD
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	617b      	str	r3, [r7, #20]
      break;
 8003dfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e00:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	fb03 f202 	mul.w	r2, r3, r2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0e5b      	lsrs	r3, r3, #25
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	3301      	adds	r3, #1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e40:	69bb      	ldr	r3, [r7, #24]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	08005d44 	.word	0x08005d44
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	007a1200 	.word	0x007a1200

08003e60 <HAL_RCC_GetHCLKFreq>:
=======
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	617b      	str	r3, [r7, #20]
      break;
 8003e5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e60:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	fb03 f202 	mul.w	r2, r3, r2
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	0e5b      	lsrs	r3, r3, #25
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	3301      	adds	r3, #1
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08005da4 	.word	0x08005da4
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200

08003ec0 <HAL_RCC_GetHCLKFreq>:
>>>>>>> develop
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000010 	.word	0x20000010

08003e78 <HAL_RCC_GetPCLK1Freq>:
=======
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000010 	.word	0x20000010

08003ed8 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> develop
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4904      	ldr	r1, [pc, #16]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	08005d3c 	.word	0x08005d3c

08003ea4 <HAL_RCC_GetPCLK2Freq>:
=======
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	08005d9c 	.word	0x08005d9c

08003f04 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> develop
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ea8:	f7ff ffda 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0adb      	lsrs	r3, r3, #11
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4904      	ldr	r1, [pc, #16]	; (8003ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08005d3c 	.word	0x08005d3c

08003ed0 <RCC_SetFlashLatencyFromMSIRange>:
=======
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f08:	f7ff ffda 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0adb      	lsrs	r3, r3, #11
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4904      	ldr	r1, [pc, #16]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08005d9c 	.word	0x08005d9c

08003f30 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> develop
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< HEAD
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003edc:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ee8:	f7ff f9b6 	bl	8003258 <HAL_PWREx_GetVoltageRange>
 8003eec:	6178      	str	r0, [r7, #20]
 8003eee:	e014      	b.n	8003f1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f48:	f7ff f9b6 	bl	80032b8 <HAL_PWREx_GetVoltageRange>
 8003f4c:	6178      	str	r0, [r7, #20]
 8003f4e:	e014      	b.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> develop
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	4a24      	ldr	r2, [pc, #144]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6593      	str	r3, [r2, #88]	; 0x58
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f08:	f7ff f9a6 	bl	8003258 <HAL_PWREx_GetVoltageRange>
 8003f0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f20:	d10b      	bne.n	8003f3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b80      	cmp	r3, #128	; 0x80
 8003f26:	d919      	bls.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2ba0      	cmp	r3, #160	; 0xa0
 8003f2c:	d902      	bls.n	8003f34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f2e:	2302      	movs	r3, #2
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e013      	b.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f5c:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f68:	f7ff f9a6 	bl	80032b8 <HAL_PWREx_GetVoltageRange>
 8003f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f80:	d10b      	bne.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b80      	cmp	r3, #128	; 0x80
 8003f86:	d919      	bls.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8003f8c:	d902      	bls.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f8e:	2302      	movs	r3, #2
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	e013      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> develop
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< HEAD
 8003f34:	2301      	movs	r3, #1
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	e010      	b.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8003f94:	2301      	movs	r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	e010      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> develop
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
<<<<<<< HEAD
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d902      	bls.n	8003f46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f40:	2303      	movs	r3, #3
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	e00a      	b.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b80      	cmp	r3, #128	; 0x80
 8003f9e:	d902      	bls.n	8003fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e00a      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> develop
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
<<<<<<< HEAD
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b80      	cmp	r3, #128	; 0x80
 8003f4a:	d102      	bne.n	8003f52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	e004      	b.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b70      	cmp	r3, #112	; 0x70
 8003f56:	d101      	bne.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f58:	2301      	movs	r3, #1
 8003f5a:	613b      	str	r3, [r7, #16]
=======
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d102      	bne.n	8003fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fac:	2302      	movs	r3, #2
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	e004      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b70      	cmp	r3, #112	; 0x70
 8003fb6:	d101      	bne.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb8:	2301      	movs	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
>>>>>>> develop
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< HEAD
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 0207 	bic.w	r2, r3, #7
 8003f64:	4909      	ldr	r1, [pc, #36]	; (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]
=======
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 0207 	bic.w	r2, r3, #7
 8003fc4:	4909      	ldr	r1, [pc, #36]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
>>>>>>> develop

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< HEAD
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d001      	beq.n	8003f7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40022000 	.word	0x40022000

08003f90 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8003fcc:	4b07      	ldr	r3, [pc, #28]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40022000 	.word	0x40022000

08003ff0 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> develop
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f98:	2300      	movs	r3, #0
 8003f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	74bb      	strb	r3, [r7, #18]
=======
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	74bb      	strb	r3, [r7, #18]
>>>>>>> develop
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d031      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x80>
=======
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004008:	2b00      	cmp	r3, #0
 800400a:	d031      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x80>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
<<<<<<< HEAD
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fb4:	d01a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fba:	d814      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
=======
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004014:	d01a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004016:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800401a:	d814      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d009      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004024:	d10f      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x56>
>>>>>>> develop
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
<<<<<<< HEAD
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	4a5c      	ldr	r2, [pc, #368]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd2:	e00c      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
=======
 8004026:	4b5d      	ldr	r3, [pc, #372]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4a5c      	ldr	r2, [pc, #368]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004032:	e00c      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5e>
>>>>>>> develop

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f9f0 	bl	80043c0 <RCCEx_PLLSAI1_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fe4:	e003      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
=======
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f9f0 	bl	8004420 <RCCEx_PLLSAI1_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5e>
>>>>>>> develop
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	74fb      	strb	r3, [r7, #19]
      break;
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff4:	4b51      	ldr	r3, [pc, #324]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	494e      	ldr	r1, [pc, #312]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800400a:	e001      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x80>
=======
 8004046:	2301      	movs	r3, #1
 8004048:	74fb      	strb	r3, [r7, #19]
      break;
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800404c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404e:	7cfb      	ldrb	r3, [r7, #19]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004054:	4b51      	ldr	r3, [pc, #324]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	494e      	ldr	r1, [pc, #312]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800406a:	e001      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x80>
>>>>>>> develop
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	74bb      	strb	r3, [r7, #18]
=======
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	74bb      	strb	r3, [r7, #18]
>>>>>>> develop
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 809e 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	747b      	strb	r3, [r7, #17]
=======
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 809e 	beq.w	80041ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	747b      	strb	r3, [r7, #17]
>>>>>>> develop

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< HEAD
 8004022:	4b46      	ldr	r3, [pc, #280]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b40      	ldr	r3, [pc, #256]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	4a3f      	ldr	r2, [pc, #252]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004042:	6593      	str	r3, [r2, #88]	; 0x58
 8004044:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004050:	2301      	movs	r3, #1
 8004052:	747b      	strb	r3, [r7, #17]
=======
 8004082:	4b46      	ldr	r3, [pc, #280]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004098:	4b40      	ldr	r3, [pc, #256]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	4a3f      	ldr	r2, [pc, #252]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a2:	6593      	str	r3, [r2, #88]	; 0x58
 80040a4:	4b3d      	ldr	r3, [pc, #244]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b0:	2301      	movs	r3, #1
 80040b2:	747b      	strb	r3, [r7, #17]
>>>>>>> develop
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 8004054:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a39      	ldr	r2, [pc, #228]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800405a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004060:	f7fd f910 	bl	8001284 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004066:	e009      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004068:	f7fd f90c 	bl	8001284 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d902      	bls.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	74fb      	strb	r3, [r7, #19]
        break;
 800407a:	e005      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800407c:	4b30      	ldr	r3, [pc, #192]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ef      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd8>
=======
 80040b4:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a39      	ldr	r2, [pc, #228]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040c0:	f7fd f910 	bl	80012e4 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040c6:	e009      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c8:	f7fd f90c 	bl	80012e4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d902      	bls.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	74fb      	strb	r3, [r7, #19]
        break;
 80040da:	e005      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040dc:	4b30      	ldr	r3, [pc, #192]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ef      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
>>>>>>> develop
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d15a      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800408e:	4b2b      	ldr	r3, [pc, #172]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004098:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01e      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d019      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	4a1b      	ldr	r2, [pc, #108]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040d6:	4a19      	ldr	r2, [pc, #100]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
=======
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d15a      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040ee:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	429a      	cmp	r2, r3
 8004108:	d019      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004114:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004116:	4b21      	ldr	r3, [pc, #132]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800411e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412c:	4a1b      	ldr	r2, [pc, #108]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800412e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004136:	4a19      	ldr	r2, [pc, #100]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
>>>>>>> develop
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d016      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd f8cc 	bl	8001284 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ee:	e00b      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f0:	f7fd f8c8 	bl	8001284 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d902      	bls.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	74fb      	strb	r3, [r7, #19]
            break;
 8004106:	e006      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ec      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
=======
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d016      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7fd f8cc 	bl	80012e4 <HAL_GetTick>
 800414c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800414e:	e00b      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7fd f8c8 	bl	80012e4 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d902      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	74fb      	strb	r3, [r7, #19]
            break;
 8004166:	e006      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ec      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x160>
>>>>>>> develop
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< HEAD
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	4904      	ldr	r1, [pc, #16]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004132:	e009      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
=======
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	4904      	ldr	r1, [pc, #16]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004192:	e009      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
>>>>>>> develop
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	40007000 	.word	0x40007000
=======
 8004194:	7cfb      	ldrb	r3, [r7, #19]
 8004196:	74bb      	strb	r3, [r7, #18]
 8004198:	e006      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	40007000 	.word	0x40007000
>>>>>>> develop
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8004144:	7cfb      	ldrb	r3, [r7, #19]
 8004146:	74bb      	strb	r3, [r7, #18]
=======
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
>>>>>>> develop
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8004148:	7c7b      	ldrb	r3, [r7, #17]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d105      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414e:	4b9b      	ldr	r3, [pc, #620]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	4a9a      	ldr	r2, [pc, #616]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004158:	6593      	str	r3, [r2, #88]	; 0x58
=======
 80041a8:	7c7b      	ldrb	r3, [r7, #17]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d105      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ae:	4b9b      	ldr	r3, [pc, #620]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	4a9a      	ldr	r2, [pc, #616]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b8:	6593      	str	r3, [r2, #88]	; 0x58
>>>>>>> develop
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
=======
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8004166:	4b95      	ldr	r3, [pc, #596]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f023 0203 	bic.w	r2, r3, #3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4991      	ldr	r1, [pc, #580]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80041c6:	4b95      	ldr	r3, [pc, #596]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f023 0203 	bic.w	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4991      	ldr	r1, [pc, #580]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x20e>
=======
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8004188:	4b8c      	ldr	r3, [pc, #560]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 020c 	bic.w	r2, r3, #12
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	4989      	ldr	r1, [pc, #548]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80041e8:	4b8c      	ldr	r3, [pc, #560]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f023 020c 	bic.w	r2, r3, #12
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	4989      	ldr	r1, [pc, #548]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
=======
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x230>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 80041aa:	4b84      	ldr	r3, [pc, #528]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	4980      	ldr	r1, [pc, #512]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800420a:	4b84      	ldr	r3, [pc, #528]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	4980      	ldr	r1, [pc, #512]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
=======
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x252>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 80041cc:	4b7b      	ldr	r3, [pc, #492]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	4978      	ldr	r1, [pc, #480]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 800422c:	4b7b      	ldr	r3, [pc, #492]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	4978      	ldr	r1, [pc, #480]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ee:	4b73      	ldr	r3, [pc, #460]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	496f      	ldr	r1, [pc, #444]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424e:	4b73      	ldr	r3, [pc, #460]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	496f      	ldr	r1, [pc, #444]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< HEAD
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004210:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4967      	ldr	r1, [pc, #412]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004270:	4b6a      	ldr	r3, [pc, #424]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4967      	ldr	r1, [pc, #412]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
=======
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8004232:	4b62      	ldr	r3, [pc, #392]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	495e      	ldr	r1, [pc, #376]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004292:	4b62      	ldr	r3, [pc, #392]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	495e      	ldr	r1, [pc, #376]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x2da>
=======
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8004254:	4b59      	ldr	r3, [pc, #356]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	4956      	ldr	r1, [pc, #344]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80042b4:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	4956      	ldr	r1, [pc, #344]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
=======
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8004276:	4b51      	ldr	r3, [pc, #324]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	494d      	ldr	r1, [pc, #308]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80042d6:	4b51      	ldr	r3, [pc, #324]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	494d      	ldr	r1, [pc, #308]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
<<<<<<< HEAD
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d028      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004298:	4b48      	ldr	r3, [pc, #288]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a6:	4945      	ldr	r1, [pc, #276]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b8:	4b40      	ldr	r3, [pc, #256]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a3f      	ldr	r2, [pc, #252]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c2:	60d3      	str	r3, [r2, #12]
 80042c4:	e011      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
=======
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d028      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042f8:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004306:	4945      	ldr	r1, [pc, #276]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004316:	d106      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004318:	4b40      	ldr	r3, [pc, #256]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a3f      	ldr	r2, [pc, #252]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800431e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004322:	60d3      	str	r3, [r2, #12]
 8004324:	e011      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x35a>
>>>>>>> develop
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ce:	d10c      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f872 	bl	80043c0 <RCCEx_PLLSAI1_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	74bb      	strb	r3, [r7, #18]
=======
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800432e:	d10c      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	2101      	movs	r1, #1
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f872 	bl	8004420 <RCCEx_PLLSAI1_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	74bb      	strb	r3, [r7, #18]
>>>>>>> develop
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d028      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f6:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004304:	492d      	ldr	r1, [pc, #180]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004314:	d106      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004316:	4b29      	ldr	r3, [pc, #164]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800431c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004320:	60d3      	str	r3, [r2, #12]
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	2101      	movs	r1, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f843 	bl	80043c0 <RCCEx_PLLSAI1_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
=======
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d028      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004356:	4b31      	ldr	r3, [pc, #196]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004364:	492d      	ldr	r1, [pc, #180]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004374:	d106      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a28      	ldr	r2, [pc, #160]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800437c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004380:	60d3      	str	r3, [r2, #12]
 8004382:	e011      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3304      	adds	r3, #4
 8004392:	2101      	movs	r1, #1
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f843 	bl	8004420 <RCCEx_PLLSAI1_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80043a4:	7cfb      	ldrb	r3, [r7, #19]
 80043a6:	74bb      	strb	r3, [r7, #18]
>>>>>>> develop
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01c      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
=======
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01c      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x3fe>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	4916      	ldr	r1, [pc, #88]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004372:	d10c      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f820 	bl	80043c0 <RCCEx_PLLSAI1_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	74bb      	strb	r3, [r7, #18]
=======
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	4916      	ldr	r1, [pc, #88]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d2:	d10c      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f820 	bl	8004420 <RCCEx_PLLSAI1_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80043ea:	7cfb      	ldrb	r3, [r7, #19]
 80043ec:	74bb      	strb	r3, [r7, #18]
>>>>>>> develop
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
<<<<<<< HEAD
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
=======
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x420>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
<<<<<<< HEAD
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	4904      	ldr	r1, [pc, #16]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 80043fa:	4b08      	ldr	r3, [pc, #32]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	4904      	ldr	r1, [pc, #16]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> develop
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< HEAD
 80043b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000

080043c0 <RCCEx_PLLSAI1_Config>:
=======
 8004410:	7cbb      	ldrb	r3, [r7, #18]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000

08004420 <RCCEx_PLLSAI1_Config>:
>>>>>>> develop
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
<<<<<<< HEAD
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
=======
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	73fb      	strb	r3, [r7, #15]
>>>>>>> develop
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 80043ce:	4b74      	ldr	r3, [pc, #464]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d018      	beq.n	800440c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043da:	4b71      	ldr	r3, [pc, #452]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0203 	and.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d10d      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
       ||
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043f2:	4b6b      	ldr	r3, [pc, #428]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	091b      	lsrs	r3, r3, #4
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
       ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d047      	beq.n	8004496 <RCCEx_PLLSAI1_Config+0xd6>
=======
 800442e:	4b74      	ldr	r3, [pc, #464]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d018      	beq.n	800446c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800443a:	4b71      	ldr	r3, [pc, #452]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d10d      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
       ||
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004452:	4b6b      	ldr	r3, [pc, #428]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
       ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d047      	beq.n	80044f6 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> develop
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e044      	b.n	8004496 <RCCEx_PLLSAI1_Config+0xd6>
=======
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
 800446a:	e044      	b.n	80044f6 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> develop
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
<<<<<<< HEAD
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d018      	beq.n	8004446 <RCCEx_PLLSAI1_Config+0x86>
 8004414:	2b03      	cmp	r3, #3
 8004416:	d825      	bhi.n	8004464 <RCCEx_PLLSAI1_Config+0xa4>
 8004418:	2b01      	cmp	r3, #1
 800441a:	d002      	beq.n	8004422 <RCCEx_PLLSAI1_Config+0x62>
 800441c:	2b02      	cmp	r3, #2
 800441e:	d009      	beq.n	8004434 <RCCEx_PLLSAI1_Config+0x74>
 8004420:	e020      	b.n	8004464 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004422:	4b5f      	ldr	r3, [pc, #380]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11d      	bne.n	800446a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004432:	e01a      	b.n	800446a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004434:	4b5a      	ldr	r3, [pc, #360]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004444:	e013      	b.n	800446e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004446:	4b56      	ldr	r3, [pc, #344]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004452:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004462:	e006      	b.n	8004472 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      break;
 8004468:	e004      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800446a:	bf00      	nop
 800446c:	e002      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004472:	bf00      	nop
    }

    if(status == HAL_OK)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10d      	bne.n	8004496 <RCCEx_PLLSAI1_Config+0xd6>
=======
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d018      	beq.n	80044a6 <RCCEx_PLLSAI1_Config+0x86>
 8004474:	2b03      	cmp	r3, #3
 8004476:	d825      	bhi.n	80044c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004478:	2b01      	cmp	r3, #1
 800447a:	d002      	beq.n	8004482 <RCCEx_PLLSAI1_Config+0x62>
 800447c:	2b02      	cmp	r3, #2
 800447e:	d009      	beq.n	8004494 <RCCEx_PLLSAI1_Config+0x74>
 8004480:	e020      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004482:	4b5f      	ldr	r3, [pc, #380]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d11d      	bne.n	80044ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004492:	e01a      	b.n	80044ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004494:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d116      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a4:	e013      	b.n	80044ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044a6:	4b56      	ldr	r3, [pc, #344]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10f      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044b2:	4b53      	ldr	r3, [pc, #332]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044c2:	e006      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      break;
 80044c8:	e004      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10d      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> develop
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< HEAD
 800447a:	4b49      	ldr	r3, [pc, #292]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	3b01      	subs	r3, #1
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	430b      	orrs	r3, r1
 8004490:	4943      	ldr	r1, [pc, #268]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004492:	4313      	orrs	r3, r2
 8004494:	60cb      	str	r3, [r1, #12]
=======
 80044da:	4b49      	ldr	r3, [pc, #292]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6819      	ldr	r1, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	430b      	orrs	r3, r1
 80044f0:	4943      	ldr	r1, [pc, #268]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60cb      	str	r3, [r1, #12]
>>>>>>> develop
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d17c      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800449c:	4b40      	ldr	r3, [pc, #256]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3f      	ldr	r2, [pc, #252]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fc feec 	bl	8001284 <HAL_GetTick>
 80044ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044ae:	e009      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044b0:	f7fc fee8 	bl	8001284 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d902      	bls.n	80044c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	73fb      	strb	r3, [r7, #15]
        break;
 80044c2:	e005      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044c4:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ef      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0xf0>
=======
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d17c      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044fc:	4b40      	ldr	r3, [pc, #256]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a3f      	ldr	r2, [pc, #252]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004502:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004508:	f7fc feec 	bl	80012e4 <HAL_GetTick>
 800450c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800450e:	e009      	b.n	8004524 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004510:	f7fc fee8 	bl	80012e4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d902      	bls.n	8004524 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	73fb      	strb	r3, [r7, #15]
        break;
 8004522:	e005      	b.n	8004530 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004524:	4b36      	ldr	r3, [pc, #216]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ef      	bne.n	8004510 <RCCEx_PLLSAI1_Config+0xf0>
>>>>>>> develop
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d15f      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d110      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0x13e>
=======
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d15f      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d110      	bne.n	800455e <RCCEx_PLLSAI1_Config+0x13e>
>>>>>>> develop
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 80044dc:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80044e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6892      	ldr	r2, [r2, #8]
 80044ec:	0211      	lsls	r1, r2, #8
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68d2      	ldr	r2, [r2, #12]
 80044f2:	06d2      	lsls	r2, r2, #27
 80044f4:	430a      	orrs	r2, r1
 80044f6:	492a      	ldr	r1, [pc, #168]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	610b      	str	r3, [r1, #16]
 80044fc:	e027      	b.n	800454e <RCCEx_PLLSAI1_Config+0x18e>
=======
 800453c:	4b30      	ldr	r3, [pc, #192]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004544:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6892      	ldr	r2, [r2, #8]
 800454c:	0211      	lsls	r1, r2, #8
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68d2      	ldr	r2, [r2, #12]
 8004552:	06d2      	lsls	r2, r2, #27
 8004554:	430a      	orrs	r2, r1
 8004556:	492a      	ldr	r1, [pc, #168]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	610b      	str	r3, [r1, #16]
 800455c:	e027      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x18e>
>>>>>>> develop
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< HEAD
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d112      	bne.n	800452a <RCCEx_PLLSAI1_Config+0x16a>
=======
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d112      	bne.n	800458a <RCCEx_PLLSAI1_Config+0x16a>
>>>>>>> develop
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 8004504:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800450c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6892      	ldr	r2, [r2, #8]
 8004514:	0211      	lsls	r1, r2, #8
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6912      	ldr	r2, [r2, #16]
 800451a:	0852      	lsrs	r2, r2, #1
 800451c:	3a01      	subs	r2, #1
 800451e:	0552      	lsls	r2, r2, #21
 8004520:	430a      	orrs	r2, r1
 8004522:	491f      	ldr	r1, [pc, #124]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004524:	4313      	orrs	r3, r2
 8004526:	610b      	str	r3, [r1, #16]
 8004528:	e011      	b.n	800454e <RCCEx_PLLSAI1_Config+0x18e>
=======
 8004564:	4b26      	ldr	r3, [pc, #152]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800456c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	0211      	lsls	r1, r2, #8
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6912      	ldr	r2, [r2, #16]
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0552      	lsls	r2, r2, #21
 8004580:	430a      	orrs	r2, r1
 8004582:	491f      	ldr	r1, [pc, #124]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	610b      	str	r3, [r1, #16]
 8004588:	e011      	b.n	80045ae <RCCEx_PLLSAI1_Config+0x18e>
>>>>>>> develop
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 800452a:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004532:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6892      	ldr	r2, [r2, #8]
 800453a:	0211      	lsls	r1, r2, #8
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6952      	ldr	r2, [r2, #20]
 8004540:	0852      	lsrs	r2, r2, #1
 8004542:	3a01      	subs	r2, #1
 8004544:	0652      	lsls	r2, r2, #25
 8004546:	430a      	orrs	r2, r1
 8004548:	4915      	ldr	r1, [pc, #84]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	610b      	str	r3, [r1, #16]
=======
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004592:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6892      	ldr	r2, [r2, #8]
 800459a:	0211      	lsls	r1, r2, #8
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6952      	ldr	r2, [r2, #20]
 80045a0:	0852      	lsrs	r2, r2, #1
 80045a2:	3a01      	subs	r2, #1
 80045a4:	0652      	lsls	r2, r2, #25
 80045a6:	430a      	orrs	r2, r1
 80045a8:	4915      	ldr	r1, [pc, #84]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	610b      	str	r3, [r1, #16]
>>>>>>> develop
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
<<<<<<< HEAD
 800454e:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004558:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fc fe93 	bl	8001284 <HAL_GetTick>
 800455e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004560:	e009      	b.n	8004576 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004562:	f7fc fe8f 	bl	8001284 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d902      	bls.n	8004576 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	73fb      	strb	r3, [r7, #15]
          break;
 8004574:	e005      	b.n	8004582 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0ef      	beq.n	8004562 <RCCEx_PLLSAI1_Config+0x1a2>
=======
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fc fe93 	bl	80012e4 <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c0:	e009      	b.n	80045d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c2:	f7fc fe8f 	bl	80012e4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d902      	bls.n	80045d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	73fb      	strb	r3, [r7, #15]
          break;
 80045d4:	e005      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ef      	beq.n	80045c2 <RCCEx_PLLSAI1_Config+0x1a2>
>>>>>>> develop
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	4903      	ldr	r1, [pc, #12]	; (80045a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004592:	4313      	orrs	r3, r2
 8004594:	610b      	str	r3, [r1, #16]
=======
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]
>>>>>>> develop
      }
    }
  }

  return status;
<<<<<<< HEAD
 8004596:	7bfb      	ldrb	r3, [r7, #15]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000

080045a4 <HAL_UART_Init>:
=======
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000

08004604 <HAL_UART_Init>:
>>>>>>> develop
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e040      	b.n	8004638 <HAL_UART_Init+0x94>
=======
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e040      	b.n	8004698 <HAL_UART_Init+0x94>
>>>>>>> develop
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
=======
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
>>>>>>> develop

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fd10 	bl	8000fec <HAL_UART_MspInit>
=======
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fc fd10 	bl	800104c <HAL_UART_MspInit>
>>>>>>> develop
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
=======
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	; 0x24
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]
>>>>>>> develop

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fe7e 	bl	80052ec <UART_AdvFeatureConfig>
=======
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fe7e 	bl	800534c <UART_AdvFeatureConfig>
>>>>>>> develop
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fc21 	bl	8004e38 <UART_SetConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e01b      	b.n	8004638 <HAL_UART_Init+0x94>
=======
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fc21 	bl	8004e98 <UART_SetConfig>
 8004656:	4603      	mov	r3, r0
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e01b      	b.n	8004698 <HAL_UART_Init+0x94>
>>>>>>> develop
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800460e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800461e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fefd 	bl	8005430 <UART_CheckIdleState>
 8004636:	4603      	mov	r3, r0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UART_Transmit>:
=======
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800466e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800467e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fefd 	bl	8005490 <UART_CheckIdleState>
 8004696:	4603      	mov	r3, r0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_UART_Transmit>:
>>>>>>> develop
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	80fb      	strh	r3, [r7, #6]
=======
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	80fb      	strh	r3, [r7, #6]
>>>>>>> develop
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004654:	2b20      	cmp	r3, #32
 8004656:	d178      	bne.n	800474a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_UART_Transmit+0x24>
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e071      	b.n	800474c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2221      	movs	r2, #33	; 0x21
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fc fe05 	bl	8001284 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Transmit+0x68>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Transmit+0x70>
=======
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d178      	bne.n	80047aa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_UART_Transmit+0x24>
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e071      	b.n	80047ac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046d6:	f7fc fe05 	bl	80012e4 <HAL_GetTick>
 80046da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f4:	d108      	bne.n	8004708 <HAL_UART_Transmit+0x68>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e003      	b.n	8004710 <HAL_UART_Transmit+0x70>
>>>>>>> develop
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b0:	e030      	b.n	8004714 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 ff5f 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e03c      	b.n	800474c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	881a      	ldrh	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e4:	b292      	uxth	r2, r2
 80046e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	3302      	adds	r3, #2
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e008      	b.n	8004702 <HAL_UART_Transmit+0xc2>
=======
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004710:	e030      	b.n	8004774 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	2180      	movs	r1, #128	; 0x80
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 ff5f 	bl	80055e0 <UART_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e03c      	b.n	80047ac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	881a      	ldrh	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004744:	b292      	uxth	r2, r2
 8004746:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	3302      	adds	r3, #2
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	e008      	b.n	8004762 <HAL_UART_Transmit+0xc2>
>>>>>>> develop
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	b292      	uxth	r2, r2
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3301      	adds	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1c8      	bne.n	80046b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2200      	movs	r2, #0
 8004728:	2140      	movs	r1, #64	; 0x40
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 ff28 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e005      	b.n	800474c <HAL_UART_Transmit+0x10c>
=======
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b292      	uxth	r2, r2
 800475a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	3301      	adds	r3, #1
 8004760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1c8      	bne.n	8004712 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2200      	movs	r2, #0
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 ff28 	bl	80055e0 <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d004      	beq.n	80047a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e005      	b.n	80047ac <HAL_UART_Transmit+0x10c>
>>>>>>> develop
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_UART_Transmit+0x10c>
=======
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_UART_Transmit+0x10c>
>>>>>>> develop
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_Receive_IT>:
=======
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_UART_Receive_IT>:
>>>>>>> develop
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	2b20      	cmp	r3, #32
 800476a:	d137      	bne.n	80047dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_UART_Receive_IT+0x24>
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e030      	b.n	80047de <HAL_UART_Receive_IT+0x8a>
=======
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d137      	bne.n	800483c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_UART_Receive_IT+0x24>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e030      	b.n	800483e <HAL_UART_Receive_IT+0x8a>
>>>>>>> develop
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_UART_Receive_IT+0x94>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d01f      	beq.n	80047cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d018      	beq.n	80047cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	617b      	str	r3, [r7, #20]
=======
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a18      	ldr	r2, [pc, #96]	; (8004848 <HAL_UART_Receive_IT+0x94>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d01f      	beq.n	800482c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d018      	beq.n	800482c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	617b      	str	r3, [r7, #20]
>>>>>>> develop
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	613b      	str	r3, [r7, #16]
   return(result);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	623b      	str	r3, [r7, #32]
 80047ba:	61fa      	str	r2, [r7, #28]
=======
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	613b      	str	r3, [r7, #16]
   return(result);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	623b      	str	r3, [r7, #32]
 800481a:	61fa      	str	r2, [r7, #28]
>>>>>>> develop
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e6      	bne.n	800479a <HAL_UART_Receive_IT+0x46>
=======
 800481c:	69f9      	ldr	r1, [r7, #28]
 800481e:	6a3a      	ldr	r2, [r7, #32]
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	61bb      	str	r3, [r7, #24]
   return(result);
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <HAL_UART_Receive_IT+0x46>
>>>>>>> develop
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
<<<<<<< HEAD
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 ff42 	bl	800565c <UART_Start_Receive_IT>
 80047d8:	4603      	mov	r3, r0
 80047da:	e000      	b.n	80047de <HAL_UART_Receive_IT+0x8a>
=======
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	461a      	mov	r2, r3
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 ff42 	bl	80056bc <UART_Start_Receive_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	e000      	b.n	800483e <HAL_UART_Receive_IT+0x8a>
>>>>>>> develop
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3728      	adds	r7, #40	; 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40008000 	.word	0x40008000

080047ec <HAL_UART_IRQHandler>:
=======
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3728      	adds	r7, #40	; 0x28
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40008000 	.word	0x40008000

0800484c <HAL_UART_IRQHandler>:
>>>>>>> develop
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0ba      	sub	sp, #232	; 0xe8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
=======
 800484c:	b580      	push	{r7, lr}
 800484e:	b0ba      	sub	sp, #232	; 0xe8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
>>>>>>> develop

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 8004812:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004816:	f640 030f 	movw	r3, #2063	; 0x80f
 800481a:	4013      	ands	r3, r2
 800481c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d115      	bne.n	8004854 <HAL_UART_IRQHandler+0x68>
=======
 8004872:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004876:	f640 030f 	movw	r3, #2063	; 0x80f
 800487a:	4013      	ands	r3, r2
 800487c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d115      	bne.n	80048b4 <HAL_UART_IRQHandler+0x68>
>>>>>>> develop
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
<<<<<<< HEAD
 8004828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00f      	beq.n	8004854 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 82ca 	beq.w	8004dde <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
      }
      return;
 8004852:	e2c4      	b.n	8004dde <HAL_UART_IRQHandler+0x5f2>
=======
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00f      	beq.n	80048b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 82ca 	beq.w	8004e3e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
      }
      return;
 80048b2:	e2c4      	b.n	8004e3e <HAL_UART_IRQHandler+0x5f2>
>>>>>>> develop
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
<<<<<<< HEAD
 8004854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8117 	beq.w	8004a8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800485e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800486a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800486e:	4b85      	ldr	r3, [pc, #532]	; (8004a84 <HAL_UART_IRQHandler+0x298>)
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 810a 	beq.w	8004a8c <HAL_UART_IRQHandler+0x2a0>
=======
 80048b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8117 	beq.w	8004aec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048ce:	4b85      	ldr	r3, [pc, #532]	; (8004ae4 <HAL_UART_IRQHandler+0x298>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 810a 	beq.w	8004aec <HAL_UART_IRQHandler+0x2a0>
>>>>>>> develop
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
<<<<<<< HEAD
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <HAL_UART_IRQHandler+0xbc>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d011      	beq.n	8004908 <HAL_UART_IRQHandler+0xbc>
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2201      	movs	r2, #1
 80048f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> develop
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d011      	beq.n	80048d8 <HAL_UART_IRQHandler+0xec>
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2202      	movs	r2, #2
 80048c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ce:	f043 0204 	orr.w	r2, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d011      	beq.n	8004938 <HAL_UART_IRQHandler+0xec>
 8004914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2202      	movs	r2, #2
 8004926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492e:	f043 0204 	orr.w	r2, r3, #4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> develop
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d011      	beq.n	8004908 <HAL_UART_IRQHandler+0x11c>
 80048e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2204      	movs	r2, #4
 80048f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fe:	f043 0202 	orr.w	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d011      	beq.n	8004968 <HAL_UART_IRQHandler+0x11c>
 8004944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2204      	movs	r2, #4
 8004956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> develop
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d017      	beq.n	8004944 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004924:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00b      	beq.n	8004944 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2208      	movs	r2, #8
 8004932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493a:	f043 0208 	orr.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d017      	beq.n	80049a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004984:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2208      	movs	r2, #8
 8004992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	f043 0208 	orr.w	r2, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> develop
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 8004944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <HAL_UART_IRQHandler+0x18a>
 8004950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 80049a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d012      	beq.n	80049d6 <HAL_UART_IRQHandler+0x18a>
 80049b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00c      	beq.n	80049d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> develop
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8230 	beq.w	8004de2 <HAL_UART_IRQHandler+0x5f6>
=======
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8230 	beq.w	8004e42 <HAL_UART_IRQHandler+0x5f6>
>>>>>>> develop
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
<<<<<<< HEAD
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	4798      	blx	r3
=======
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
>>>>>>> develop
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d005      	beq.n	80049ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04f      	beq.n	8004a6e <HAL_UART_IRQHandler+0x282>
=======
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d04f      	beq.n	8004ace <HAL_UART_IRQHandler+0x282>
>>>>>>> develop
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 ff0a 	bl	80057e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d141      	bne.n	8004a66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1d9      	bne.n	80049e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_UART_IRQHandler+0x272>
=======
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 ff0a 	bl	8005848 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d141      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a7e:	e841 2300 	strex	r3, r2, [r1]
 8004a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1d9      	bne.n	8004a42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d013      	beq.n	8004abe <HAL_UART_IRQHandler+0x272>
>>>>>>> develop
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3a:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <HAL_UART_IRQHandler+0x29c>)
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe f956 	bl	8002cf4 <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e00f      	b.n	8004a7e <HAL_UART_IRQHandler+0x292>
=======
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9a:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_UART_IRQHandler+0x29c>)
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe f956 	bl	8002d54 <HAL_DMA_Abort_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d017      	beq.n	8004ade <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	e00f      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9d4 	bl	8004e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	e00b      	b.n	8004a7e <HAL_UART_IRQHandler+0x292>
=======
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9d4 	bl	8004e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	e00b      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9d0 	bl	8004e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e007      	b.n	8004a7e <HAL_UART_IRQHandler+0x292>
=======
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9d0 	bl	8004e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e007      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9cc 	bl	8004e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004a7c:	e1b1      	b.n	8004de2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7e:	bf00      	nop
    return;
 8004a80:	e1af      	b.n	8004de2 <HAL_UART_IRQHandler+0x5f6>
 8004a82:	bf00      	nop
 8004a84:	04000120 	.word	0x04000120
 8004a88:	080058b1 	.word	0x080058b1
=======
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9cc 	bl	8004e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004adc:	e1b1      	b.n	8004e42 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ade:	bf00      	nop
    return;
 8004ae0:	e1af      	b.n	8004e42 <HAL_UART_IRQHandler+0x5f6>
 8004ae2:	bf00      	nop
 8004ae4:	04000120 	.word	0x04000120
 8004ae8:	08005911 	.word	0x08005911
>>>>>>> develop

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	f040 816a 	bne.w	8004d6a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8163 	beq.w	8004d6a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 815c 	beq.w	8004d6a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	f040 80d4 	bne.w	8004c72 <HAL_UART_IRQHandler+0x486>
=======
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 816a 	bne.w	8004dca <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 8163 	beq.w	8004dca <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 815c 	beq.w	8004dca <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2210      	movs	r2, #16
 8004b18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	f040 80d4 	bne.w	8004cd2 <HAL_UART_IRQHandler+0x486>
>>>>>>> develop
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ad6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80ad 	beq.w	8004c3a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aea:	429a      	cmp	r2, r3
 8004aec:	f080 80a5 	bcs.w	8004c3a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004af6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 8086 	bne.w	8004c18 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1da      	bne.n	8004b0c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e1      	bne.n	8004b56 <HAL_UART_IRQHandler+0x36a>
=======
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80ad 	beq.w	8004c9a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	f080 80a5 	bcs.w	8004c9a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f040 8086 	bne.w	8004c78 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1da      	bne.n	8004b6c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004be2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e1      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x36a>
>>>>>>> develop

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3308      	adds	r3, #8
 8004b98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e3      	bne.n	8004b92 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be8:	f023 0310 	bic.w	r3, r3, #16
 8004bec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bfc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e4      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe f830 	bl	8002c78 <HAL_DMA_Abort>
=======
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e3      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c48:	f023 0310 	bic.w	r3, r3, #16
 8004c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e4      	bne.n	8004c38 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe f830 	bl	8002cd8 <HAL_DMA_Abort>
>>>>>>> develop
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8f4 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
=======
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f8f4 	bl	8004e80 <HAL_UARTEx_RxEventCallback>
>>>>>>> develop
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
<<<<<<< HEAD
 8004c38:	e0d5      	b.n	8004de6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c44:	429a      	cmp	r2, r3
 8004c46:	f040 80ce 	bne.w	8004de6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	f040 80c5 	bne.w	8004de6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8d8 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
      return;
 8004c70:	e0b9      	b.n	8004de6 <HAL_UART_IRQHandler+0x5fa>
=======
 8004c98:	e0d5      	b.n	8004e46 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ca0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	f040 80ce 	bne.w	8004e46 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	f040 80c5 	bne.w	8004e46 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8d8 	bl	8004e80 <HAL_UARTEx_RxEventCallback>
      return;
 8004cd0:	e0b9      	b.n	8004e46 <HAL_UART_IRQHandler+0x5fa>
>>>>>>> develop
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80ab 	beq.w	8004dea <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80a6 	beq.w	8004dea <HAL_UART_IRQHandler+0x5fe>
=======
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80ab 	beq.w	8004e4a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80a6 	beq.w	8004e4a <HAL_UART_IRQHandler+0x5fe>
>>>>>>> develop

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e4      	bne.n	8004c9e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cf8:	633a      	str	r2, [r7, #48]	; 0x30
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e3      	bne.n	8004cd4 <HAL_UART_IRQHandler+0x4e8>
=======
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
 8004d22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e4      	bne.n	8004cfe <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	623b      	str	r3, [r7, #32]
   return(result);
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3308      	adds	r3, #8
 8004d54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d58:	633a      	str	r2, [r7, #48]	; 0x30
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e3      	bne.n	8004d34 <HAL_UART_IRQHandler+0x4e8>
>>>>>>> develop
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f023 0310 	bic.w	r3, r3, #16
 8004d34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d42:	61fb      	str	r3, [r7, #28]
 8004d44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	69b9      	ldr	r1, [r7, #24]
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e4      	bne.n	8004d20 <HAL_UART_IRQHandler+0x534>
=======
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f023 0310 	bic.w	r3, r3, #16
 8004d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	69b9      	ldr	r1, [r7, #24]
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	617b      	str	r3, [r7, #20]
   return(result);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e4      	bne.n	8004d80 <HAL_UART_IRQHandler+0x534>
>>>>>>> develop

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	665a      	str	r2, [r3, #100]	; 0x64
=======
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	665a      	str	r2, [r3, #100]	; 0x64
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8004d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f85c 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d68:	e03f      	b.n	8004dea <HAL_UART_IRQHandler+0x5fe>
=======
 8004dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f85c 	bl	8004e80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dc8:	e03f      	b.n	8004e4a <HAL_UART_IRQHandler+0x5fe>
>>>>>>> develop
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <HAL_UART_IRQHandler+0x5a8>
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d8a:	621a      	str	r2, [r3, #32]
=======
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00e      	beq.n	8004df4 <HAL_UART_IRQHandler+0x5a8>
 8004dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d008      	beq.n	8004df4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dea:	621a      	str	r2, [r3, #32]
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< HEAD
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 ff8b 	bl	8005ca8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d92:	e02d      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
=======
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 ff8b 	bl	8005d08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004df2:	e02d      	b.n	8004e50 <HAL_UART_IRQHandler+0x604>
>>>>>>> develop
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< HEAD
 8004d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00e      	beq.n	8004dbe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01c      	beq.n	8004dee <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
    }
    return;
 8004dbc:	e017      	b.n	8004dee <HAL_UART_IRQHandler+0x602>
=======
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01c      	beq.n	8004e4e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
    }
    return;
 8004e1c:	e017      	b.n	8004e4e <HAL_UART_IRQHandler+0x602>
>>>>>>> develop
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d012      	beq.n	8004df0 <HAL_UART_IRQHandler+0x604>
 8004dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fd80 	bl	80058dc <UART_EndTransmit_IT>
    return;
 8004ddc:	e008      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
      return;
 8004dde:	bf00      	nop
 8004de0:	e006      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
    return;
 8004de2:	bf00      	nop
 8004de4:	e004      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
      return;
 8004de6:	bf00      	nop
 8004de8:	e002      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
      return;
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <HAL_UART_IRQHandler+0x604>
    return;
 8004dee:	bf00      	nop
=======
 8004e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d012      	beq.n	8004e50 <HAL_UART_IRQHandler+0x604>
 8004e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00c      	beq.n	8004e50 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fd80 	bl	800593c <UART_EndTransmit_IT>
    return;
 8004e3c:	e008      	b.n	8004e50 <HAL_UART_IRQHandler+0x604>
      return;
 8004e3e:	bf00      	nop
 8004e40:	e006      	b.n	8004e50 <HAL_UART_IRQHandler+0x604>
    return;
 8004e42:	bf00      	nop
 8004e44:	e004      	b.n	8004e50 <HAL_UART_IRQHandler+0x604>
      return;
 8004e46:	bf00      	nop
 8004e48:	e002      	b.n	8004e50 <HAL_UART_IRQHandler+0x604>
      return;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <HAL_UART_IRQHandler+0x604>
    return;
 8004e4e:	bf00      	nop
>>>>>>> develop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
<<<<<<< HEAD
 8004df0:	37e8      	adds	r7, #232	; 0xe8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop

08004df8 <HAL_UART_TxCpltCallback>:
=======
 8004e50:	37e8      	adds	r7, #232	; 0xe8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop

08004e58 <HAL_UART_TxCpltCallback>:
>>>>>>> develop
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
=======
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_UART_ErrorCallback>:
=======
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_UART_ErrorCallback>:
>>>>>>> develop
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
=======
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UARTEx_RxEventCallback>:
=======
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_UARTEx_RxEventCallback>:
>>>>>>> develop
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	807b      	strh	r3, [r7, #2]
=======
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	807b      	strh	r3, [r7, #2]
>>>>>>> develop
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <UART_SetConfig>:
=======
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <UART_SetConfig>:
>>>>>>> develop
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e3c:	b08a      	sub	sp, #40	; 0x28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
=======
 8004e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e9c:	b08a      	sub	sp, #40	; 0x28
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
>>>>>>> develop
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
=======
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
>>>>>>> develop
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b9e      	ldr	r3, [pc, #632]	; (80050e0 <UART_SetConfig+0x2a8>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	6812      	ldr	r2, [r2, #0]
 8004e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6013      	str	r3, [r2, #0]
=======
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b9e      	ldr	r3, [pc, #632]	; (8005140 <UART_SetConfig+0x2a8>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6013      	str	r3, [r2, #0]
>>>>>>> develop

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
=======
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
>>>>>>> develop
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a93      	ldr	r2, [pc, #588]	; (80050e4 <UART_SetConfig+0x2ac>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	609a      	str	r2, [r3, #8]
=======
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a93      	ldr	r2, [pc, #588]	; (8005144 <UART_SetConfig+0x2ac>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f00:	4313      	orrs	r3, r2
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	430a      	orrs	r2, r1
 8004f16:	609a      	str	r2, [r3, #8]
>>>>>>> develop
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a8a      	ldr	r2, [pc, #552]	; (80050e8 <UART_SetConfig+0x2b0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d126      	bne.n	8004f10 <UART_SetConfig+0xd8>
 8004ec2:	4b8a      	ldr	r3, [pc, #552]	; (80050ec <UART_SetConfig+0x2b4>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d81b      	bhi.n	8004f08 <UART_SetConfig+0xd0>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0xa0>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004ee9 	.word	0x08004ee9
 8004edc:	08004ef9 	.word	0x08004ef9
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f01 	.word	0x08004f01
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e0ab      	b.n	8005048 <UART_SetConfig+0x210>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef6:	e0a7      	b.n	8005048 <UART_SetConfig+0x210>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e0a3      	b.n	8005048 <UART_SetConfig+0x210>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e09f      	b.n	8005048 <UART_SetConfig+0x210>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0e:	e09b      	b.n	8005048 <UART_SetConfig+0x210>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a76      	ldr	r2, [pc, #472]	; (80050f0 <UART_SetConfig+0x2b8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d138      	bne.n	8004f8c <UART_SetConfig+0x154>
 8004f1a:	4b74      	ldr	r3, [pc, #464]	; (80050ec <UART_SetConfig+0x2b4>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d82d      	bhi.n	8004f84 <UART_SetConfig+0x14c>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0xf8>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f65 	.word	0x08004f65
 8004f34:	08004f85 	.word	0x08004f85
 8004f38:	08004f85 	.word	0x08004f85
 8004f3c:	08004f85 	.word	0x08004f85
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f85 	.word	0x08004f85
 8004f48:	08004f85 	.word	0x08004f85
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	08004f85 	.word	0x08004f85
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e06d      	b.n	8005048 <UART_SetConfig+0x210>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e069      	b.n	8005048 <UART_SetConfig+0x210>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7a:	e065      	b.n	8005048 <UART_SetConfig+0x210>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e061      	b.n	8005048 <UART_SetConfig+0x210>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8a:	e05d      	b.n	8005048 <UART_SetConfig+0x210>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a58      	ldr	r2, [pc, #352]	; (80050f4 <UART_SetConfig+0x2bc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d125      	bne.n	8004fe2 <UART_SetConfig+0x1aa>
 8004f96:	4b55      	ldr	r3, [pc, #340]	; (80050ec <UART_SetConfig+0x2b4>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fa0:	2b30      	cmp	r3, #48	; 0x30
 8004fa2:	d016      	beq.n	8004fd2 <UART_SetConfig+0x19a>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d818      	bhi.n	8004fda <UART_SetConfig+0x1a2>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d00a      	beq.n	8004fc2 <UART_SetConfig+0x18a>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d814      	bhi.n	8004fda <UART_SetConfig+0x1a2>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <UART_SetConfig+0x182>
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d008      	beq.n	8004fca <UART_SetConfig+0x192>
 8004fb8:	e00f      	b.n	8004fda <UART_SetConfig+0x1a2>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc0:	e042      	b.n	8005048 <UART_SetConfig+0x210>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc8:	e03e      	b.n	8005048 <UART_SetConfig+0x210>
 8004fca:	2304      	movs	r3, #4
 8004fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd0:	e03a      	b.n	8005048 <UART_SetConfig+0x210>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd8:	e036      	b.n	8005048 <UART_SetConfig+0x210>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe0:	e032      	b.n	8005048 <UART_SetConfig+0x210>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a3f      	ldr	r2, [pc, #252]	; (80050e4 <UART_SetConfig+0x2ac>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d12a      	bne.n	8005042 <UART_SetConfig+0x20a>
 8004fec:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <UART_SetConfig+0x2b4>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ff6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ffa:	d01a      	beq.n	8005032 <UART_SetConfig+0x1fa>
 8004ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005000:	d81b      	bhi.n	800503a <UART_SetConfig+0x202>
 8005002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005006:	d00c      	beq.n	8005022 <UART_SetConfig+0x1ea>
 8005008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500c:	d815      	bhi.n	800503a <UART_SetConfig+0x202>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <UART_SetConfig+0x1e2>
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d008      	beq.n	800502a <UART_SetConfig+0x1f2>
 8005018:	e00f      	b.n	800503a <UART_SetConfig+0x202>
 800501a:	2300      	movs	r3, #0
 800501c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005020:	e012      	b.n	8005048 <UART_SetConfig+0x210>
 8005022:	2302      	movs	r3, #2
 8005024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005028:	e00e      	b.n	8005048 <UART_SetConfig+0x210>
 800502a:	2304      	movs	r3, #4
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005030:	e00a      	b.n	8005048 <UART_SetConfig+0x210>
 8005032:	2308      	movs	r3, #8
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005038:	e006      	b.n	8005048 <UART_SetConfig+0x210>
 800503a:	2310      	movs	r3, #16
 800503c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005040:	e002      	b.n	8005048 <UART_SetConfig+0x210>
 8005042:	2310      	movs	r3, #16
 8005044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <UART_SetConfig+0x2ac>)
 800504e:	4293      	cmp	r3, r2
 8005050:	f040 808a 	bne.w	8005168 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005058:	2b08      	cmp	r3, #8
 800505a:	d824      	bhi.n	80050a6 <UART_SetConfig+0x26e>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <UART_SetConfig+0x22c>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005089 	.word	0x08005089
 8005068:	080050a7 	.word	0x080050a7
 800506c:	08005091 	.word	0x08005091
 8005070:	080050a7 	.word	0x080050a7
 8005074:	08005097 	.word	0x08005097
 8005078:	080050a7 	.word	0x080050a7
 800507c:	080050a7 	.word	0x080050a7
 8005080:	080050a7 	.word	0x080050a7
 8005084:	0800509f 	.word	0x0800509f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005088:	f7fe fef6 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 800508c:	61f8      	str	r0, [r7, #28]
        break;
 800508e:	e010      	b.n	80050b2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <UART_SetConfig+0x2c0>)
 8005092:	61fb      	str	r3, [r7, #28]
        break;
 8005094:	e00d      	b.n	80050b2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005096:	f7fe fe57 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 800509a:	61f8      	str	r0, [r7, #28]
        break;
 800509c:	e009      	b.n	80050b2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a2:	61fb      	str	r3, [r7, #28]
        break;
 80050a4:	e005      	b.n	80050b2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050b0:	bf00      	nop
=======
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a8a      	ldr	r2, [pc, #552]	; (8005148 <UART_SetConfig+0x2b0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d126      	bne.n	8004f70 <UART_SetConfig+0xd8>
 8004f22:	4b8a      	ldr	r3, [pc, #552]	; (800514c <UART_SetConfig+0x2b4>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d81b      	bhi.n	8004f68 <UART_SetConfig+0xd0>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0xa0>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	08004f51 	.word	0x08004f51
 8004f44:	08004f61 	.word	0x08004f61
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4e:	e0ab      	b.n	80050a8 <UART_SetConfig+0x210>
 8004f50:	2302      	movs	r3, #2
 8004f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f56:	e0a7      	b.n	80050a8 <UART_SetConfig+0x210>
 8004f58:	2304      	movs	r3, #4
 8004f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5e:	e0a3      	b.n	80050a8 <UART_SetConfig+0x210>
 8004f60:	2308      	movs	r3, #8
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e09f      	b.n	80050a8 <UART_SetConfig+0x210>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6e:	e09b      	b.n	80050a8 <UART_SetConfig+0x210>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a76      	ldr	r2, [pc, #472]	; (8005150 <UART_SetConfig+0x2b8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d138      	bne.n	8004fec <UART_SetConfig+0x154>
 8004f7a:	4b74      	ldr	r3, [pc, #464]	; (800514c <UART_SetConfig+0x2b4>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	d82d      	bhi.n	8004fe4 <UART_SetConfig+0x14c>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0xf8>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fc5 	.word	0x08004fc5
 8004f94:	08004fe5 	.word	0x08004fe5
 8004f98:	08004fe5 	.word	0x08004fe5
 8004f9c:	08004fe5 	.word	0x08004fe5
 8004fa0:	08004fd5 	.word	0x08004fd5
 8004fa4:	08004fe5 	.word	0x08004fe5
 8004fa8:	08004fe5 	.word	0x08004fe5
 8004fac:	08004fe5 	.word	0x08004fe5
 8004fb0:	08004fcd 	.word	0x08004fcd
 8004fb4:	08004fe5 	.word	0x08004fe5
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	08004fe5 	.word	0x08004fe5
 8004fc0:	08004fdd 	.word	0x08004fdd
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fca:	e06d      	b.n	80050a8 <UART_SetConfig+0x210>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd2:	e069      	b.n	80050a8 <UART_SetConfig+0x210>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fda:	e065      	b.n	80050a8 <UART_SetConfig+0x210>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e061      	b.n	80050a8 <UART_SetConfig+0x210>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fea:	e05d      	b.n	80050a8 <UART_SetConfig+0x210>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a58      	ldr	r2, [pc, #352]	; (8005154 <UART_SetConfig+0x2bc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d125      	bne.n	8005042 <UART_SetConfig+0x1aa>
 8004ff6:	4b55      	ldr	r3, [pc, #340]	; (800514c <UART_SetConfig+0x2b4>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005000:	2b30      	cmp	r3, #48	; 0x30
 8005002:	d016      	beq.n	8005032 <UART_SetConfig+0x19a>
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d818      	bhi.n	800503a <UART_SetConfig+0x1a2>
 8005008:	2b20      	cmp	r3, #32
 800500a:	d00a      	beq.n	8005022 <UART_SetConfig+0x18a>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d814      	bhi.n	800503a <UART_SetConfig+0x1a2>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <UART_SetConfig+0x182>
 8005014:	2b10      	cmp	r3, #16
 8005016:	d008      	beq.n	800502a <UART_SetConfig+0x192>
 8005018:	e00f      	b.n	800503a <UART_SetConfig+0x1a2>
 800501a:	2300      	movs	r3, #0
 800501c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005020:	e042      	b.n	80050a8 <UART_SetConfig+0x210>
 8005022:	2302      	movs	r3, #2
 8005024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005028:	e03e      	b.n	80050a8 <UART_SetConfig+0x210>
 800502a:	2304      	movs	r3, #4
 800502c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005030:	e03a      	b.n	80050a8 <UART_SetConfig+0x210>
 8005032:	2308      	movs	r3, #8
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005038:	e036      	b.n	80050a8 <UART_SetConfig+0x210>
 800503a:	2310      	movs	r3, #16
 800503c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005040:	e032      	b.n	80050a8 <UART_SetConfig+0x210>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a3f      	ldr	r2, [pc, #252]	; (8005144 <UART_SetConfig+0x2ac>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d12a      	bne.n	80050a2 <UART_SetConfig+0x20a>
 800504c:	4b3f      	ldr	r3, [pc, #252]	; (800514c <UART_SetConfig+0x2b4>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800505a:	d01a      	beq.n	8005092 <UART_SetConfig+0x1fa>
 800505c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005060:	d81b      	bhi.n	800509a <UART_SetConfig+0x202>
 8005062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005066:	d00c      	beq.n	8005082 <UART_SetConfig+0x1ea>
 8005068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800506c:	d815      	bhi.n	800509a <UART_SetConfig+0x202>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <UART_SetConfig+0x1e2>
 8005072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005076:	d008      	beq.n	800508a <UART_SetConfig+0x1f2>
 8005078:	e00f      	b.n	800509a <UART_SetConfig+0x202>
 800507a:	2300      	movs	r3, #0
 800507c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005080:	e012      	b.n	80050a8 <UART_SetConfig+0x210>
 8005082:	2302      	movs	r3, #2
 8005084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005088:	e00e      	b.n	80050a8 <UART_SetConfig+0x210>
 800508a:	2304      	movs	r3, #4
 800508c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005090:	e00a      	b.n	80050a8 <UART_SetConfig+0x210>
 8005092:	2308      	movs	r3, #8
 8005094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005098:	e006      	b.n	80050a8 <UART_SetConfig+0x210>
 800509a:	2310      	movs	r3, #16
 800509c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a0:	e002      	b.n	80050a8 <UART_SetConfig+0x210>
 80050a2:	2310      	movs	r3, #16
 80050a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <UART_SetConfig+0x2ac>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	f040 808a 	bne.w	80051c8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d824      	bhi.n	8005106 <UART_SetConfig+0x26e>
 80050bc:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0x22c>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	08005107 	.word	0x08005107
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	08005107 	.word	0x08005107
 80050d4:	080050f7 	.word	0x080050f7
 80050d8:	08005107 	.word	0x08005107
 80050dc:	08005107 	.word	0x08005107
 80050e0:	08005107 	.word	0x08005107
 80050e4:	080050ff 	.word	0x080050ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e8:	f7fe fef6 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80050ec:	61f8      	str	r0, [r7, #28]
        break;
 80050ee:	e010      	b.n	8005112 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <UART_SetConfig+0x2c0>)
 80050f2:	61fb      	str	r3, [r7, #28]
        break;
 80050f4:	e00d      	b.n	8005112 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f6:	f7fe fe57 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 80050fa:	61f8      	str	r0, [r7, #28]
        break;
 80050fc:	e009      	b.n	8005112 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005102:	61fb      	str	r3, [r7, #28]
        break;
 8005104:	e005      	b.n	8005112 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005110:	bf00      	nop
>>>>>>> develop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8109 	beq.w	80052cc <UART_SetConfig+0x494>
=======
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8109 	beq.w	800532c <UART_SetConfig+0x494>
>>>>>>> develop
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
<<<<<<< HEAD
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	4413      	add	r3, r2
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d305      	bcc.n	80050d6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d912      	bls.n	80050fc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050dc:	e0f6      	b.n	80052cc <UART_SetConfig+0x494>
 80050de:	bf00      	nop
 80050e0:	efff69f3 	.word	0xefff69f3
 80050e4:	40008000 	.word	0x40008000
 80050e8:	40013800 	.word	0x40013800
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40004400 	.word	0x40004400
 80050f4:	40004800 	.word	0x40004800
 80050f8:	00f42400 	.word	0x00f42400
=======
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	429a      	cmp	r2, r3
 8005128:	d305      	bcc.n	8005136 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	429a      	cmp	r2, r3
 8005134:	d912      	bls.n	800515c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800513c:	e0f6      	b.n	800532c <UART_SetConfig+0x494>
 800513e:	bf00      	nop
 8005140:	efff69f3 	.word	0xefff69f3
 8005144:	40008000 	.word	0x40008000
 8005148:	40013800 	.word	0x40013800
 800514c:	40021000 	.word	0x40021000
 8005150:	40004400 	.word	0x40004400
 8005154:	40004800 	.word	0x40004800
 8005158:	00f42400 	.word	0x00f42400
>>>>>>> develop
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
<<<<<<< HEAD
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2200      	movs	r2, #0
 8005100:	461c      	mov	r4, r3
 8005102:	4615      	mov	r5, r2
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	022b      	lsls	r3, r5, #8
 800510e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005112:	0222      	lsls	r2, r4, #8
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	6849      	ldr	r1, [r1, #4]
 8005118:	0849      	lsrs	r1, r1, #1
 800511a:	2000      	movs	r0, #0
 800511c:	4688      	mov	r8, r1
 800511e:	4681      	mov	r9, r0
 8005120:	eb12 0a08 	adds.w	sl, r2, r8
 8005124:	eb43 0b09 	adc.w	fp, r3, r9
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005136:	4650      	mov	r0, sl
 8005138:	4659      	mov	r1, fp
 800513a:	f7fb f847 	bl	80001cc <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4613      	mov	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514c:	d308      	bcc.n	8005160 <UART_SetConfig+0x328>
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005154:	d204      	bcs.n	8005160 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	e0b5      	b.n	80052cc <UART_SetConfig+0x494>
=======
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2200      	movs	r2, #0
 8005160:	461c      	mov	r4, r3
 8005162:	4615      	mov	r5, r2
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	022b      	lsls	r3, r5, #8
 800516e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005172:	0222      	lsls	r2, r4, #8
 8005174:	68f9      	ldr	r1, [r7, #12]
 8005176:	6849      	ldr	r1, [r1, #4]
 8005178:	0849      	lsrs	r1, r1, #1
 800517a:	2000      	movs	r0, #0
 800517c:	4688      	mov	r8, r1
 800517e:	4681      	mov	r9, r0
 8005180:	eb12 0a08 	adds.w	sl, r2, r8
 8005184:	eb43 0b09 	adc.w	fp, r3, r9
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005196:	4650      	mov	r0, sl
 8005198:	4659      	mov	r1, fp
 800519a:	f7fb f817 	bl	80001cc <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4613      	mov	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ac:	d308      	bcc.n	80051c0 <UART_SetConfig+0x328>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b4:	d204      	bcs.n	80051c0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	e0b5      	b.n	800532c <UART_SetConfig+0x494>
>>>>>>> develop
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 8005160:	2301      	movs	r3, #1
 8005162:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005166:	e0b1      	b.n	80052cc <UART_SetConfig+0x494>
=======
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051c6:	e0b1      	b.n	800532c <UART_SetConfig+0x494>
>>>>>>> develop
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005170:	d15d      	bne.n	800522e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005176:	2b08      	cmp	r3, #8
 8005178:	d827      	bhi.n	80051ca <UART_SetConfig+0x392>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0x348>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	080051cb 	.word	0x080051cb
 8005190:	080051bb 	.word	0x080051bb
 8005194:	080051cb 	.word	0x080051cb
 8005198:	080051cb 	.word	0x080051cb
 800519c:	080051cb 	.word	0x080051cb
 80051a0:	080051c3 	.word	0x080051c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fe fe68 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 80051a8:	61f8      	str	r0, [r7, #28]
        break;
 80051aa:	e014      	b.n	80051d6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fe fe7a 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 80051b0:	61f8      	str	r0, [r7, #28]
        break;
 80051b2:	e010      	b.n	80051d6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b4:	4b4c      	ldr	r3, [pc, #304]	; (80052e8 <UART_SetConfig+0x4b0>)
 80051b6:	61fb      	str	r3, [r7, #28]
        break;
 80051b8:	e00d      	b.n	80051d6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ba:	f7fe fdc5 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 80051be:	61f8      	str	r0, [r7, #28]
        break;
 80051c0:	e009      	b.n	80051d6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c6:	61fb      	str	r3, [r7, #28]
        break;
 80051c8:	e005      	b.n	80051d6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051d4:	bf00      	nop
=======
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d0:	d15d      	bne.n	800528e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80051d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d827      	bhi.n	800522a <UART_SetConfig+0x392>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x348>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	0800522b 	.word	0x0800522b
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	0800522b 	.word	0x0800522b
 80051fc:	0800522b 	.word	0x0800522b
 8005200:	08005223 	.word	0x08005223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7fe fe68 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8005208:	61f8      	str	r0, [r7, #28]
        break;
 800520a:	e014      	b.n	8005236 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe fe7a 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8005210:	61f8      	str	r0, [r7, #28]
        break;
 8005212:	e010      	b.n	8005236 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b4c      	ldr	r3, [pc, #304]	; (8005348 <UART_SetConfig+0x4b0>)
 8005216:	61fb      	str	r3, [r7, #28]
        break;
 8005218:	e00d      	b.n	8005236 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fe fdc5 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 800521e:	61f8      	str	r0, [r7, #28]
        break;
 8005220:	e009      	b.n	8005236 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005226:	61fb      	str	r3, [r7, #28]
        break;
 8005228:	e005      	b.n	8005236 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005234:	bf00      	nop
>>>>>>> develop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d077      	beq.n	80052cc <UART_SetConfig+0x494>
=======
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d077      	beq.n	800532c <UART_SetConfig+0x494>
>>>>>>> develop
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
<<<<<<< HEAD
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005a      	lsls	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	441a      	add	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b0f      	cmp	r3, #15
 80051f6:	d916      	bls.n	8005226 <UART_SetConfig+0x3ee>
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d212      	bcs.n	8005226 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f023 030f 	bic.w	r3, r3, #15
 8005208:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	085b      	lsrs	r3, r3, #1
 800520e:	b29b      	uxth	r3, r3
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	b29a      	uxth	r2, r3
 8005216:	8afb      	ldrh	r3, [r7, #22]
 8005218:	4313      	orrs	r3, r2
 800521a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	8afa      	ldrh	r2, [r7, #22]
 8005222:	60da      	str	r2, [r3, #12]
 8005224:	e052      	b.n	80052cc <UART_SetConfig+0x494>
=======
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	005a      	lsls	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	441a      	add	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b0f      	cmp	r3, #15
 8005256:	d916      	bls.n	8005286 <UART_SetConfig+0x3ee>
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525e:	d212      	bcs.n	8005286 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f023 030f 	bic.w	r3, r3, #15
 8005268:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	b29b      	uxth	r3, r3
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	b29a      	uxth	r2, r3
 8005276:	8afb      	ldrh	r3, [r7, #22]
 8005278:	4313      	orrs	r3, r2
 800527a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	8afa      	ldrh	r2, [r7, #22]
 8005282:	60da      	str	r2, [r3, #12]
 8005284:	e052      	b.n	800532c <UART_SetConfig+0x494>
>>>>>>> develop
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8005226:	2301      	movs	r3, #1
 8005228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800522c:	e04e      	b.n	80052cc <UART_SetConfig+0x494>
=======
 8005286:	2301      	movs	r3, #1
 8005288:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800528c:	e04e      	b.n	800532c <UART_SetConfig+0x494>
>>>>>>> develop
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 800522e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005232:	2b08      	cmp	r3, #8
 8005234:	d827      	bhi.n	8005286 <UART_SetConfig+0x44e>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x404>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	08005287 	.word	0x08005287
 800524c:	08005277 	.word	0x08005277
 8005250:	08005287 	.word	0x08005287
 8005254:	08005287 	.word	0x08005287
 8005258:	08005287 	.word	0x08005287
 800525c:	0800527f 	.word	0x0800527f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fe fe0a 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8005264:	61f8      	str	r0, [r7, #28]
        break;
 8005266:	e014      	b.n	8005292 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7fe fe1c 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 800526c:	61f8      	str	r0, [r7, #28]
        break;
 800526e:	e010      	b.n	8005292 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005270:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <UART_SetConfig+0x4b0>)
 8005272:	61fb      	str	r3, [r7, #28]
        break;
 8005274:	e00d      	b.n	8005292 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005276:	f7fe fd67 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 800527a:	61f8      	str	r0, [r7, #28]
        break;
 800527c:	e009      	b.n	8005292 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	61fb      	str	r3, [r7, #28]
        break;
 8005284:	e005      	b.n	8005292 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005290:	bf00      	nop
    }

    if (pclk != 0U)
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d019      	beq.n	80052cc <UART_SetConfig+0x494>
=======
 800528e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005292:	2b08      	cmp	r3, #8
 8005294:	d827      	bhi.n	80052e6 <UART_SetConfig+0x44e>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x404>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fe0a 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 80052c4:	61f8      	str	r0, [r7, #28]
        break;
 80052c6:	e014      	b.n	80052f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe fe1c 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <UART_SetConfig+0x4b0>)
 80052d2:	61fb      	str	r3, [r7, #28]
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe fd67 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 80052da:	61f8      	str	r0, [r7, #28]
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052f0:	bf00      	nop
    }

    if (pclk != 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d019      	beq.n	800532c <UART_SetConfig+0x494>
>>>>>>> develop
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
<<<<<<< HEAD
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	085a      	lsrs	r2, r3, #1
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	441a      	add	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d909      	bls.n	80052c6 <UART_SetConfig+0x48e>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b8:	d205      	bcs.n	80052c6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60da      	str	r2, [r3, #12]
 80052c4:	e002      	b.n	80052cc <UART_SetConfig+0x494>
=======
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	085a      	lsrs	r2, r3, #1
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	441a      	add	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b0f      	cmp	r3, #15
 8005310:	d909      	bls.n	8005326 <UART_SetConfig+0x48e>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005318:	d205      	bcs.n	8005326 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60da      	str	r2, [r3, #12]
 8005324:	e002      	b.n	800532c <UART_SetConfig+0x494>
>>>>>>> develop
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
=======
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
>>>>>>> develop
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80052d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052e6:	bf00      	nop
 80052e8:	00f42400 	.word	0x00f42400

080052ec <UART_AdvFeatureConfig>:
=======
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005338:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800533c:	4618      	mov	r0, r3
 800533e:	3728      	adds	r7, #40	; 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005346:	bf00      	nop
 8005348:	00f42400 	.word	0x00f42400

0800534c <UART_AdvFeatureConfig>:
>>>>>>> develop
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
=======
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
=======
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
>>>>>>> develop
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
=======
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
>>>>>>> develop
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
=======
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
>>>>>>> develop
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
=======
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
>>>>>>> develop
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	609a      	str	r2, [r3, #8]
=======
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
>>>>>>> develop
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
=======
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]
>>>>>>> develop
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01a      	beq.n	8005402 <UART_AdvFeatureConfig+0x116>
=======
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01a      	beq.n	8005462 <UART_AdvFeatureConfig+0x116>
>>>>>>> develop
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ea:	d10a      	bne.n	8005402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
=======
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544a:	d10a      	bne.n	8005462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
>>>>>>> develop
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]
  }
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <UART_CheckIdleState>:
=======
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <UART_CheckIdleState>:
>>>>>>> develop
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005430:	b580      	push	{r7, lr}
 8005432:	b098      	sub	sp, #96	; 0x60
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
=======
 8005490:	b580      	push	{r7, lr}
 8005492:	b098      	sub	sp, #96	; 0x60
 8005494:	af02      	add	r7, sp, #8
 8005496:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005440:	f7fb ff20 	bl	8001284 <HAL_GetTick>
 8005444:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b08      	cmp	r3, #8
 8005452:	d12e      	bne.n	80054b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545c:	2200      	movs	r2, #0
 800545e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f88c 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d021      	beq.n	80054b2 <UART_CheckIdleState+0x82>
=======
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a0:	f7fb ff20 	bl	80012e4 <HAL_GetTick>
 80054a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d12e      	bne.n	8005512 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054bc:	2200      	movs	r2, #0
 80054be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f88c 	bl	80055e0 <UART_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d021      	beq.n	8005512 <UART_CheckIdleState+0x82>
>>>>>>> develop
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
<<<<<<< HEAD
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800547c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005482:	653b      	str	r3, [r7, #80]	; 0x50
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548c:	647b      	str	r3, [r7, #68]	; 0x44
 800548e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e6      	bne.n	800546e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e062      	b.n	8005578 <UART_CheckIdleState+0x148>
=======
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e2:	653b      	str	r3, [r7, #80]	; 0x50
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
 80054ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e6      	bne.n	80054ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e062      	b.n	80055d8 <UART_CheckIdleState+0x148>
>>>>>>> develop
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d149      	bne.n	8005554 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c8:	2200      	movs	r2, #0
 80054ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f856 	bl	8005580 <UART_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d03c      	beq.n	8005554 <UART_CheckIdleState+0x124>
=======
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d149      	bne.n	80055b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005528:	2200      	movs	r2, #0
 800552a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f856 	bl	80055e0 <UART_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d03c      	beq.n	80055b4 <UART_CheckIdleState+0x124>
>>>>>>> develop
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	623b      	str	r3, [r7, #32]
   return(result);
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f8:	633b      	str	r3, [r7, #48]	; 0x30
 80054fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e6      	bne.n	80054da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	60fb      	str	r3, [r7, #12]
   return(result);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3308      	adds	r3, #8
 800552a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800552c:	61fa      	str	r2, [r7, #28]
 800552e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	69b9      	ldr	r1, [r7, #24]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	617b      	str	r3, [r7, #20]
   return(result);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e011      	b.n	8005578 <UART_CheckIdleState+0x148>
=======
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	623b      	str	r3, [r7, #32]
   return(result);
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800554e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	633b      	str	r3, [r7, #48]	; 0x30
 800555a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800555e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e6      	bne.n	800553a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	60fb      	str	r3, [r7, #12]
   return(result);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3308      	adds	r3, #8
 800558a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558c:	61fa      	str	r2, [r7, #28]
 800558e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	69b9      	ldr	r1, [r7, #24]
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	617b      	str	r3, [r7, #20]
   return(result);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e5      	bne.n	800556c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e011      	b.n	80055d8 <UART_CheckIdleState+0x148>
>>>>>>> develop
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3758      	adds	r7, #88	; 0x58
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_WaitOnFlagUntilTimeout>:
=======
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3758      	adds	r7, #88	; 0x58
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> develop
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	4613      	mov	r3, r2
 800558e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005590:	e04f      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d04b      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fb fe73 	bl	8001284 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e04e      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d037      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	d034      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d031      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d110      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2208      	movs	r2, #8
 80055e2:	621a      	str	r2, [r3, #32]
=======
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	4613      	mov	r3, r2
 80055ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f0:	e04f      	b.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d04b      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fa:	f7fb fe73 	bl	80012e4 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <UART_WaitOnFlagUntilTimeout+0x30>
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e04e      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d037      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b80      	cmp	r3, #128	; 0x80
 8005626:	d034      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b40      	cmp	r3, #64	; 0x40
 800562c:	d031      	beq.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b08      	cmp	r3, #8
 800563a:	d110      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2208      	movs	r2, #8
 8005642:	621a      	str	r2, [r3, #32]
>>>>>>> develop

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f8ff 	bl	80057e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2208      	movs	r2, #8
 80055ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e029      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560c:	d111      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005616:	621a      	str	r2, [r3, #32]
=======
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f8ff 	bl	8005848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2208      	movs	r2, #8
 800564e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e029      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d111      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005676:	621a      	str	r2, [r3, #32]
>>>>>>> develop

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f8e5 	bl	80057e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e00f      	b.n	8005652 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	429a      	cmp	r2, r3
 800564e:	d0a0      	beq.n	8005592 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f8e5 	bl	8005848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e00f      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4013      	ands	r3, r2
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	bf0c      	ite	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	2300      	movne	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	461a      	mov	r2, r3
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d0a0      	beq.n	80055f2 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> develop
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <UART_Start_Receive_IT>:
=======
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <UART_Start_Receive_IT>:
>>>>>>> develop
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800565c:	b480      	push	{r7}
 800565e:	b097      	sub	sp, #92	; 0x5c
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568e:	d10e      	bne.n	80056ae <UART_Start_Receive_IT+0x52>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d105      	bne.n	80056a4 <UART_Start_Receive_IT+0x48>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800569e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056a2:	e02d      	b.n	8005700 <UART_Start_Receive_IT+0xa4>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	22ff      	movs	r2, #255	; 0xff
 80056a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056ac:	e028      	b.n	8005700 <UART_Start_Receive_IT+0xa4>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10d      	bne.n	80056d2 <UART_Start_Receive_IT+0x76>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <UART_Start_Receive_IT+0x6c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	22ff      	movs	r2, #255	; 0xff
 80056c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056c6:	e01b      	b.n	8005700 <UART_Start_Receive_IT+0xa4>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	227f      	movs	r2, #127	; 0x7f
 80056cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056d0:	e016      	b.n	8005700 <UART_Start_Receive_IT+0xa4>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056da:	d10d      	bne.n	80056f8 <UART_Start_Receive_IT+0x9c>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <UART_Start_Receive_IT+0x92>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	227f      	movs	r2, #127	; 0x7f
 80056e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056ec:	e008      	b.n	8005700 <UART_Start_Receive_IT+0xa4>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	223f      	movs	r2, #63	; 0x3f
 80056f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056f6:	e003      	b.n	8005700 <UART_Start_Receive_IT+0xa4>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2222      	movs	r2, #34	; 0x22
 800570c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	657b      	str	r3, [r7, #84]	; 0x54
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005730:	64ba      	str	r2, [r7, #72]	; 0x48
 8005732:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800573e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <UART_Start_Receive_IT+0xb4>
=======
 80056bc:	b480      	push	{r7}
 80056be:	b097      	sub	sp, #92	; 0x5c
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	d10e      	bne.n	800570e <UART_Start_Receive_IT+0x52>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <UART_Start_Receive_IT+0x48>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005702:	e02d      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	22ff      	movs	r2, #255	; 0xff
 8005708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800570c:	e028      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10d      	bne.n	8005732 <UART_Start_Receive_IT+0x76>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <UART_Start_Receive_IT+0x6c>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005726:	e01b      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	227f      	movs	r2, #127	; 0x7f
 800572c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005730:	e016      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800573a:	d10d      	bne.n	8005758 <UART_Start_Receive_IT+0x9c>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <UART_Start_Receive_IT+0x92>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	227f      	movs	r2, #127	; 0x7f
 8005748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800574c:	e008      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	223f      	movs	r2, #63	; 0x3f
 8005752:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005756:	e003      	b.n	8005760 <UART_Start_Receive_IT+0xa4>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2222      	movs	r2, #34	; 0x22
 800576c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3308      	adds	r3, #8
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	657b      	str	r3, [r7, #84]	; 0x54
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005790:	64ba      	str	r2, [r7, #72]	; 0x48
 8005792:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800579e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_Start_Receive_IT+0xb4>
>>>>>>> develop
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574c:	d107      	bne.n	800575e <UART_Start_Receive_IT+0x102>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <UART_Start_Receive_IT+0x184>)
 800575a:	669a      	str	r2, [r3, #104]	; 0x68
 800575c:	e002      	b.n	8005764 <UART_Start_Receive_IT+0x108>
=======
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ac:	d107      	bne.n	80057be <UART_Start_Receive_IT+0x102>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a21      	ldr	r2, [pc, #132]	; (8005840 <UART_Start_Receive_IT+0x184>)
 80057ba:	669a      	str	r2, [r3, #104]	; 0x68
 80057bc:	e002      	b.n	80057c4 <UART_Start_Receive_IT+0x108>
>>>>>>> develop
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
<<<<<<< HEAD
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <UART_Start_Receive_IT+0x188>)
 8005762:	669a      	str	r2, [r3, #104]	; 0x68
=======
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4a20      	ldr	r2, [pc, #128]	; (8005844 <UART_Start_Receive_IT+0x188>)
 80057c2:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> develop
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
<<<<<<< HEAD
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d019      	beq.n	80057a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005780:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
 800578c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e6      	bne.n	800576c <UART_Start_Receive_IT+0x110>
 800579e:	e018      	b.n	80057d2 <UART_Start_Receive_IT+0x176>
=======
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d019      	beq.n	8005800 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80057e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
 80057ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e6      	bne.n	80057cc <UART_Start_Receive_IT+0x110>
 80057fe:	e018      	b.n	8005832 <UART_Start_Receive_IT+0x176>
>>>>>>> develop
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
<<<<<<< HEAD
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	613b      	str	r3, [r7, #16]
   return(result);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f043 0320 	orr.w	r3, r3, #32
 80057b4:	653b      	str	r3, [r7, #80]	; 0x50
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057be:	623b      	str	r3, [r7, #32]
 80057c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	69f9      	ldr	r1, [r7, #28]
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	375c      	adds	r7, #92	; 0x5c
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	08005aed 	.word	0x08005aed
 80057e4:	08005931 	.word	0x08005931

080057e8 <UART_EndRxTransfer>:
=======
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	613b      	str	r3, [r7, #16]
   return(result);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f043 0320 	orr.w	r3, r3, #32
 8005814:	653b      	str	r3, [r7, #80]	; 0x50
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581e:	623b      	str	r3, [r7, #32]
 8005820:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	61bb      	str	r3, [r7, #24]
   return(result);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e6      	bne.n	8005800 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	375c      	adds	r7, #92	; 0x5c
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	08005b4d 	.word	0x08005b4d
 8005844:	08005991 	.word	0x08005991

08005848 <UART_EndRxTransfer>:
>>>>>>> develop
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80057e8:	b480      	push	{r7}
 80057ea:	b095      	sub	sp, #84	; 0x54
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
=======
 8005848:	b480      	push	{r7}
 800584a:	b095      	sub	sp, #84	; 0x54
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580e:	643b      	str	r3, [r7, #64]	; 0x40
 8005810:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e6      	bne.n	80057f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	61fb      	str	r3, [r7, #28]
   return(result);
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	64bb      	str	r3, [r7, #72]	; 0x48
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_EndRxTransfer+0x3a>
=======
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586e:	643b      	str	r3, [r7, #64]	; 0x40
 8005870:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005874:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e6      	bne.n	8005850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	61fb      	str	r3, [r7, #28]
   return(result);
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	64bb      	str	r3, [r7, #72]	; 0x48
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_EndRxTransfer+0x3a>
>>>>>>> develop
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585a:	2b01      	cmp	r3, #1
 800585c:	d118      	bne.n	8005890 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	60bb      	str	r3, [r7, #8]
   return(result);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 0310 	bic.w	r3, r3, #16
 8005872:	647b      	str	r3, [r7, #68]	; 0x44
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6979      	ldr	r1, [r7, #20]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	613b      	str	r3, [r7, #16]
   return(result);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e6      	bne.n	800585e <UART_EndRxTransfer+0x76>
=======
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d118      	bne.n	80058f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f023 0310 	bic.w	r3, r3, #16
 80058d2:	647b      	str	r3, [r7, #68]	; 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e6      	bne.n	80058be <UART_EndRxTransfer+0x76>
>>>>>>> develop
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80058a4:	bf00      	nop
 80058a6:	3754      	adds	r7, #84	; 0x54
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <UART_DMAAbortOnError>:
=======
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005904:	bf00      	nop
 8005906:	3754      	adds	r7, #84	; 0x54
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <UART_DMAAbortOnError>:
>>>>>>> develop
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff fa9c 	bl	8004e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <UART_EndTransmit_IT>:
=======
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fa9c 	bl	8004e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <UART_EndTransmit_IT>:
>>>>>>> develop
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6979      	ldr	r1, [r7, #20]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	613b      	str	r3, [r7, #16]
   return(result);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e6      	bne.n	80058e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	60bb      	str	r3, [r7, #8]
   return(result);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6979      	ldr	r1, [r7, #20]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	613b      	str	r3, [r7, #16]
   return(result);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e6      	bne.n	8005944 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fa68 	bl	8004df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005928:	bf00      	nop
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <UART_RxISR_8BIT>:
=======
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fa68 	bl	8004e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005988:	bf00      	nop
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_RxISR_8BIT>:
>>>>>>> develop
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005930:	b580      	push	{r7, lr}
 8005932:	b09c      	sub	sp, #112	; 0x70
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800593e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 8005990:	b580      	push	{r7, lr}
 8005992:	b09c      	sub	sp, #112	; 0x70
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800599e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> develop
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005948:	2b22      	cmp	r3, #34	; 0x22
 800594a:	f040 80be 	bne.w	8005aca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005954:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005958:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800595c:	b2d9      	uxtb	r1, r3
 800595e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005962:	b2da      	uxtb	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005968:	400a      	ands	r2, r1
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 80a3 	bne.w	8005ade <UART_RxISR_8BIT+0x1ae>
=======
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059a8:	2b22      	cmp	r3, #34	; 0x22
 80059aa:	f040 80be 	bne.w	8005b2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80059b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80059bc:	b2d9      	uxtb	r1, r3
 80059be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c8:	400a      	ands	r2, r1
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 80a3 	bne.w	8005b3e <UART_RxISR_8BIT+0x1ae>
>>>>>>> develop
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80059b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e6      	bne.n	8005998 <UART_RxISR_8BIT+0x68>
=======
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e6      	bne.n	80059f8 <UART_RxISR_8BIT+0x68>
>>>>>>> develop
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	667b      	str	r3, [r7, #100]	; 0x64
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059ea:	647a      	str	r2, [r7, #68]	; 0x44
 80059ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e5      	bne.n	80059ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <UART_RxISR_8BIT+0x1b8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d01f      	beq.n	8005a5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d018      	beq.n	8005a5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	623b      	str	r3, [r7, #32]
   return(result);
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e6      	bne.n	8005a2a <UART_RxISR_8BIT+0xfa>
=======
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	667b      	str	r3, [r7, #100]	; 0x64
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3308      	adds	r3, #8
 8005a48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a4a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a34      	ldr	r2, [pc, #208]	; (8005b48 <UART_RxISR_8BIT+0x1b8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d01f      	beq.n	8005abc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	623b      	str	r3, [r7, #32]
   return(result);
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e6      	bne.n	8005a8a <UART_RxISR_8BIT+0xfa>
>>>>>>> develop
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d12e      	bne.n	8005ac2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0310 	bic.w	r3, r3, #16
 8005a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	69b9      	ldr	r1, [r7, #24]
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	617b      	str	r3, [r7, #20]
   return(result);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e6      	bne.n	8005a6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d103      	bne.n	8005ab2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2210      	movs	r2, #16
 8005ab0:	621a      	str	r2, [r3, #32]
=======
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d12e      	bne.n	8005b22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	69b9      	ldr	r1, [r7, #24]
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	617b      	str	r3, [r7, #20]
   return(result);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d103      	bne.n	8005b12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2210      	movs	r2, #16
 8005b10:	621a      	str	r2, [r3, #32]
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff f9b0 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
=======
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff f9b0 	bl	8004e80 <HAL_UARTEx_RxEventCallback>
>>>>>>> develop
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8005ac0:	e00d      	b.n	8005ade <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb f930 	bl	8000d28 <HAL_UART_RxCpltCallback>
}
 8005ac8:	e009      	b.n	8005ade <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	8b1b      	ldrh	r3, [r3, #24]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0208 	orr.w	r2, r2, #8
 8005ada:	b292      	uxth	r2, r2
 8005adc:	831a      	strh	r2, [r3, #24]
}
 8005ade:	bf00      	nop
 8005ae0:	3770      	adds	r7, #112	; 0x70
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40008000 	.word	0x40008000

08005aec <UART_RxISR_16BIT>:
=======
 8005b20:	e00d      	b.n	8005b3e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb f932 	bl	8000d8c <HAL_UART_RxCpltCallback>
}
 8005b28:	e009      	b.n	8005b3e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	8b1b      	ldrh	r3, [r3, #24]
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0208 	orr.w	r2, r2, #8
 8005b3a:	b292      	uxth	r2, r2
 8005b3c:	831a      	strh	r2, [r3, #24]
}
 8005b3e:	bf00      	nop
 8005b40:	3770      	adds	r7, #112	; 0x70
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40008000 	.word	0x40008000

08005b4c <UART_RxISR_16BIT>:
>>>>>>> develop
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b09c      	sub	sp, #112	; 0x70
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005afa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
=======
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b09c      	sub	sp, #112	; 0x70
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
>>>>>>> develop
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b04:	2b22      	cmp	r3, #34	; 0x22
 8005b06:	f040 80be 	bne.w	8005c86 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b18:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b1a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005b1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b22:	4013      	ands	r3, r2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 80a3 	bne.w	8005c9a <UART_RxISR_16BIT+0x1ae>
=======
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b64:	2b22      	cmp	r3, #34	; 0x22
 8005b66:	f040 80be 	bne.w	8005ce6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005b7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b82:	4013      	ands	r3, r2
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8e:	1c9a      	adds	r2, r3, #2
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 80a3 	bne.w	8005cfa <UART_RxISR_16BIT+0x1ae>
>>>>>>> develop
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b68:	667b      	str	r3, [r7, #100]	; 0x64
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b72:	657b      	str	r3, [r7, #84]	; 0x54
 8005b74:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_RxISR_16BIT+0x68>
=======
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bd4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e6      	bne.n	8005bb4 <UART_RxISR_16BIT+0x68>
>>>>>>> develop
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ba6:	643a      	str	r2, [r7, #64]	; 0x40
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a34      	ldr	r2, [pc, #208]	; (8005ca4 <UART_RxISR_16BIT+0x1b8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d01f      	beq.n	8005c18 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d018      	beq.n	8005c18 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c06:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e6      	bne.n	8005be6 <UART_RxISR_16BIT+0xfa>
=======
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c06:	643a      	str	r2, [r7, #64]	; 0x40
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e5      	bne.n	8005be6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <UART_RxISR_16BIT+0x1b8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d01f      	beq.n	8005c78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e6      	bne.n	8005c46 <UART_RxISR_16BIT+0xfa>
>>>>>>> develop
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d12e      	bne.n	8005c7e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0310 	bic.w	r3, r3, #16
 8005c3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f003 0310 	and.w	r3, r3, #16
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	d103      	bne.n	8005c6e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	621a      	str	r2, [r3, #32]
=======
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d12e      	bne.n	8005cde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6979      	ldr	r1, [r7, #20]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e6      	bne.n	8005c86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d103      	bne.n	8005cce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2210      	movs	r2, #16
 8005ccc:	621a      	str	r2, [r3, #32]
>>>>>>> develop
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff f8d2 	bl	8004e20 <HAL_UARTEx_RxEventCallback>
=======
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff f8d2 	bl	8004e80 <HAL_UARTEx_RxEventCallback>
>>>>>>> develop
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8005c7c:	e00d      	b.n	8005c9a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fb f852 	bl	8000d28 <HAL_UART_RxCpltCallback>
}
 8005c84:	e009      	b.n	8005c9a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	8b1b      	ldrh	r3, [r3, #24]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0208 	orr.w	r2, r2, #8
 8005c96:	b292      	uxth	r2, r2
 8005c98:	831a      	strh	r2, [r3, #24]
}
 8005c9a:	bf00      	nop
 8005c9c:	3770      	adds	r7, #112	; 0x70
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40008000 	.word	0x40008000

08005ca8 <HAL_UARTEx_WakeupCallback>:
=======
 8005cdc:	e00d      	b.n	8005cfa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fb f854 	bl	8000d8c <HAL_UART_RxCpltCallback>
}
 8005ce4:	e009      	b.n	8005cfa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	8b1b      	ldrh	r3, [r3, #24]
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0208 	orr.w	r2, r2, #8
 8005cf6:	b292      	uxth	r2, r2
 8005cf8:	831a      	strh	r2, [r3, #24]
}
 8005cfa:	bf00      	nop
 8005cfc:	3770      	adds	r7, #112	; 0x70
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	40008000 	.word	0x40008000

08005d08 <HAL_UARTEx_WakeupCallback>:
>>>>>>> develop
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
=======
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
>>>>>>> develop
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <memset>:
 8005cbc:	4402      	add	r2, r0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d100      	bne.n	8005cc6 <memset+0xa>
 8005cc4:	4770      	bx	lr
 8005cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cca:	e7f9      	b.n	8005cc0 <memset+0x4>

08005ccc <__libc_init_array>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	4d0d      	ldr	r5, [pc, #52]	; (8005d04 <__libc_init_array+0x38>)
 8005cd0:	4c0d      	ldr	r4, [pc, #52]	; (8005d08 <__libc_init_array+0x3c>)
 8005cd2:	1b64      	subs	r4, r4, r5
 8005cd4:	10a4      	asrs	r4, r4, #2
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	42a6      	cmp	r6, r4
 8005cda:	d109      	bne.n	8005cf0 <__libc_init_array+0x24>
 8005cdc:	4d0b      	ldr	r5, [pc, #44]	; (8005d0c <__libc_init_array+0x40>)
 8005cde:	4c0c      	ldr	r4, [pc, #48]	; (8005d10 <__libc_init_array+0x44>)
 8005ce0:	f000 f818 	bl	8005d14 <_init>
 8005ce4:	1b64      	subs	r4, r4, r5
 8005ce6:	10a4      	asrs	r4, r4, #2
 8005ce8:	2600      	movs	r6, #0
 8005cea:	42a6      	cmp	r6, r4
 8005cec:	d105      	bne.n	8005cfa <__libc_init_array+0x2e>
 8005cee:	bd70      	pop	{r4, r5, r6, pc}
 8005cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf4:	4798      	blx	r3
 8005cf6:	3601      	adds	r6, #1
 8005cf8:	e7ee      	b.n	8005cd8 <__libc_init_array+0xc>
 8005cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfe:	4798      	blx	r3
 8005d00:	3601      	adds	r6, #1
 8005d02:	e7f2      	b.n	8005cea <__libc_init_array+0x1e>
 8005d04:	08005d7c 	.word	0x08005d7c
 8005d08:	08005d7c 	.word	0x08005d7c
 8005d0c:	08005d7c 	.word	0x08005d7c
 8005d10:	08005d80 	.word	0x08005d80

08005d14 <_init>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr

08005d20 <_fini>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr
=======
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <memset>:
 8005d1c:	4402      	add	r2, r0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d100      	bne.n	8005d26 <memset+0xa>
 8005d24:	4770      	bx	lr
 8005d26:	f803 1b01 	strb.w	r1, [r3], #1
 8005d2a:	e7f9      	b.n	8005d20 <memset+0x4>

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4d0d      	ldr	r5, [pc, #52]	; (8005d64 <__libc_init_array+0x38>)
 8005d30:	4c0d      	ldr	r4, [pc, #52]	; (8005d68 <__libc_init_array+0x3c>)
 8005d32:	1b64      	subs	r4, r4, r5
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	2600      	movs	r6, #0
 8005d38:	42a6      	cmp	r6, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	4d0b      	ldr	r5, [pc, #44]	; (8005d6c <__libc_init_array+0x40>)
 8005d3e:	4c0c      	ldr	r4, [pc, #48]	; (8005d70 <__libc_init_array+0x44>)
 8005d40:	f000 f818 	bl	8005d74 <_init>
 8005d44:	1b64      	subs	r4, r4, r5
 8005d46:	10a4      	asrs	r4, r4, #2
 8005d48:	2600      	movs	r6, #0
 8005d4a:	42a6      	cmp	r6, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d54:	4798      	blx	r3
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5e:	4798      	blx	r3
 8005d60:	3601      	adds	r6, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	08005ddc 	.word	0x08005ddc
 8005d68:	08005ddc 	.word	0x08005ddc
 8005d6c:	08005ddc 	.word	0x08005ddc
 8005d70:	08005de0 	.word	0x08005de0

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
>>>>>>> develop
