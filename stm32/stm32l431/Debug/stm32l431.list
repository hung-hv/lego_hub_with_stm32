
stm32l431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dac  08004dac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db4  08004db4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000010  08004dcc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08004dcc  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f260  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e2  00000000  00000000  0002f2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  000313c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d8  00000000  00000000  00032098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002141d  00000000  00000000  00032a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9c5  00000000  00000000  00053e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d08e1  00000000  00000000  00062852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035bc  00000000  00000000  00133134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001366f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004d4c 	.word	0x08004d4c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004d4c 	.word	0x08004d4c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fdd3 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f828 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa24 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 fa04 	bl	80008e4 <MX_DMA_Init>
  MX_ADC1_Init();
 80004dc:	f000 f872 	bl	80005c4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 f9d0 	bl	8000884 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 16);
 80004e4:	2210      	movs	r2, #16
 80004e6:	490c      	ldr	r1, [pc, #48]	; (8000518 <main+0x50>)
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <main+0x54>)
 80004ea:	f001 f979 	bl	80017e0 <HAL_ADC_Start_DMA>
	HAL_Delay(10);
 80004ee:	200a      	movs	r0, #10
 80004f0:	f000 fe36 	bl	8001160 <HAL_Delay>
	ProcessLineSensor();
 80004f4:	f000 fa8c 	bl	8000a10 <ProcessLineSensor>

	while_counter++;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x58>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x58>)
 8000500:	6013      	str	r3, [r2, #0]
	if (while_counter >=10000) while_counter = 0;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <main+0x58>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f242 720f 	movw	r2, #9999	; 0x270f
 800050a:	4293      	cmp	r3, r2
 800050c:	d9ea      	bls.n	80004e4 <main+0x1c>
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <main+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 16);
 8000514:	e7e6      	b.n	80004e4 <main+0x1c>
 8000516:	bf00      	nop
 8000518:	20000160 	.word	0x20000160
 800051c:	2000002c 	.word	0x2000002c
 8000520:	200001b0 	.word	0x200001b0

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	; 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2244      	movs	r2, #68	; 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fbdd 	bl	8004cf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000546:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054a:	f002 fd77 	bl	800303c <HAL_PWREx_ControlVoltageScaling>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000554:	f000 fbc4 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	2303      	movs	r3, #3
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800056e:	2314      	movs	r3, #20
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000572:	2307      	movs	r3, #7
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fdb0 	bl	80030e8 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800058e:	f000 fba7 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2303      	movs	r3, #3
 8000598:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	2104      	movs	r1, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 f9b0 	bl	8003910 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b6:	f000 fb93 	bl	8000ce0 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3758      	adds	r7, #88	; 0x58
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	463b      	mov	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
 80005d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005da:	4b98      	ldr	r3, [pc, #608]	; (800083c <MX_ADC1_Init+0x278>)
 80005dc:	4a98      	ldr	r2, [pc, #608]	; (8000840 <MX_ADC1_Init+0x27c>)
 80005de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005e0:	4b96      	ldr	r3, [pc, #600]	; (800083c <MX_ADC1_Init+0x278>)
 80005e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e8:	4b94      	ldr	r3, [pc, #592]	; (800083c <MX_ADC1_Init+0x278>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ee:	4b93      	ldr	r3, [pc, #588]	; (800083c <MX_ADC1_Init+0x278>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005f4:	4b91      	ldr	r3, [pc, #580]	; (800083c <MX_ADC1_Init+0x278>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b90      	ldr	r3, [pc, #576]	; (800083c <MX_ADC1_Init+0x278>)
 80005fc:	2204      	movs	r2, #4
 80005fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000600:	4b8e      	ldr	r3, [pc, #568]	; (800083c <MX_ADC1_Init+0x278>)
 8000602:	2200      	movs	r2, #0
 8000604:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000606:	4b8d      	ldr	r3, [pc, #564]	; (800083c <MX_ADC1_Init+0x278>)
 8000608:	2201      	movs	r2, #1
 800060a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 16;
 800060c:	4b8b      	ldr	r3, [pc, #556]	; (800083c <MX_ADC1_Init+0x278>)
 800060e:	2210      	movs	r2, #16
 8000610:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000612:	4b8a      	ldr	r3, [pc, #552]	; (800083c <MX_ADC1_Init+0x278>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061a:	4b88      	ldr	r3, [pc, #544]	; (800083c <MX_ADC1_Init+0x278>)
 800061c:	2200      	movs	r2, #0
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000620:	4b86      	ldr	r3, [pc, #536]	; (800083c <MX_ADC1_Init+0x278>)
 8000622:	2200      	movs	r2, #0
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000626:	4b85      	ldr	r3, [pc, #532]	; (800083c <MX_ADC1_Init+0x278>)
 8000628:	2201      	movs	r2, #1
 800062a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800062e:	4b83      	ldr	r3, [pc, #524]	; (800083c <MX_ADC1_Init+0x278>)
 8000630:	2200      	movs	r2, #0
 8000632:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000634:	4b81      	ldr	r3, [pc, #516]	; (800083c <MX_ADC1_Init+0x278>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	487f      	ldr	r0, [pc, #508]	; (800083c <MX_ADC1_Init+0x278>)
 800063e:	f000 ff8d 	bl	800155c <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000648:	f000 fb4a 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800064c:	4b7d      	ldr	r3, [pc, #500]	; (8000844 <MX_ADC1_Init+0x280>)
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2306      	movs	r3, #6
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000658:	237f      	movs	r3, #127	; 0x7f
 800065a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800065c:	2304      	movs	r3, #4
 800065e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4874      	ldr	r0, [pc, #464]	; (800083c <MX_ADC1_Init+0x278>)
 800066a:	f001 fb0f 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000674:	f000 fb34 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000678:	4b73      	ldr	r3, [pc, #460]	; (8000848 <MX_ADC1_Init+0x284>)
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800067c:	230c      	movs	r3, #12
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	486d      	ldr	r0, [pc, #436]	; (800083c <MX_ADC1_Init+0x278>)
 8000686:	f001 fb01 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000690:	f000 fb26 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000694:	4b6d      	ldr	r3, [pc, #436]	; (800084c <MX_ADC1_Init+0x288>)
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000698:	2312      	movs	r3, #18
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4866      	ldr	r0, [pc, #408]	; (800083c <MX_ADC1_Init+0x278>)
 80006a2:	f001 faf3 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80006ac:	f000 fb18 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006b0:	4b67      	ldr	r3, [pc, #412]	; (8000850 <MX_ADC1_Init+0x28c>)
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006b4:	2318      	movs	r3, #24
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	485f      	ldr	r0, [pc, #380]	; (800083c <MX_ADC1_Init+0x278>)
 80006be:	f001 fae5 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 80006c8:	f000 fb0a 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006cc:	4b61      	ldr	r3, [pc, #388]	; (8000854 <MX_ADC1_Init+0x290>)
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4619      	mov	r1, r3
 80006da:	4858      	ldr	r0, [pc, #352]	; (800083c <MX_ADC1_Init+0x278>)
 80006dc:	f001 fad6 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80006e6:	f000 fafb 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006ea:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <MX_ADC1_Init+0x294>)
 80006ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006ee:	f44f 7383 	mov.w	r3, #262	; 0x106
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4850      	ldr	r0, [pc, #320]	; (800083c <MX_ADC1_Init+0x278>)
 80006fa:	f001 fac7 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000704:	f000 faec 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000708:	4b54      	ldr	r3, [pc, #336]	; (800085c <MX_ADC1_Init+0x298>)
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800070c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000710:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4849      	ldr	r0, [pc, #292]	; (800083c <MX_ADC1_Init+0x278>)
 8000718:	f001 fab8 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8000722:	f000 fadd 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000726:	4b4e      	ldr	r3, [pc, #312]	; (8000860 <MX_ADC1_Init+0x29c>)
 8000728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800072a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4841      	ldr	r0, [pc, #260]	; (800083c <MX_ADC1_Init+0x278>)
 8000736:	f001 faa9 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8000740:	f000 face 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000744:	4b47      	ldr	r3, [pc, #284]	; (8000864 <MX_ADC1_Init+0x2a0>)
 8000746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000748:	f44f 738c 	mov.w	r3, #280	; 0x118
 800074c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	483a      	ldr	r0, [pc, #232]	; (800083c <MX_ADC1_Init+0x278>)
 8000754:	f001 fa9a 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x19e>
  {
    Error_Handler();
 800075e:	f000 fabf 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <MX_ADC1_Init+0x2a4>)
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4832      	ldr	r0, [pc, #200]	; (800083c <MX_ADC1_Init+0x278>)
 8000772:	f001 fa8b 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 800077c:	f000 fab0 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000780:	4b3a      	ldr	r3, [pc, #232]	; (800086c <MX_ADC1_Init+0x2a8>)
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000784:	f240 2306 	movw	r3, #518	; 0x206
 8000788:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	482b      	ldr	r0, [pc, #172]	; (800083c <MX_ADC1_Init+0x278>)
 8000790:	f001 fa7c 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 800079a:	f000 faa1 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800079e:	4b34      	ldr	r3, [pc, #208]	; (8000870 <MX_ADC1_Init+0x2ac>)
 80007a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 80007a2:	f44f 7303 	mov.w	r3, #524	; 0x20c
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <MX_ADC1_Init+0x278>)
 80007ae:	f001 fa6d 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x1f8>
  {
    Error_Handler();
 80007b8:	f000 fa92 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_ADC1_Init+0x2b0>)
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80007c0:	f240 2312 	movw	r3, #530	; 0x212
 80007c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	463b      	mov	r3, r7
 80007c8:	4619      	mov	r1, r3
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <MX_ADC1_Init+0x278>)
 80007cc:	f001 fa5e 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x216>
  {
    Error_Handler();
 80007d6:	f000 fa83 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <MX_ADC1_Init+0x2b4>)
 80007dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80007de:	f44f 7306 	mov.w	r3, #536	; 0x218
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4814      	ldr	r0, [pc, #80]	; (800083c <MX_ADC1_Init+0x278>)
 80007ea:	f001 fa4f 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 80007f4:	f000 fa74 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_ADC1_Init+0x2b8>)
 80007fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 80007fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000800:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_ADC1_Init+0x278>)
 8000808:	f001 fa40 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0x252>
  {
    Error_Handler();
 8000812:	f000 fa65 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_ADC1_Init+0x2bc>)
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 800081a:	f240 3306 	movw	r3, #774	; 0x306
 800081e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_ADC1_Init+0x278>)
 8000826:	f001 fa31 	bl	8001c8c <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x270>
  {
    Error_Handler();
 8000830:	f000 fa56 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000002c 	.word	0x2000002c
 8000840:	50040000 	.word	0x50040000
 8000844:	04300002 	.word	0x04300002
 8000848:	08600004 	.word	0x08600004
 800084c:	0c900008 	.word	0x0c900008
 8000850:	10c00010 	.word	0x10c00010
 8000854:	14f00020 	.word	0x14f00020
 8000858:	19200040 	.word	0x19200040
 800085c:	1d500080 	.word	0x1d500080
 8000860:	21800100 	.word	0x21800100
 8000864:	25b00200 	.word	0x25b00200
 8000868:	2a000400 	.word	0x2a000400
 800086c:	2e300800 	.word	0x2e300800
 8000870:	32601000 	.word	0x32601000
 8000874:	36902000 	.word	0x36902000
 8000878:	3ac04000 	.word	0x3ac04000
 800087c:	3ef08000 	.word	0x3ef08000
 8000880:	43210000 	.word	0x43210000

08000884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART1_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000890:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c8:	f003 fd50 	bl	800436c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 fa05 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000d8 	.word	0x200000d8
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_DMA_Init+0x38>)
 80008ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_DMA_Init+0x38>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6493      	str	r3, [r2, #72]	; 0x48
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_DMA_Init+0x38>)
 80008f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200b      	movs	r0, #11
 8000908:	f001 ffc9 	bl	800289e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090c:	200b      	movs	r0, #11
 800090e:	f001 ffe2 	bl	80028d6 <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_GPIO_Init+0xa8>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_GPIO_Init+0xa8>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MX_GPIO_Init+0xa8>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <MX_GPIO_Init+0xa8>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_GPIO_Init+0xa8>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0xac>)
 800099e:	f002 fb27 	bl	8002ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0xac>)
 80009bc:	f002 f99e 	bl	8002cfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000800 	.word	0x48000800

080009d0 <map>:

/* USER CODE BEGIN 4 */

uint8_t map(int input, int input_min, int input_max, int output_min, int output_max) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
    return (input - input_min) * (output_max - output_min) / (input_max - input_min) + output_min;
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	69b9      	ldr	r1, [r7, #24]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	1a8a      	subs	r2, r1, r2
 80009ea:	fb03 f202 	mul.w	r2, r3, r2
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1acb      	subs	r3, r1, r3
 80009f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4413      	add	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <ProcessLineSensor>:
 * Weighted: 	-3	  -2   -1   0    0    1    2    3
 * Index:		[8]  [9]  [10]  [11]  [12]  [13]  [14]  [15]
 *
 *
 */
int16_t ProcessLineSensor(void) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
//	uint16_t after_offset[8];
//	int16_t horizontal_value = 0; // ---
//	int16_t vertical_value = 0;   //   |
	working_sensor_horizontal = 0;
 8000a16:	4b8e      	ldr	r3, [pc, #568]	; (8000c50 <ProcessLineSensor+0x240>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
	working_sensor_vertical = 0;
 8000a1c:	4b8d      	ldr	r3, [pc, #564]	; (8000c54 <ProcessLineSensor+0x244>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
	working_sensor_total = 0;
 8000a22:	4b8d      	ldr	r3, [pc, #564]	; (8000c58 <ProcessLineSensor+0x248>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]


//	sum_after_offset = 0;
	for (int i = 0; i<16; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	e035      	b.n	8000a9a <ProcessLineSensor+0x8a>
		after_offset[i] = adc_buffer[i] - OFFSET_SENSOR;
 8000a2e:	4a8b      	ldr	r2, [pc, #556]	; (8000c5c <ProcessLineSensor+0x24c>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a36:	f6a3 53de 	subw	r3, r3, #3550	; 0xdde
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b219      	sxth	r1, r3
 8000a3e:	4a88      	ldr	r2, [pc, #544]	; (8000c60 <ProcessLineSensor+0x250>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (after_offset[i] < 0) after_offset[i] = 0;
 8000a46:	4a86      	ldr	r2, [pc, #536]	; (8000c60 <ProcessLineSensor+0x250>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da04      	bge.n	8000a5c <ProcessLineSensor+0x4c>
 8000a52:	4a83      	ldr	r2, [pc, #524]	; (8000c60 <ProcessLineSensor+0x250>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2100      	movs	r1, #0
 8000a58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		sum_after_offset = sum_after_offset + after_offset[i];
		if (after_offset[i] != 0)  {
 8000a5c:	4a80      	ldr	r2, [pc, #512]	; (8000c60 <ProcessLineSensor+0x250>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d015      	beq.n	8000a94 <ProcessLineSensor+0x84>
			working_sensor_total++;
 8000a68:	4b7b      	ldr	r3, [pc, #492]	; (8000c58 <ProcessLineSensor+0x248>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b79      	ldr	r3, [pc, #484]	; (8000c58 <ProcessLineSensor+0x248>)
 8000a72:	701a      	strb	r2, [r3, #0]
			if (i < 8) working_sensor_horizontal++;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	dc06      	bgt.n	8000a88 <ProcessLineSensor+0x78>
 8000a7a:	4b75      	ldr	r3, [pc, #468]	; (8000c50 <ProcessLineSensor+0x240>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <ProcessLineSensor+0x240>)
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e005      	b.n	8000a94 <ProcessLineSensor+0x84>
			else working_sensor_vertical++;
 8000a88:	4b72      	ldr	r3, [pc, #456]	; (8000c54 <ProcessLineSensor+0x244>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b70      	ldr	r3, [pc, #448]	; (8000c54 <ProcessLineSensor+0x244>)
 8000a92:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<16; i++) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3301      	adds	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	ddc6      	ble.n	8000a2e <ProcessLineSensor+0x1e>
		}
	}
	/*calculate direction of line*/
	if (working_sensor_horizontal > working_sensor_vertical) line_direction = 0;
 8000aa0:	4b6b      	ldr	r3, [pc, #428]	; (8000c50 <ProcessLineSensor+0x240>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	4b6b      	ldr	r3, [pc, #428]	; (8000c54 <ProcessLineSensor+0x244>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d902      	bls.n	8000ab2 <ProcessLineSensor+0xa2>
 8000aac:	4b6d      	ldr	r3, [pc, #436]	; (8000c64 <ProcessLineSensor+0x254>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
	if (working_sensor_horizontal < working_sensor_vertical) line_direction = 1;
 8000ab2:	4b67      	ldr	r3, [pc, #412]	; (8000c50 <ProcessLineSensor+0x240>)
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	4b67      	ldr	r3, [pc, #412]	; (8000c54 <ProcessLineSensor+0x244>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d202      	bcs.n	8000ac4 <ProcessLineSensor+0xb4>
 8000abe:	4b69      	ldr	r3, [pc, #420]	; (8000c64 <ProcessLineSensor+0x254>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]

	if (working_sensor_horizontal <=3 && working_sensor_horizontal >= 2) {
 8000ac4:	4b62      	ldr	r3, [pc, #392]	; (8000c50 <ProcessLineSensor+0x240>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d855      	bhi.n	8000b78 <ProcessLineSensor+0x168>
 8000acc:	4b60      	ldr	r3, [pc, #384]	; (8000c50 <ProcessLineSensor+0x240>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d951      	bls.n	8000b78 <ProcessLineSensor+0x168>
		horizontal_value = -(after_offset[0]*(-5) + after_offset[1]*(-2) + after_offset[2]*(-1)
 8000ad4:	4b62      	ldr	r3, [pc, #392]	; (8000c60 <ProcessLineSensor+0x250>)
 8000ad6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	4b60      	ldr	r3, [pc, #384]	; (8000c60 <ProcessLineSensor+0x250>)
 8000ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	0389      	lsls	r1, r1, #14
 8000ae8:	1ac9      	subs	r1, r1, r3
 8000aea:	0089      	lsls	r1, r1, #2
 8000aec:	1acb      	subs	r3, r1, r3
 8000aee:	b299      	uxth	r1, r3
 8000af0:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <ProcessLineSensor+0x250>)
 8000af2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	03c0      	lsls	r0, r0, #15
 8000afc:	1ac3      	subs	r3, r0, r3
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	440b      	add	r3, r1
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	b29a      	uxth	r2, r3
						 + after_offset[5]*(1) + after_offset[6]*(2) + after_offset[7]*(5));
 8000b0a:	4b55      	ldr	r3, [pc, #340]	; (8000c60 <ProcessLineSensor+0x250>)
 8000b0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b52      	ldr	r3, [pc, #328]	; (8000c60 <ProcessLineSensor+0x250>)
 8000b18:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	0389      	lsls	r1, r1, #14
 8000b22:	1ac9      	subs	r1, r1, r3
 8000b24:	0089      	lsls	r1, r1, #2
 8000b26:	1acb      	subs	r3, r1, r3
 8000b28:	b299      	uxth	r1, r3
 8000b2a:	4b4d      	ldr	r3, [pc, #308]	; (8000c60 <ProcessLineSensor+0x250>)
 8000b2c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	b29b      	uxth	r3, r3
		horizontal_value = -(after_offset[0]*(-5) + after_offset[1]*(-2) + after_offset[2]*(-1)
 8000b36:	1acb      	subs	r3, r1, r3
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <ProcessLineSensor+0x258>)
 8000b42:	801a      	strh	r2, [r3, #0]
		if (horizontal_value > 500) horizontal_value = 500;
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <ProcessLineSensor+0x258>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b4e:	dd03      	ble.n	8000b58 <ProcessLineSensor+0x148>
 8000b50:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <ProcessLineSensor+0x258>)
 8000b52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b56:	801a      	strh	r2, [r3, #0]
		if (horizontal_value < -500) horizontal_value = -500;
 8000b58:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <ProcessLineSensor+0x258>)
 8000b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b5e:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000b62:	da03      	bge.n	8000b6c <ProcessLineSensor+0x15c>
 8000b64:	4b40      	ldr	r3, [pc, #256]	; (8000c68 <ProcessLineSensor+0x258>)
 8000b66:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8000b6a:	801a      	strh	r2, [r3, #0]
		last_horizon_value = horizontal_value;
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <ProcessLineSensor+0x258>)
 8000b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b72:	4b3e      	ldr	r3, [pc, #248]	; (8000c6c <ProcessLineSensor+0x25c>)
 8000b74:	801a      	strh	r2, [r3, #0]
 8000b76:	e004      	b.n	8000b82 <ProcessLineSensor+0x172>
	} else {
		/*out of line or to many sensors in 1 line*/
		horizontal_value = last_horizon_value;
 8000b78:	4b3c      	ldr	r3, [pc, #240]	; (8000c6c <ProcessLineSensor+0x25c>)
 8000b7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b7e:	4b3a      	ldr	r3, [pc, #232]	; (8000c68 <ProcessLineSensor+0x258>)
 8000b80:	801a      	strh	r2, [r3, #0]
	}
	if (working_sensor_vertical <=3 && working_sensor_vertical >= 2) {
 8000b82:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <ProcessLineSensor+0x244>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d855      	bhi.n	8000c36 <ProcessLineSensor+0x226>
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <ProcessLineSensor+0x244>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d951      	bls.n	8000c36 <ProcessLineSensor+0x226>
		vertical_value = -(after_offset[8]*(-5) + after_offset[9]*(-2) + after_offset[10]*(-1)
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <ProcessLineSensor+0x250>)
 8000b94:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <ProcessLineSensor+0x250>)
 8000b9c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	0389      	lsls	r1, r1, #14
 8000ba6:	1ac9      	subs	r1, r1, r3
 8000ba8:	0089      	lsls	r1, r1, #2
 8000baa:	1acb      	subs	r3, r1, r3
 8000bac:	b299      	uxth	r1, r3
 8000bae:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <ProcessLineSensor+0x250>)
 8000bb0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	03c0      	lsls	r0, r0, #15
 8000bba:	1ac3      	subs	r3, r0, r3
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	b29a      	uxth	r2, r3
							 + after_offset[13]*(1) + after_offset[14]*(2) + after_offset[15]*(5));
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <ProcessLineSensor+0x250>)
 8000bca:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <ProcessLineSensor+0x250>)
 8000bd6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4619      	mov	r1, r3
 8000bde:	0389      	lsls	r1, r1, #14
 8000be0:	1ac9      	subs	r1, r1, r3
 8000be2:	0089      	lsls	r1, r1, #2
 8000be4:	1acb      	subs	r3, r1, r3
 8000be6:	b299      	uxth	r1, r3
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <ProcessLineSensor+0x250>)
 8000bea:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	b29b      	uxth	r3, r3
		vertical_value = -(after_offset[8]*(-5) + after_offset[9]*(-2) + after_offset[10]*(-1)
 8000bf4:	1acb      	subs	r3, r1, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b21a      	sxth	r2, r3
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <ProcessLineSensor+0x260>)
 8000c00:	801a      	strh	r2, [r3, #0]
		if (vertical_value > 500) vertical_value = 500;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <ProcessLineSensor+0x260>)
 8000c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c0c:	dd03      	ble.n	8000c16 <ProcessLineSensor+0x206>
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <ProcessLineSensor+0x260>)
 8000c10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c14:	801a      	strh	r2, [r3, #0]
		if (vertical_value < -500) vertical_value = -500;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <ProcessLineSensor+0x260>)
 8000c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000c20:	da03      	bge.n	8000c2a <ProcessLineSensor+0x21a>
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <ProcessLineSensor+0x260>)
 8000c24:	f64f 620c 	movw	r2, #65036	; 0xfe0c
 8000c28:	801a      	strh	r2, [r3, #0]
		last_vertical_value = vertical_value;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <ProcessLineSensor+0x260>)
 8000c2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <ProcessLineSensor+0x264>)
 8000c32:	801a      	strh	r2, [r3, #0]
 8000c34:	e004      	b.n	8000c40 <ProcessLineSensor+0x230>
	} else {
		/*out of line or to many sensors in 1 line*/
		vertical_value = last_vertical_value;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <ProcessLineSensor+0x264>)
 8000c38:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <ProcessLineSensor+0x260>)
 8000c3e:	801a      	strh	r2, [r3, #0]
//		return_value = 500;
//	}
//
//	return return_value;

	return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200001a0 	.word	0x200001a0
 8000c54:	200001a1 	.word	0x200001a1
 8000c58:	200001a2 	.word	0x200001a2
 8000c5c:	20000160 	.word	0x20000160
 8000c60:	20000180 	.word	0x20000180
 8000c64:	20000000 	.word	0x20000000
 8000c68:	200001a4 	.word	0x200001a4
 8000c6c:	200001a8 	.word	0x200001a8
 8000c70:	200001a6 	.word	0x200001a6
 8000c74:	200001aa 	.word	0x200001aa

08000c78 <HAL_ADC_ConvCpltCallback>:
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	6078      	str	r0, [r7, #4]
	ProcessLineSensor();
 8000c80:	f7ff fec6 	bl	8000a10 <ProcessLineSensor>
	mapped_horizon_value = map(horizontal_value, -500, 500, 1, 101);
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_ADC_ConvCpltCallback+0x54>)
 8000c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	2365      	movs	r3, #101	; 0x65
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2301      	movs	r3, #1
 8000c92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c96:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000c98:	f7ff fe9a 	bl	80009d0 <map>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000ca2:	701a      	strb	r2, [r3, #0]
	mapped_vertical_value = map(vertical_value, -500, 500, 1, 101);
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000caa:	4618      	mov	r0, r3
 8000cac:	2365      	movs	r3, #101	; 0x65
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cb6:	4906      	ldr	r1, [pc, #24]	; (8000cd0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000cb8:	f7ff fe8a 	bl	80009d0 <map>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_ADC_ConvCpltCallback+0x64>)
 8000cc2:	701a      	strb	r2, [r3, #0]

}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001a4 	.word	0x200001a4
 8000cd0:	fffffe0c 	.word	0xfffffe0c
 8000cd4:	200001ac 	.word	0x200001ac
 8000cd8:	200001a6 	.word	0x200001a6
 8000cdc:	200001ad 	.word	0x200001ad

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_MspInit+0x44>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_MspInit+0x44>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_MspInit+0x44>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_MspInit+0x44>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0a2      	sub	sp, #136	; 0x88
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	225c      	movs	r2, #92	; 0x5c
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 ffcc 	bl	8004cf2 <memset>
  if(hadc->Instance==ADC1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a57      	ldr	r2, [pc, #348]	; (8000ebc <HAL_ADC_MspInit+0x188>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	f040 80a7 	bne.w	8000eb4 <HAL_ADC_MspInit+0x180>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d70:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000d72:	2303      	movs	r3, #3
 8000d74:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	f107 0318 	add.w	r3, r7, #24
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 ffdf 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000da0:	f7ff ff9e 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000da4:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	4a45      	ldr	r2, [pc, #276]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000daa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db0:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b40      	ldr	r3, [pc, #256]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	4a3f      	ldr	r2, [pc, #252]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	4a39      	ldr	r2, [pc, #228]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de0:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	4a33      	ldr	r2, [pc, #204]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df8:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <HAL_ADC_MspInit+0x18c>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e04:	233f      	movs	r3, #63	; 0x3f
 8000e06:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e08:	230b      	movs	r3, #11
 8000e0a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e14:	4619      	mov	r1, r3
 8000e16:	482b      	ldr	r0, [pc, #172]	; (8000ec4 <HAL_ADC_MspInit+0x190>)
 8000e18:	f001 ff70 	bl	8002cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e1c:	23ff      	movs	r3, #255	; 0xff
 8000e1e:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e20:	230b      	movs	r3, #11
 8000e22:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f001 ff63 	bl	8002cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e36:	2303      	movs	r3, #3
 8000e38:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e3a:	230b      	movs	r3, #11
 8000e3c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e46:	4619      	mov	r1, r3
 8000e48:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <HAL_ADC_MspInit+0x194>)
 8000e4a:	f001 ff57 	bl	8002cfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <HAL_ADC_MspInit+0x19c>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e72:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e7a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e7e:	2220      	movs	r2, #32
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e88:	4810      	ldr	r0, [pc, #64]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e8a:	f001 fd3f 	bl	800290c <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8000e94:	f7ff ff24 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000e9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_ADC_MspInit+0x198>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2012      	movs	r0, #18
 8000eaa:	f001 fcf8 	bl	800289e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000eae:	2012      	movs	r0, #18
 8000eb0:	f001 fd11 	bl	80028d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3788      	adds	r7, #136	; 0x88
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	50040000 	.word	0x50040000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	20000090 	.word	0x20000090
 8000ed0:	40020008 	.word	0x40020008

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0a0      	sub	sp, #128	; 0x80
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	225c      	movs	r2, #92	; 0x5c
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 fefc 	bl	8004cf2 <memset>
  if(huart->Instance==USART1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_UART_MspInit+0xa8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d137      	bne.n	8000f74 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 ff21 	bl	8003d58 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f1c:	f7ff fee0 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_UART_MspInit+0xac>)
 8000f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f24:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <HAL_UART_MspInit+0xac>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_UART_MspInit+0xac>)
 8000f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_UART_MspInit+0xac>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_UART_MspInit+0xac>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_UART_MspInit+0xac>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f62:	2307      	movs	r3, #7
 8000f64:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f001 fec4 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3780      	adds	r7, #128	; 0x80
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40013800 	.word	0x40013800
 8000f80:	40021000 	.word	0x40021000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f8a6 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <DMA1_Channel1_IRQHandler+0x10>)
 8000fde:	f001 fdad 	bl	8002b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000090 	.word	0x20000090

08000fec <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <ADC1_IRQHandler+0x10>)
 8000ff2:	f000 fc79 	bl	80018e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000002c 	.word	0x2000002c

08001000 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001028:	f7ff ffea 	bl	8001000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <LoopForever+0x6>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	; (8001064 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LoopForever+0xe>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	; (8001070 <LoopForever+0x16>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f003 fe57 	bl	8004d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001056:	f7ff fa37 	bl	80004c8 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800105c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001068:	08004dbc 	.word	0x08004dbc
  ldr r2, =_sbss
 800106c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001070:	200001b8 	.word	0x200001b8

08001074 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <CAN1_RX0_IRQHandler>

08001076 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f001 fc01 	bl	8002888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	200f      	movs	r0, #15
 8001088:	f000 f80e 	bl	80010a8 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	e001      	b.n	800109c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001098:	f7ff fe28 	bl	8000cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109c:	79fb      	ldrb	r3, [r7, #7]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_InitTick+0x6c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d023      	beq.n	8001104 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_InitTick+0x70>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fc0d 	bl	80028f2 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d809      	bhi.n	80010f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f001 fbd7 	bl	800289e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_InitTick+0x74>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e007      	b.n	8001108 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e004      	b.n	8001108 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e001      	b.n	8001108 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000000c 	.word	0x2000000c
 8001118:	20000004 	.word	0x20000004
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000000c 	.word	0x2000000c
 8001144:	200001b4 	.word	0x200001b4

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200001b4 	.word	0x200001b4

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000000c 	.word	0x2000000c

080011a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3360      	adds	r3, #96	; 0x60
 8001222:	461a      	mov	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <LL_ADC_SetOffset+0x44>)
 8001232:	4013      	ands	r3, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	4313      	orrs	r3, r2
 8001240:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	03fff000 	.word	0x03fff000

08001258 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3360      	adds	r3, #96	; 0x60
 8001266:	461a      	mov	r2, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3360      	adds	r3, #96	; 0x60
 8001294:	461a      	mov	r2, r3
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012ae:	bf00      	nop
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3330      	adds	r3, #48	; 0x30
 80012f0:	461a      	mov	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	4413      	add	r3, r2
 80012fe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	211f      	movs	r1, #31
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	0e9b      	lsrs	r3, r3, #26
 8001318:	f003 011f 	and.w	r1, r3, #31
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	431a      	orrs	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800132c:	bf00      	nop
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800135e:	b480      	push	{r7}
 8001360:	b087      	sub	sp, #28
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3314      	adds	r3, #20
 800136e:	461a      	mov	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	0e5b      	lsrs	r3, r3, #25
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0d1b      	lsrs	r3, r3, #20
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	2107      	movs	r1, #7
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	0d1b      	lsrs	r3, r3, #20
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	431a      	orrs	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0318 	and.w	r3, r3, #24
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013d8:	40d9      	lsrs	r1, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	400b      	ands	r3, r1
 80013de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e2:	431a      	orrs	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	0007ffff 	.word	0x0007ffff

080013fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800140c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6093      	str	r3, [r2, #8]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001434:	d101      	bne.n	800143a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001484:	d101      	bne.n	800148a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <LL_ADC_IsEnabled+0x18>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <LL_ADC_IsEnabled+0x1a>
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014fa:	f043 0204 	orr.w	r2, r3, #4
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b04      	cmp	r3, #4
 8001520:	d101      	bne.n	8001526 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b08      	cmp	r3, #8
 8001546:	d101      	bne.n	800154c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e126      	b.n	80017c4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001580:	2b00      	cmp	r3, #0
 8001582:	d109      	bne.n	8001598 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fbd5 	bl	8000d34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff3f 	bl	8001420 <LL_ADC_IsDeepPowerDownEnabled>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff25 	bl	80013fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff5a 	bl	8001470 <LL_ADC_IsInternalRegulatorEnabled>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d115      	bne.n	80015ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff3e 	bl	8001448 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015cc:	4b7f      	ldr	r3, [pc, #508]	; (80017cc <HAL_ADC_Init+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	099b      	lsrs	r3, r3, #6
 80015d2:	4a7f      	ldr	r2, [pc, #508]	; (80017d0 <HAL_ADC_Init+0x274>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	3301      	adds	r3, #1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015e0:	e002      	b.n	80015e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f9      	bne.n	80015e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff3c 	bl	8001470 <LL_ADC_IsInternalRegulatorEnabled>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10d      	bne.n	800161a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f043 0210 	orr.w	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff75 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 8001624:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 80bf 	bne.w	80017b2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 80bb 	bne.w	80017b2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001644:	f043 0202 	orr.w	r2, r3, #2
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff35 	bl	80014c0 <LL_ADC_IsEnabled>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10b      	bne.n	8001674 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800165c:	485d      	ldr	r0, [pc, #372]	; (80017d4 <HAL_ADC_Init+0x278>)
 800165e:	f7ff ff2f 	bl	80014c0 <LL_ADC_IsEnabled>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4619      	mov	r1, r3
 800166e:	485a      	ldr	r0, [pc, #360]	; (80017d8 <HAL_ADC_Init+0x27c>)
 8001670:	f7ff fd9a 	bl	80011a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e5b      	ldrb	r3, [r3, #25]
 8001678:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800167e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001684:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800168a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001692:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d106      	bne.n	80016b0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	3b01      	subs	r3, #1
 80016a8:	045b      	lsls	r3, r3, #17
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_ADC_Init+0x280>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	69b9      	ldr	r1, [r7, #24]
 80016dc:	430b      	orrs	r3, r1
 80016de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff25 	bl	8001534 <LL_ADC_INJ_IsConversionOngoing>
 80016ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d13d      	bne.n	800176e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d13a      	bne.n	800176e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001704:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001714:	f023 0302 	bic.w	r3, r3, #2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	69b9      	ldr	r1, [r7, #24]
 800171e:	430b      	orrs	r3, r1
 8001720:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001728:	2b01      	cmp	r3, #1
 800172a:	d118      	bne.n	800175e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001748:	4311      	orrs	r1, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800174e:	430a      	orrs	r2, r1
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	e007      	b.n	800176e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10c      	bne.n	8001790 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	f023 010f 	bic.w	r1, r3, #15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
 800178e:	e007      	b.n	80017a0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 020f 	bic.w	r2, r2, #15
 800179e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a4:	f023 0303 	bic.w	r3, r3, #3
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
 80017b0:	e007      	b.n	80017c2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b6:	f043 0210 	orr.w	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000004 	.word	0x20000004
 80017d0:	053e2d63 	.word	0x053e2d63
 80017d4:	50040000 	.word	0x50040000
 80017d8:	50040300 	.word	0x50040300
 80017dc:	fff0c007 	.word	0xfff0c007

080017e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe8c 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d167      	bne.n	80018cc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_ADC_Start_DMA+0x2a>
 8001806:	2302      	movs	r3, #2
 8001808:	e063      	b.n	80018d2 <HAL_ADC_Start_DMA+0xf2>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fe1c 	bl	8002450 <ADC_Enable>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d14f      	bne.n	80018c2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f023 0206 	bic.w	r2, r3, #6
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	659a      	str	r2, [r3, #88]	; 0x58
 800184e:	e002      	b.n	8001856 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a20      	ldr	r2, [pc, #128]	; (80018dc <HAL_ADC_Start_DMA+0xfc>)
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_ADC_Start_DMA+0x100>)
 8001864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a1e      	ldr	r2, [pc, #120]	; (80018e4 <HAL_ADC_Start_DMA+0x104>)
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	221c      	movs	r2, #28
 8001874:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0210 	orr.w	r2, r2, #16
 800188c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3340      	adds	r3, #64	; 0x40
 80018a8:	4619      	mov	r1, r3
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f001 f8e5 	bl	8002a7c <HAL_DMA_Start_IT>
 80018b2:	4603      	mov	r3, r0
 80018b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fe13 	bl	80014e6 <LL_ADC_REG_StartConversion>
 80018c0:	e006      	b.n	80018d0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018ca:	e001      	b.n	80018d0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
 80018ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	0800255d 	.word	0x0800255d
 80018e0:	08002635 	.word	0x08002635
 80018e4:	08002651 	.word	0x08002651

080018e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d017      	beq.n	800193e <HAL_ADC_IRQHandler+0x56>
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d012      	beq.n	800193e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001928:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fecf 	bl	80026d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2202      	movs	r2, #2
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_ADC_IRQHandler+0x6a>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001958:	2b00      	cmp	r3, #0
 800195a:	d05e      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d059      	beq.n	8001a1a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fc99 	bl	80012ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d03e      	beq.n	8001a0c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d135      	bne.n	8001a0c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d12e      	bne.n	8001a0c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fdab 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d11a      	bne.n	80019f4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020c 	bic.w	r2, r2, #12
 80019cc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d112      	bne.n	8001a0c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
 80019f2:	e00b      	b.n	8001a0c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f8:	f043 0210 	orr.w	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff f933 	bl	8000c78 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_IRQHandler+0x146>
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d072      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d06d      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fc6a 	bl	8001338 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001a64:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fc25 	bl	80012ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a70:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d047      	beq.n	8001b10 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x1b2>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03f      	beq.n	8001b10 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d13a      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d133      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d12e      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fd3c 	bl	8001534 <LL_ADC_INJ_IsConversionOngoing>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d11a      	bne.n	8001af8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ad0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d112      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
 8001af6:	e00b      	b.n	8001b10 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afc:	f043 0210 	orr.w	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fdb7 	bl	8002684 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2260      	movs	r2, #96	; 0x60
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d011      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x264>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f890 	bl	8001c64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d012      	beq.n	8001b7c <HAL_ADC_IRQHandler+0x294>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00d      	beq.n	8001b7c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fd9d 	bl	80026ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <HAL_ADC_IRQHandler+0x2c4>
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fd8f 	bl	80026c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d02a      	beq.n	8001c0c <HAL_ADC_IRQHandler+0x324>
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d025      	beq.n	8001c0c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	e008      	b.n	8001be0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10e      	bne.n	8001c04 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f043 0202 	orr.w	r2, r3, #2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f83a 	bl	8001c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d018      	beq.n	8001c48 <HAL_ADC_IRQHandler+0x360>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	f043 0208 	orr.w	r2, r3, #8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c40:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fd28 	bl	8002698 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0b6      	sub	sp, #216	; 0xd8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x22>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e3bb      	b.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fc27 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 83a0 	bne.w	8002408 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d824      	bhi.n	8001d22 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	3b02      	subs	r3, #2
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d81b      	bhi.n	8001d1a <HAL_ADC_ConfigChannel+0x8e>
 8001ce2:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <HAL_ADC_ConfigChannel+0x5c>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001cf9 	.word	0x08001cf9
 8001cec:	08001d01 	.word	0x08001d01
 8001cf0:	08001d09 	.word	0x08001d09
 8001cf4:	08001d11 	.word	0x08001d11
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001cf8:	230c      	movs	r3, #12
 8001cfa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001cfe:	e010      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d00:	2312      	movs	r3, #18
 8001d02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d06:	e00c      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d08:	2318      	movs	r3, #24
 8001d0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d0e:	e008      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d18:	e003      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d20:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001d30:	f7ff fad6 	bl	80012e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fbe8 	bl	800150e <LL_ADC_REG_IsConversionOngoing>
 8001d3e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fbf4 	bl	8001534 <LL_ADC_INJ_IsConversionOngoing>
 8001d4c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f040 81a4 	bne.w	80020a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 819f 	bne.w	80020a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	461a      	mov	r2, r3
 8001d72:	f7ff faf4 	bl	800135e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d00a      	beq.n	8001dae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6919      	ldr	r1, [r3, #16]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001da8:	f7ff fa32 	bl	8001210 <LL_ADC_SetOffset>
 8001dac:	e179      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa4f 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x14e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fa44 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	0e9b      	lsrs	r3, r3, #26
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	e01e      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x18c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fa39 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e004      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001e0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1a4>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	e018      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1d6>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e004      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001e58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d106      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fa08 	bl	8001284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f9ec 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x214>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff f9e1 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	f003 021f 	and.w	r2, r3, #31
 8001e9e:	e01e      	b.n	8001ede <HAL_ADC_ConfigChannel+0x252>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f9d6 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e004      	b.n	8001edc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x26a>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	e018      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x29c>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e004      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d106      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2101      	movs	r1, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f9a5 	bl	8001284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f989 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x2da>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2102      	movs	r1, #2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f97e 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	e01e      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x318>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f973 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e004      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x330>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	e014      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x35a>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	e004      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d106      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f946 	bl	8001284 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2103      	movs	r1, #3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f92a 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10a      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x398>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2103      	movs	r1, #3
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff f91f 	bl	8001258 <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	f003 021f 	and.w	r2, r3, #31
 8002022:	e017      	b.n	8002054 <HAL_ADC_ConfigChannel+0x3c8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2103      	movs	r1, #3
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f914 	bl	8001258 <LL_ADC_GetOffsetChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002046:	2320      	movs	r3, #32
 8002048:	e003      	b.n	8002052 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800204a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_ADC_ConfigChannel+0x3e0>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	e011      	b.n	8002090 <HAL_ADC_ConfigChannel+0x404>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800207a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800207c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800207e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e003      	b.n	8002090 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002090:	429a      	cmp	r2, r3
 8002092:	d106      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	2103      	movs	r1, #3
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f8f1 	bl	8001284 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fa0a 	bl	80014c0 <LL_ADC_IsEnabled>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8140 	bne.w	8002334 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6819      	ldr	r1, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	461a      	mov	r2, r3
 80020c2:	f7ff f977 	bl	80013b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	4a8f      	ldr	r2, [pc, #572]	; (8002308 <HAL_ADC_ConfigChannel+0x67c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	f040 8131 	bne.w	8002334 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10b      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x46e>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2b09      	cmp	r3, #9
 80020f0:	bf94      	ite	ls
 80020f2:	2301      	movls	r3, #1
 80020f4:	2300      	movhi	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	e019      	b.n	800212e <HAL_ADC_ConfigChannel+0x4a2>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800210a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800210c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e003      	b.n	800211e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2b09      	cmp	r3, #9
 8002126:	bf94      	ite	ls
 8002128:	2301      	movls	r3, #1
 800212a:	2300      	movhi	r3, #0
 800212c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800212e:	2b00      	cmp	r3, #0
 8002130:	d079      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_ADC_ConfigChannel+0x4c2>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0e9b      	lsrs	r3, r3, #26
 8002144:	3301      	adds	r3, #1
 8002146:	069b      	lsls	r3, r3, #26
 8002148:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800214c:	e015      	b.n	800217a <HAL_ADC_ConfigChannel+0x4ee>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800215c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002166:	2320      	movs	r3, #32
 8002168:	e003      	b.n	8002172 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800216a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	3301      	adds	r3, #1
 8002174:	069b      	lsls	r3, r3, #26
 8002176:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_ADC_ConfigChannel+0x50e>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	0e9b      	lsrs	r3, r3, #26
 800218c:	3301      	adds	r3, #1
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	e017      	b.n	80021ca <HAL_ADC_ConfigChannel+0x53e>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80021a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021aa:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80021ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e003      	b.n	80021be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80021b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	ea42 0103 	orr.w	r1, r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x564>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0e9b      	lsrs	r3, r3, #26
 80021e0:	3301      	adds	r3, #1
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	051b      	lsls	r3, r3, #20
 80021ee:	e018      	b.n	8002222 <HAL_ADC_ConfigChannel+0x596>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002208:	2320      	movs	r3, #32
 800220a:	e003      	b.n	8002214 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	f003 021f 	and.w	r2, r3, #31
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002222:	430b      	orrs	r3, r1
 8002224:	e081      	b.n	800232a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x5b6>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	3301      	adds	r3, #1
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002240:	e015      	b.n	800226e <HAL_ADC_ConfigChannel+0x5e2>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e003      	b.n	8002266 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	069b      	lsls	r3, r3, #26
 800226a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_ADC_ConfigChannel+0x602>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	3301      	adds	r3, #1
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	2101      	movs	r1, #1
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	e017      	b.n	80022be <HAL_ADC_ConfigChannel+0x632>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	61bb      	str	r3, [r7, #24]
  return result;
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80022a6:	2320      	movs	r3, #32
 80022a8:	e003      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	ea42 0103 	orr.w	r1, r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10d      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x65e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0e9b      	lsrs	r3, r3, #26
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 021f 	and.w	r2, r3, #31
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	3b1e      	subs	r3, #30
 80022e2:	051b      	lsls	r3, r3, #20
 80022e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022e8:	e01e      	b.n	8002328 <HAL_ADC_ConfigChannel+0x69c>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	60fb      	str	r3, [r7, #12]
  return result;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d104      	bne.n	800230c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e006      	b.n	8002314 <HAL_ADC_ConfigChannel+0x688>
 8002306:	bf00      	nop
 8002308:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f003 021f 	and.w	r2, r3, #31
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	3b1e      	subs	r3, #30
 8002322:	051b      	lsls	r3, r3, #20
 8002324:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002328:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232e:	4619      	mov	r1, r3
 8002330:	f7ff f815 	bl	800135e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_ADC_ConfigChannel+0x7a4>)
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d06c      	beq.n	800241a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002340:	483c      	ldr	r0, [pc, #240]	; (8002434 <HAL_ADC_ConfigChannel+0x7a8>)
 8002342:	f7fe ff57 	bl	80011f4 <LL_ADC_GetCommonPathInternalCh>
 8002346:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <HAL_ADC_ConfigChannel+0x7ac>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d127      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d121      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a35      	ldr	r2, [pc, #212]	; (800243c <HAL_ADC_ConfigChannel+0x7b0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d157      	bne.n	800241a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800236a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800236e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002372:	4619      	mov	r1, r3
 8002374:	482f      	ldr	r0, [pc, #188]	; (8002434 <HAL_ADC_ConfigChannel+0x7a8>)
 8002376:	f7fe ff2a 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800237a:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_ADC_ConfigChannel+0x7b4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	4a30      	ldr	r2, [pc, #192]	; (8002444 <HAL_ADC_ConfigChannel+0x7b8>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	099b      	lsrs	r3, r3, #6
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002394:	e002      	b.n	800239c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3b01      	subs	r3, #1
 800239a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f9      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023a2:	e03a      	b.n	800241a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_ADC_ConfigChannel+0x7bc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d113      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <HAL_ADC_ConfigChannel+0x7b0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d12a      	bne.n	800241a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023cc:	4619      	mov	r1, r3
 80023ce:	4819      	ldr	r0, [pc, #100]	; (8002434 <HAL_ADC_ConfigChannel+0x7a8>)
 80023d0:	f7fe fefd 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d4:	e021      	b.n	800241a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <HAL_ADC_ConfigChannel+0x7c0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d11c      	bne.n	800241a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d116      	bne.n	800241a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_ADC_ConfigChannel+0x7b0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d111      	bne.n	800241a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023fe:	4619      	mov	r1, r3
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <HAL_ADC_ConfigChannel+0x7a8>)
 8002402:	f7fe fee4 	bl	80011ce <LL_ADC_SetCommonPathInternalCh>
 8002406:	e008      	b.n	800241a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002422:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002426:	4618      	mov	r0, r3
 8002428:	37d8      	adds	r7, #216	; 0xd8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	80080000 	.word	0x80080000
 8002434:	50040300 	.word	0x50040300
 8002438:	c7520000 	.word	0xc7520000
 800243c:	50040000 	.word	0x50040000
 8002440:	20000004 	.word	0x20000004
 8002444:	053e2d63 	.word	0x053e2d63
 8002448:	cb840000 	.word	0xcb840000
 800244c:	80000001 	.word	0x80000001

08002450 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f82d 	bl	80014c0 <LL_ADC_IsEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d169      	bne.n	8002540 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <ADC_Enable+0xfc>)
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	f043 0210 	orr.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e055      	b.n	8002542 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fffc 	bl	8001498 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024a0:	482b      	ldr	r0, [pc, #172]	; (8002550 <ADC_Enable+0x100>)
 80024a2:	f7fe fea7 	bl	80011f4 <LL_ADC_GetCommonPathInternalCh>
 80024a6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <ADC_Enable+0x104>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	4a28      	ldr	r2, [pc, #160]	; (8002558 <ADC_Enable+0x108>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024ca:	e002      	b.n	80024d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f9      	bne.n	80024cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fe36 	bl	8001148 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024de:	e028      	b.n	8002532 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe ffeb 	bl	80014c0 <LL_ADC_IsEnabled>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d104      	bne.n	80024fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe ffcf 	bl	8001498 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fa:	f7fe fe25 	bl	8001148 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d914      	bls.n	8002532 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d00d      	beq.n	8002532 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e007      	b.n	8002542 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d1cf      	bne.n	80024e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	8000003f 	.word	0x8000003f
 8002550:	50040300 	.word	0x50040300
 8002554:	20000004 	.word	0x20000004
 8002558:	053e2d63 	.word	0x053e2d63

0800255c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002572:	2b00      	cmp	r3, #0
 8002574:	d14b      	bne.n	800260e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d021      	beq.n	80025d4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fe90 	bl	80012ba <LL_ADC_REG_IsTriggerSourceSWStart>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d032      	beq.n	8002606 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d12b      	bne.n	8002606 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11f      	bne.n	8002606 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
 80025d2:	e018      	b.n	8002606 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d111      	bne.n	8002606 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7fe fb36 	bl	8000c78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800260c:	e00e      	b.n	800262c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f7ff fb2c 	bl	8001c78 <HAL_ADC_ErrorCallback>
}
 8002620:	e004      	b.n	800262c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fb04 	bl	8001c50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f043 0204 	orr.w	r2, r3, #4
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff fafe 	bl	8001c78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	; (800272c <__NVIC_SetPriorityGrouping+0x44>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	2b00      	cmp	r3, #0
 800275c:	db0b      	blt.n	8002776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	4907      	ldr	r1, [pc, #28]	; (8002784 <__NVIC_EnableIRQ+0x38>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	2001      	movs	r0, #1
 800276e:	fa00 f202 	lsl.w	r2, r0, r2
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002854:	d301      	bcc.n	800285a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <SysTick_Config+0x40>)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002862:	210f      	movs	r1, #15
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f7ff ff8e 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SysTick_Config+0x40>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <SysTick_Config+0x40>)
 8002874:	2207      	movs	r2, #7
 8002876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010

08002888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ff29 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b0:	f7ff ff3e 	bl	8002730 <__NVIC_GetPriorityGrouping>
 80028b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7ff ff8e 	bl	80027dc <NVIC_EncodePriority>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff5d 	bl	8002788 <__NVIC_SetPriority>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	4603      	mov	r3, r0
 80028de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff31 	bl	800274c <__NVIC_EnableIRQ>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ffa2 	bl	8002844 <SysTick_Config>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e098      	b.n	8002a50 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_DMA_Init+0x150>)
 8002926:	429a      	cmp	r2, r3
 8002928:	d80f      	bhi.n	800294a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	4b4b      	ldr	r3, [pc, #300]	; (8002a60 <HAL_DMA_Init+0x154>)
 8002932:	4413      	add	r3, r2
 8002934:	4a4b      	ldr	r2, [pc, #300]	; (8002a64 <HAL_DMA_Init+0x158>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	009a      	lsls	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a48      	ldr	r2, [pc, #288]	; (8002a68 <HAL_DMA_Init+0x15c>)
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
 8002948:	e00e      	b.n	8002968 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_DMA_Init+0x160>)
 8002952:	4413      	add	r3, r2
 8002954:	4a43      	ldr	r2, [pc, #268]	; (8002a64 <HAL_DMA_Init+0x158>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	009a      	lsls	r2, r3, #2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a42      	ldr	r2, [pc, #264]	; (8002a70 <HAL_DMA_Init+0x164>)
 8002966:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800298c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c2:	d039      	beq.n	8002a38 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_DMA_Init+0x15c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d11a      	bne.n	8002a04 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_DMA_Init+0x168>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f003 031c 	and.w	r3, r3, #28
 80029da:	210f      	movs	r1, #15
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	4924      	ldr	r1, [pc, #144]	; (8002a74 <HAL_DMA_Init+0x168>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_DMA_Init+0x168>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f4:	f003 031c 	and.w	r3, r3, #28
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	491d      	ldr	r1, [pc, #116]	; (8002a74 <HAL_DMA_Init+0x168>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
 8002a02:	e019      	b.n	8002a38 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_DMA_Init+0x16c>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f003 031c 	and.w	r3, r3, #28
 8002a10:	210f      	movs	r1, #15
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	4917      	ldr	r1, [pc, #92]	; (8002a78 <HAL_DMA_Init+0x16c>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_DMA_Init+0x16c>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f003 031c 	and.w	r3, r3, #28
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	4911      	ldr	r1, [pc, #68]	; (8002a78 <HAL_DMA_Init+0x16c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40020407 	.word	0x40020407
 8002a60:	bffdfff8 	.word	0xbffdfff8
 8002a64:	cccccccd 	.word	0xcccccccd
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	bffdfbf8 	.word	0xbffdfbf8
 8002a70:	40020400 	.word	0x40020400
 8002a74:	400200a8 	.word	0x400200a8
 8002a78:	400204a8 	.word	0x400204a8

08002a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Start_IT+0x20>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e04b      	b.n	8002b34 <HAL_DMA_Start_IT+0xb8>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d13a      	bne.n	8002b26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f8e0 	bl	8002c9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 020e 	orr.w	r2, r2, #14
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e00f      	b.n	8002b14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0204 	bic.w	r2, r2, #4
 8002b02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 020a 	orr.w	r2, r2, #10
 8002b12:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e005      	b.n	8002b32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f003 031c 	and.w	r3, r3, #28
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d026      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x7a>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d021      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f003 021c 	and.w	r2, r3, #28
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d071      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002bb4:	e06c      	b.n	8002c90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f003 031c 	and.w	r3, r3, #28
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02e      	beq.n	8002c28 <HAL_DMA_IRQHandler+0xec>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d029      	beq.n	8002c28 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10b      	bne.n	8002bfa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 020a 	bic.w	r2, r2, #10
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f003 021c 	and.w	r2, r3, #28
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2102      	movs	r1, #2
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d038      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002c26:	e033      	b.n	8002c90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f003 031c 	and.w	r3, r3, #28
 8002c30:	2208      	movs	r2, #8
 8002c32:	409a      	lsls	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d02a      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x156>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d025      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 020e 	bic.w	r2, r2, #14
 8002c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f003 021c 	and.w	r2, r3, #28
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f202 	lsl.w	r2, r1, r2
 8002c68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
}
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f003 021c 	and.w	r2, r3, #28
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d108      	bne.n	8002cde <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cdc:	e007      	b.n	8002cee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	60da      	str	r2, [r3, #12]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d0a:	e154      	b.n	8002fb6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2101      	movs	r1, #1
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8146 	beq.w	8002fb0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d005      	beq.n	8002d3c <HAL_GPIO_Init+0x40>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d130      	bne.n	8002d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d72:	2201      	movs	r2, #1
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f003 0201 	and.w	r2, r3, #1
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d017      	beq.n	8002dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	2203      	movs	r2, #3
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d123      	bne.n	8002e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	08da      	lsrs	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3208      	adds	r2, #8
 8002dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	6939      	ldr	r1, [r7, #16]
 8002e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0203 	and.w	r2, r3, #3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80a0 	beq.w	8002fb0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e70:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <HAL_GPIO_Init+0x2d8>)
 8002e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e74:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <HAL_GPIO_Init+0x2d8>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6613      	str	r3, [r2, #96]	; 0x60
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_GPIO_Init+0x2d8>)
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e88:	4a53      	ldr	r2, [pc, #332]	; (8002fd8 <HAL_GPIO_Init+0x2dc>)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eb2:	d019      	beq.n	8002ee8 <HAL_GPIO_Init+0x1ec>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a49      	ldr	r2, [pc, #292]	; (8002fdc <HAL_GPIO_Init+0x2e0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_GPIO_Init+0x1e8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a48      	ldr	r2, [pc, #288]	; (8002fe0 <HAL_GPIO_Init+0x2e4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_GPIO_Init+0x1e4>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a47      	ldr	r2, [pc, #284]	; (8002fe4 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <HAL_GPIO_Init+0x1e0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a46      	ldr	r2, [pc, #280]	; (8002fe8 <HAL_GPIO_Init+0x2ec>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_GPIO_Init+0x1dc>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	e008      	b.n	8002eea <HAL_GPIO_Init+0x1ee>
 8002ed8:	2307      	movs	r3, #7
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x1ee>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e004      	b.n	8002eea <HAL_GPIO_Init+0x1ee>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_Init+0x1ee>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_GPIO_Init+0x1ee>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	f002 0203 	and.w	r2, r2, #3
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002efa:	4937      	ldr	r1, [pc, #220]	; (8002fd8 <HAL_GPIO_Init+0x2dc>)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f08:	4b38      	ldr	r3, [pc, #224]	; (8002fec <HAL_GPIO_Init+0x2f0>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f2c:	4a2f      	ldr	r2, [pc, #188]	; (8002fec <HAL_GPIO_Init+0x2f0>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f32:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <HAL_GPIO_Init+0x2f0>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f56:	4a25      	ldr	r2, [pc, #148]	; (8002fec <HAL_GPIO_Init+0x2f0>)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_GPIO_Init+0x2f0>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f80:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <HAL_GPIO_Init+0x2f0>)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f86:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_GPIO_Init+0x2f0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002faa:	4a10      	ldr	r2, [pc, #64]	; (8002fec <HAL_GPIO_Init+0x2f0>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f aea3 	bne.w	8002d0c <HAL_GPIO_Init+0x10>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	48000400 	.word	0x48000400
 8002fe0:	48000800 	.word	0x48000800
 8002fe4:	48000c00 	.word	0x48000c00
 8002fe8:	48001000 	.word	0x48001000
 8002fec:	40010400 	.word	0x40010400

08002ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003000:	787b      	ldrb	r3, [r7, #1]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003006:	887a      	ldrh	r2, [r7, #2]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800300c:	e002      	b.n	8003014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HAL_PWREx_GetVoltageRange+0x18>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40007000 	.word	0x40007000

0800303c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304a:	d130      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d038      	beq.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003062:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003068:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2232      	movs	r2, #50	; 0x32
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0c9b      	lsrs	r3, r3, #18
 800307c:	3301      	adds	r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003080:	e002      	b.n	8003088 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3b01      	subs	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003094:	d102      	bne.n	800309c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f2      	bne.n	8003082 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a8:	d110      	bne.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e00f      	b.n	80030ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ba:	d007      	beq.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c4:	4a05      	ldr	r2, [pc, #20]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40007000 	.word	0x40007000
 80030e0:	20000004 	.word	0x20000004
 80030e4:	431bde83 	.word	0x431bde83

080030e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f000 bc02 	b.w	8003900 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fc:	4b96      	ldr	r3, [pc, #600]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003106:	4b94      	ldr	r3, [pc, #592]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 80e4 	beq.w	80032e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_RCC_OscConfig+0x4c>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	f040 808b 	bne.w	8003242 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 8087 	bne.w	8003242 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003134:	4b88      	ldr	r3, [pc, #544]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_OscConfig+0x64>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e3d9      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	4b81      	ldr	r3, [pc, #516]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d004      	beq.n	8003166 <HAL_RCC_OscConfig+0x7e>
 800315c:	4b7e      	ldr	r3, [pc, #504]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003164:	e005      	b.n	8003172 <HAL_RCC_OscConfig+0x8a>
 8003166:	4b7c      	ldr	r3, [pc, #496]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003172:	4293      	cmp	r3, r2
 8003174:	d223      	bcs.n	80031be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fd8c 	bl	8003c98 <RCC_SetFlashLatencyFromMSIRange>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e3ba      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a72      	ldr	r2, [pc, #456]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b70      	ldr	r3, [pc, #448]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	496d      	ldr	r1, [pc, #436]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a8:	4b6b      	ldr	r3, [pc, #428]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	4968      	ldr	r1, [pc, #416]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	e025      	b.n	800320a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031be:	4b66      	ldr	r3, [pc, #408]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a65      	ldr	r2, [pc, #404]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b63      	ldr	r3, [pc, #396]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4960      	ldr	r1, [pc, #384]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031dc:	4b5e      	ldr	r3, [pc, #376]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	495b      	ldr	r1, [pc, #364]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd4c 	bl	8003c98 <RCC_SetFlashLatencyFromMSIRange>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e37a      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800320a:	f000 fc81 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 800320e:	4602      	mov	r2, r0
 8003210:	4b51      	ldr	r3, [pc, #324]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	4950      	ldr	r1, [pc, #320]	; (800335c <HAL_RCC_OscConfig+0x274>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	4a4e      	ldr	r2, [pc, #312]	; (8003360 <HAL_RCC_OscConfig+0x278>)
 8003228:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800322a:	4b4e      	ldr	r3, [pc, #312]	; (8003364 <HAL_RCC_OscConfig+0x27c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd ff3a 	bl	80010a8 <HAL_InitTick>
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d052      	beq.n	80032e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	e35e      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d032      	beq.n	80032b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800324a:	4b43      	ldr	r3, [pc, #268]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a42      	ldr	r2, [pc, #264]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003256:	f7fd ff77 	bl	8001148 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800325e:	f7fd ff73 	bl	8001148 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e347      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003270:	4b39      	ldr	r3, [pc, #228]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a35      	ldr	r2, [pc, #212]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b33      	ldr	r3, [pc, #204]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4930      	ldr	r1, [pc, #192]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800329a:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	492b      	ldr	r1, [pc, #172]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
 80032ae:	e01a      	b.n	80032e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032b0:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a28      	ldr	r2, [pc, #160]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032bc:	f7fd ff44 	bl	8001148 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c4:	f7fd ff40 	bl	8001148 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e314      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1dc>
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d073      	beq.n	80033da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_OscConfig+0x21c>
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d10e      	bne.n	800331c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d10b      	bne.n	800331c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d063      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e2f1      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d106      	bne.n	8003334 <HAL_RCC_OscConfig+0x24c>
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e025      	b.n	8003380 <HAL_RCC_OscConfig+0x298>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d114      	bne.n	8003368 <HAL_RCC_OscConfig+0x280>
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a05      	ldr	r2, [pc, #20]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4b03      	ldr	r3, [pc, #12]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a02      	ldr	r2, [pc, #8]	; (8003358 <HAL_RCC_OscConfig+0x270>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e013      	b.n	8003380 <HAL_RCC_OscConfig+0x298>
 8003358:	40021000 	.word	0x40021000
 800335c:	08004d64 	.word	0x08004d64
 8003360:	20000004 	.word	0x20000004
 8003364:	20000008 	.word	0x20000008
 8003368:	4ba0      	ldr	r3, [pc, #640]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a9f      	ldr	r2, [pc, #636]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b9d      	ldr	r3, [pc, #628]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a9c      	ldr	r2, [pc, #624]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 800337a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fd fede 	bl	8001148 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7fd feda 	bl	8001148 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e2ae      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a2:	4b92      	ldr	r3, [pc, #584]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x2a8>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fd feca 	bl	8001148 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fd fec6 	bl	8001148 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e29a      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ca:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2d0>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d060      	beq.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_OscConfig+0x310>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d119      	bne.n	8003426 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d116      	bne.n	8003426 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f8:	4b7c      	ldr	r3, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_OscConfig+0x328>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e277      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	4973      	ldr	r1, [pc, #460]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003424:	e040      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d023      	beq.n	8003476 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342e:	4b6f      	ldr	r3, [pc, #444]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6e      	ldr	r2, [pc, #440]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fd fe85 	bl	8001148 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fd fe81 	bl	8001148 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e255      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003454:	4b65      	ldr	r3, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b62      	ldr	r3, [pc, #392]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	061b      	lsls	r3, r3, #24
 800346e:	495f      	ldr	r1, [pc, #380]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]
 8003474:	e018      	b.n	80034a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a5c      	ldr	r2, [pc, #368]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 800347c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fe61 	bl	8001148 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800348a:	f7fd fe5d 	bl	8001148 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e231      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d03c      	beq.n	800352e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034bc:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c2:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fd fe3c 	bl	8001148 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fd fe38 	bl	8001148 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e20c      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <HAL_RCC_OscConfig+0x3ec>
 80034f4:	e01b      	b.n	800352e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fc:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fd fe1f 	bl	8001148 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7fd fe1b 	bl	8001148 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1ef      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003520:	4b32      	ldr	r3, [pc, #200]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ef      	bne.n	800350e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80a6 	beq.w	8003688 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353c:	2300      	movs	r3, #0
 800353e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003540:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a26      	ldr	r2, [pc, #152]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003564:	2301      	movs	r3, #1
 8003566:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_RCC_OscConfig+0x508>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d118      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003574:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_RCC_OscConfig+0x508>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_RCC_OscConfig+0x508>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003580:	f7fd fde2 	bl	8001148 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7fd fdde 	bl	8001148 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e1b2      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCC_OscConfig+0x508>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x4d8>
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035be:	e029      	b.n	8003614 <HAL_RCC_OscConfig+0x52c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d115      	bne.n	80035f4 <HAL_RCC_OscConfig+0x50c>
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a03      	ldr	r2, [pc, #12]	; (80035ec <HAL_RCC_OscConfig+0x504>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e8:	e014      	b.n	8003614 <HAL_RCC_OscConfig+0x52c>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
 80035f4:	4b9a      	ldr	r3, [pc, #616]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	4a99      	ldr	r2, [pc, #612]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003604:	4b96      	ldr	r3, [pc, #600]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	4a95      	ldr	r2, [pc, #596]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fd fd94 	bl	8001148 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	e00a      	b.n	800363a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fd fd90 	bl	8001148 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e162      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363a:	4b89      	ldr	r3, [pc, #548]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0ed      	beq.n	8003624 <HAL_RCC_OscConfig+0x53c>
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364a:	f7fd fd7d 	bl	8001148 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fd79 	bl	8001148 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e14b      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003668:	4b7d      	ldr	r3, [pc, #500]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ed      	bne.n	8003652 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003676:	7ffb      	ldrb	r3, [r7, #31]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d105      	bne.n	8003688 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367c:	4b78      	ldr	r3, [pc, #480]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	4a77      	ldr	r2, [pc, #476]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 8003682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003686:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03c      	beq.n	800370e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800369c:	4b70      	ldr	r3, [pc, #448]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 800369e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a2:	4a6f      	ldr	r2, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fd fd4c 	bl	8001148 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b4:	f7fd fd48 	bl	8001148 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e11c      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036c6:	4b66      	ldr	r3, [pc, #408]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80036c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ef      	beq.n	80036b4 <HAL_RCC_OscConfig+0x5cc>
 80036d4:	e01b      	b.n	800370e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036d6:	4b62      	ldr	r3, [pc, #392]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80036d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036dc:	4a60      	ldr	r2, [pc, #384]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd fd2f 	bl	8001148 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036ee:	f7fd fd2b 	bl	8001148 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0ff      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003700:	4b57      	ldr	r3, [pc, #348]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 8003702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ef      	bne.n	80036ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80f3 	beq.w	80038fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b02      	cmp	r3, #2
 800371e:	f040 80c9 	bne.w	80038b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003722:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0203 	and.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	429a      	cmp	r2, r3
 8003734:	d12c      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	3b01      	subs	r3, #1
 8003742:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d123      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d11b      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d113      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	3b01      	subs	r3, #1
 8003776:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d109      	bne.n	8003790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	3b01      	subs	r3, #1
 800378a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d06b      	beq.n	8003868 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d062      	beq.n	800385c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003796:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0ac      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037a6:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2d      	ldr	r2, [pc, #180]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80037ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037b2:	f7fd fcc9 	bl	8001148 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fd fcc5 	bl	8001148 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e099      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_OscConfig+0x77c>)
 80037de:	4013      	ands	r3, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037e8:	3a01      	subs	r2, #1
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	4311      	orrs	r1, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f2:	0212      	lsls	r2, r2, #8
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037fa:	0852      	lsrs	r2, r2, #1
 80037fc:	3a01      	subs	r2, #1
 80037fe:	0552      	lsls	r2, r2, #21
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003806:	0852      	lsrs	r2, r2, #1
 8003808:	3a01      	subs	r2, #1
 800380a:	0652      	lsls	r2, r2, #25
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003812:	06d2      	lsls	r2, r2, #27
 8003814:	430a      	orrs	r2, r1
 8003816:	4912      	ldr	r1, [pc, #72]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 8003818:	4313      	orrs	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800381c:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0f      	ldr	r2, [pc, #60]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a0c      	ldr	r2, [pc, #48]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 800382e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003834:	f7fd fc88 	bl	8001148 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383c:	f7fd fc84 	bl	8001148 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e058      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800384e:	4b04      	ldr	r3, [pc, #16]	; (8003860 <HAL_RCC_OscConfig+0x778>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385a:	e050      	b.n	80038fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e04f      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
 8003860:	40021000 	.word	0x40021000
 8003864:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003868:	4b27      	ldr	r3, [pc, #156]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d144      	bne.n	80038fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003874:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a23      	ldr	r2, [pc, #140]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003880:	4b21      	ldr	r3, [pc, #132]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a20      	ldr	r2, [pc, #128]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 8003886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800388c:	f7fd fc5c 	bl	8001148 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fd fc58 	bl	8001148 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e02c      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a6:	4b18      	ldr	r3, [pc, #96]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x7ac>
 80038b2:	e024      	b.n	80038fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d01f      	beq.n	80038fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 80038c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fd fc3f 	bl	8001148 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fd fc3b 	bl	8001148 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e00f      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	4905      	ldr	r1, [pc, #20]	; (8003908 <HAL_RCC_OscConfig+0x820>)
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_RCC_OscConfig+0x824>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
 80038f8:	e001      	b.n	80038fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000
 800390c:	feeefffc 	.word	0xfeeefffc

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0e7      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b75      	ldr	r3, [pc, #468]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d910      	bls.n	8003954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b72      	ldr	r3, [pc, #456]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 0207 	bic.w	r2, r3, #7
 800393a:	4970      	ldr	r1, [pc, #448]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b6e      	ldr	r3, [pc, #440]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0cf      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d010      	beq.n	8003982 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396c:	429a      	cmp	r2, r3
 800396e:	d908      	bls.n	8003982 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003970:	4b63      	ldr	r3, [pc, #396]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4960      	ldr	r1, [pc, #384]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d04c      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	4b5a      	ldr	r3, [pc, #360]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d121      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0a6      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ae:	4b54      	ldr	r3, [pc, #336]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d115      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e09a      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c6:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e08e      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d6:	4b4a      	ldr	r3, [pc, #296]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e086      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4943      	ldr	r1, [pc, #268]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fd fba6 	bl	8001148 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fd fba2 	bl	8001148 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e06e      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d208      	bcs.n	8003a56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b2e      	ldr	r3, [pc, #184]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	492b      	ldr	r1, [pc, #172]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d210      	bcs.n	8003a86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a64:	4b25      	ldr	r3, [pc, #148]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 0207 	bic.w	r2, r3, #7
 8003a6c:	4923      	ldr	r1, [pc, #140]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a74:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCC_ClockConfig+0x1ec>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d001      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e036      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4918      	ldr	r1, [pc, #96]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ab0:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4910      	ldr	r1, [pc, #64]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ac4:	f000 f824 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <HAL_RCC_ClockConfig+0x1f0>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	490b      	ldr	r1, [pc, #44]	; (8003b04 <HAL_RCC_ClockConfig+0x1f4>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	f003 031f 	and.w	r3, r3, #31
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae0:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <HAL_RCC_ClockConfig+0x1f8>)
 8003ae2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_ClockConfig+0x1fc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd fadd 	bl	80010a8 <HAL_InitTick>
 8003aee:	4603      	mov	r3, r0
 8003af0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003af2:	7afb      	ldrb	r3, [r7, #11]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08004d64 	.word	0x08004d64
 8003b08:	20000004 	.word	0x20000004
 8003b0c:	20000008 	.word	0x20000008

08003b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x34>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d121      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d11e      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e005      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b60:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b6c:	4a2b      	ldr	r2, [pc, #172]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d102      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b88:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e004      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b94:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d134      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d003      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0xac>
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bb8:	617b      	str	r3, [r7, #20]
      break;
 8003bba:	e005      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bbc:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bbe:	617b      	str	r3, [r7, #20]
      break;
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	617b      	str	r3, [r7, #20]
      break;
 8003bc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	fb03 f202 	mul.w	r2, r3, r2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	0e5b      	lsrs	r3, r3, #25
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c08:	69bb      	ldr	r3, [r7, #24]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3724      	adds	r7, #36	; 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	08004d7c 	.word	0x08004d7c
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	007a1200 	.word	0x007a1200

08003c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000004 	.word	0x20000004

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4904      	ldr	r1, [pc, #16]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	08004d74 	.word	0x08004d74

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c70:	f7ff ffda 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4904      	ldr	r1, [pc, #16]	; (8003c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08004d74 	.word	0x08004d74

08003c98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cb0:	f7ff f9b6 	bl	8003020 <HAL_PWREx_GetVoltageRange>
 8003cb4:	6178      	str	r0, [r7, #20]
 8003cb6:	e014      	b.n	8003ce2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	4a24      	ldr	r2, [pc, #144]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc4:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cd0:	f7ff f9a6 	bl	8003020 <HAL_PWREx_GetVoltageRange>
 8003cd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cd6:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce8:	d10b      	bne.n	8003d02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b80      	cmp	r3, #128	; 0x80
 8003cee:	d919      	bls.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2ba0      	cmp	r3, #160	; 0xa0
 8003cf4:	d902      	bls.n	8003cfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e013      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e010      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d902      	bls.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d08:	2303      	movs	r3, #3
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	e00a      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d102      	bne.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d14:	2302      	movs	r3, #2
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	e004      	b.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b70      	cmp	r3, #112	; 0x70
 8003d1e:	d101      	bne.n	8003d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 0207 	bic.w	r2, r3, #7
 8003d2c:	4909      	ldr	r1, [pc, #36]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40022000 	.word	0x40022000

08003d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d60:	2300      	movs	r3, #0
 8003d62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d64:	2300      	movs	r3, #0
 8003d66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d031      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d7c:	d01a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d82:	d814      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d8c:	d10f      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d8e:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4a5c      	ldr	r2, [pc, #368]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d9a:	e00c      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f9f0 	bl	8004188 <RCCEx_PLLSAI1_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dac:	e003      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	74fb      	strb	r3, [r7, #19]
      break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dbc:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	494e      	ldr	r1, [pc, #312]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dd2:	e001      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 809e 	beq.w	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dea:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0c:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e1c:	4b3a      	ldr	r3, [pc, #232]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a39      	ldr	r2, [pc, #228]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e28:	f7fd f98e 	bl	8001148 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e2e:	e009      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e30:	f7fd f98a 	bl	8001148 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	74fb      	strb	r3, [r7, #19]
        break;
 8003e42:	e005      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d15a      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e56:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01e      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d019      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e9e:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d016      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd f94a 	bl	8001148 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb8:	f7fd f946 	bl	8001148 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d902      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ece:	e006      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ec      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	4904      	ldr	r1, [pc, #16]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003efa:	e009      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f10:	7c7b      	ldrb	r3, [r7, #17]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f16:	4b9b      	ldr	r3, [pc, #620]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	4a9a      	ldr	r2, [pc, #616]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f2e:	4b95      	ldr	r3, [pc, #596]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f023 0203 	bic.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4991      	ldr	r1, [pc, #580]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f50:	4b8c      	ldr	r3, [pc, #560]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f023 020c 	bic.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	4989      	ldr	r1, [pc, #548]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f72:	4b84      	ldr	r3, [pc, #528]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	4980      	ldr	r1, [pc, #512]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f94:	4b7b      	ldr	r3, [pc, #492]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4978      	ldr	r1, [pc, #480]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fb6:	4b73      	ldr	r3, [pc, #460]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	496f      	ldr	r1, [pc, #444]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd8:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4967      	ldr	r1, [pc, #412]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffa:	4b62      	ldr	r3, [pc, #392]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	495e      	ldr	r1, [pc, #376]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800401c:	4b59      	ldr	r3, [pc, #356]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	4956      	ldr	r1, [pc, #344]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800403e:	4b51      	ldr	r3, [pc, #324]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	494d      	ldr	r1, [pc, #308]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d028      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004060:	4b48      	ldr	r3, [pc, #288]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	4945      	ldr	r1, [pc, #276]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407e:	d106      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004080:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a3f      	ldr	r2, [pc, #252]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	60d3      	str	r3, [r2, #12]
 800408c:	e011      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004096:	d10c      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f872 	bl	8004188 <RCCEx_PLLSAI1_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d028      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040be:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040cc:	492d      	ldr	r1, [pc, #180]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040dc:	d106      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4a28      	ldr	r2, [pc, #160]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e8:	60d3      	str	r3, [r2, #12]
 80040ea:	e011      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f843 	bl	8004188 <RCCEx_PLLSAI1_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01c      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412a:	4916      	ldr	r1, [pc, #88]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413a:	d10c      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2102      	movs	r1, #2
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f820 	bl	8004188 <RCCEx_PLLSAI1_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	4904      	ldr	r1, [pc, #16]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004178:	7cbb      	ldrb	r3, [r7, #18]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000

08004188 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004196:	4b74      	ldr	r3, [pc, #464]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041a2:	4b71      	ldr	r3, [pc, #452]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0203 	and.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d10d      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
       ||
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ba:	4b6b      	ldr	r3, [pc, #428]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
       ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d047      	beq.n	800425e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	e044      	b.n	800425e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d018      	beq.n	800420e <RCCEx_PLLSAI1_Config+0x86>
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d825      	bhi.n	800422c <RCCEx_PLLSAI1_Config+0xa4>
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d002      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0x62>
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d009      	beq.n	80041fc <RCCEx_PLLSAI1_Config+0x74>
 80041e8:	e020      	b.n	800422c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ea:	4b5f      	ldr	r3, [pc, #380]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11d      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fa:	e01a      	b.n	8004232 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041fc:	4b5a      	ldr	r3, [pc, #360]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d116      	bne.n	8004236 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420c:	e013      	b.n	8004236 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800420e:	4b56      	ldr	r3, [pc, #344]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800421a:	4b53      	ldr	r3, [pc, #332]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800422a:	e006      	b.n	800423a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      break;
 8004230:	e004      	b.n	800423c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800423a:	bf00      	nop
    }

    if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10d      	bne.n	800425e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004242:	4b49      	ldr	r3, [pc, #292]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	430b      	orrs	r3, r1
 8004258:	4943      	ldr	r1, [pc, #268]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 800425a:	4313      	orrs	r3, r2
 800425c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d17c      	bne.n	800435e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004264:	4b40      	ldr	r3, [pc, #256]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a3f      	ldr	r2, [pc, #252]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800426e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004270:	f7fc ff6a 	bl	8001148 <HAL_GetTick>
 8004274:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004276:	e009      	b.n	800428c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004278:	f7fc ff66 	bl	8001148 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d902      	bls.n	800428c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	73fb      	strb	r3, [r7, #15]
        break;
 800428a:	e005      	b.n	8004298 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800428c:	4b36      	ldr	r3, [pc, #216]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ef      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d15f      	bne.n	800435e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d110      	bne.n	80042c6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a4:	4b30      	ldr	r3, [pc, #192]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80042ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6892      	ldr	r2, [r2, #8]
 80042b4:	0211      	lsls	r1, r2, #8
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68d2      	ldr	r2, [r2, #12]
 80042ba:	06d2      	lsls	r2, r2, #27
 80042bc:	430a      	orrs	r2, r1
 80042be:	492a      	ldr	r1, [pc, #168]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	610b      	str	r3, [r1, #16]
 80042c4:	e027      	b.n	8004316 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d112      	bne.n	80042f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80042d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6892      	ldr	r2, [r2, #8]
 80042dc:	0211      	lsls	r1, r2, #8
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6912      	ldr	r2, [r2, #16]
 80042e2:	0852      	lsrs	r2, r2, #1
 80042e4:	3a01      	subs	r2, #1
 80042e6:	0552      	lsls	r2, r2, #21
 80042e8:	430a      	orrs	r2, r1
 80042ea:	491f      	ldr	r1, [pc, #124]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	610b      	str	r3, [r1, #16]
 80042f0:	e011      	b.n	8004316 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042f2:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6892      	ldr	r2, [r2, #8]
 8004302:	0211      	lsls	r1, r2, #8
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6952      	ldr	r2, [r2, #20]
 8004308:	0852      	lsrs	r2, r2, #1
 800430a:	3a01      	subs	r2, #1
 800430c:	0652      	lsls	r2, r2, #25
 800430e:	430a      	orrs	r2, r1
 8004310:	4915      	ldr	r1, [pc, #84]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004312:	4313      	orrs	r3, r2
 8004314:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a13      	ldr	r2, [pc, #76]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 800431c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004320:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fc ff11 	bl	8001148 <HAL_GetTick>
 8004326:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004328:	e009      	b.n	800433e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800432a:	f7fc ff0d 	bl	8001148 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d902      	bls.n	800433e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	73fb      	strb	r3, [r7, #15]
          break;
 800433c:	e005      	b.n	800434a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ef      	beq.n	800432a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4903      	ldr	r1, [pc, #12]	; (8004368 <RCCEx_PLLSAI1_Config+0x1e0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000

0800436c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e040      	b.n	8004400 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fc fda0 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa82 	bl	80048bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f825 	bl	8004408 <UART_SetConfig>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e01b      	b.n	8004400 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fb01 	bl	8004a00 <UART_CheckIdleState>
 80043fe:	4603      	mov	r3, r0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800440c:	b08a      	sub	sp, #40	; 0x28
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	431a      	orrs	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4313      	orrs	r3, r2
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b9e      	ldr	r3, [pc, #632]	; (80046b0 <UART_SetConfig+0x2a8>)
 8004438:	4013      	ands	r3, r2
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004440:	430b      	orrs	r3, r1
 8004442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a93      	ldr	r2, [pc, #588]	; (80046b4 <UART_SetConfig+0x2ac>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	4313      	orrs	r3, r2
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	430a      	orrs	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a8a      	ldr	r2, [pc, #552]	; (80046b8 <UART_SetConfig+0x2b0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d126      	bne.n	80044e0 <UART_SetConfig+0xd8>
 8004492:	4b8a      	ldr	r3, [pc, #552]	; (80046bc <UART_SetConfig+0x2b4>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b03      	cmp	r3, #3
 800449e:	d81b      	bhi.n	80044d8 <UART_SetConfig+0xd0>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0xa0>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c9 	.word	0x080044c9
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044d1 	.word	0x080044d1
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044be:	e0ab      	b.n	8004618 <UART_SetConfig+0x210>
 80044c0:	2302      	movs	r3, #2
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c6:	e0a7      	b.n	8004618 <UART_SetConfig+0x210>
 80044c8:	2304      	movs	r3, #4
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ce:	e0a3      	b.n	8004618 <UART_SetConfig+0x210>
 80044d0:	2308      	movs	r3, #8
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d6:	e09f      	b.n	8004618 <UART_SetConfig+0x210>
 80044d8:	2310      	movs	r3, #16
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e09b      	b.n	8004618 <UART_SetConfig+0x210>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a76      	ldr	r2, [pc, #472]	; (80046c0 <UART_SetConfig+0x2b8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d138      	bne.n	800455c <UART_SetConfig+0x154>
 80044ea:	4b74      	ldr	r3, [pc, #464]	; (80046bc <UART_SetConfig+0x2b4>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	d82d      	bhi.n	8004554 <UART_SetConfig+0x14c>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0xf8>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004535 	.word	0x08004535
 8004504:	08004555 	.word	0x08004555
 8004508:	08004555 	.word	0x08004555
 800450c:	08004555 	.word	0x08004555
 8004510:	08004545 	.word	0x08004545
 8004514:	08004555 	.word	0x08004555
 8004518:	08004555 	.word	0x08004555
 800451c:	08004555 	.word	0x08004555
 8004520:	0800453d 	.word	0x0800453d
 8004524:	08004555 	.word	0x08004555
 8004528:	08004555 	.word	0x08004555
 800452c:	08004555 	.word	0x08004555
 8004530:	0800454d 	.word	0x0800454d
 8004534:	2300      	movs	r3, #0
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e06d      	b.n	8004618 <UART_SetConfig+0x210>
 800453c:	2302      	movs	r3, #2
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e069      	b.n	8004618 <UART_SetConfig+0x210>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e065      	b.n	8004618 <UART_SetConfig+0x210>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e061      	b.n	8004618 <UART_SetConfig+0x210>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e05d      	b.n	8004618 <UART_SetConfig+0x210>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a58      	ldr	r2, [pc, #352]	; (80046c4 <UART_SetConfig+0x2bc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d125      	bne.n	80045b2 <UART_SetConfig+0x1aa>
 8004566:	4b55      	ldr	r3, [pc, #340]	; (80046bc <UART_SetConfig+0x2b4>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004570:	2b30      	cmp	r3, #48	; 0x30
 8004572:	d016      	beq.n	80045a2 <UART_SetConfig+0x19a>
 8004574:	2b30      	cmp	r3, #48	; 0x30
 8004576:	d818      	bhi.n	80045aa <UART_SetConfig+0x1a2>
 8004578:	2b20      	cmp	r3, #32
 800457a:	d00a      	beq.n	8004592 <UART_SetConfig+0x18a>
 800457c:	2b20      	cmp	r3, #32
 800457e:	d814      	bhi.n	80045aa <UART_SetConfig+0x1a2>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <UART_SetConfig+0x182>
 8004584:	2b10      	cmp	r3, #16
 8004586:	d008      	beq.n	800459a <UART_SetConfig+0x192>
 8004588:	e00f      	b.n	80045aa <UART_SetConfig+0x1a2>
 800458a:	2300      	movs	r3, #0
 800458c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004590:	e042      	b.n	8004618 <UART_SetConfig+0x210>
 8004592:	2302      	movs	r3, #2
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004598:	e03e      	b.n	8004618 <UART_SetConfig+0x210>
 800459a:	2304      	movs	r3, #4
 800459c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a0:	e03a      	b.n	8004618 <UART_SetConfig+0x210>
 80045a2:	2308      	movs	r3, #8
 80045a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a8:	e036      	b.n	8004618 <UART_SetConfig+0x210>
 80045aa:	2310      	movs	r3, #16
 80045ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b0:	e032      	b.n	8004618 <UART_SetConfig+0x210>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3f      	ldr	r2, [pc, #252]	; (80046b4 <UART_SetConfig+0x2ac>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d12a      	bne.n	8004612 <UART_SetConfig+0x20a>
 80045bc:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <UART_SetConfig+0x2b4>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ca:	d01a      	beq.n	8004602 <UART_SetConfig+0x1fa>
 80045cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045d0:	d81b      	bhi.n	800460a <UART_SetConfig+0x202>
 80045d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d6:	d00c      	beq.n	80045f2 <UART_SetConfig+0x1ea>
 80045d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045dc:	d815      	bhi.n	800460a <UART_SetConfig+0x202>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <UART_SetConfig+0x1e2>
 80045e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e6:	d008      	beq.n	80045fa <UART_SetConfig+0x1f2>
 80045e8:	e00f      	b.n	800460a <UART_SetConfig+0x202>
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f0:	e012      	b.n	8004618 <UART_SetConfig+0x210>
 80045f2:	2302      	movs	r3, #2
 80045f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f8:	e00e      	b.n	8004618 <UART_SetConfig+0x210>
 80045fa:	2304      	movs	r3, #4
 80045fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004600:	e00a      	b.n	8004618 <UART_SetConfig+0x210>
 8004602:	2308      	movs	r3, #8
 8004604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004608:	e006      	b.n	8004618 <UART_SetConfig+0x210>
 800460a:	2310      	movs	r3, #16
 800460c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004610:	e002      	b.n	8004618 <UART_SetConfig+0x210>
 8004612:	2310      	movs	r3, #16
 8004614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <UART_SetConfig+0x2ac>)
 800461e:	4293      	cmp	r3, r2
 8004620:	f040 808a 	bne.w	8004738 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004628:	2b08      	cmp	r3, #8
 800462a:	d824      	bhi.n	8004676 <UART_SetConfig+0x26e>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <UART_SetConfig+0x22c>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004659 	.word	0x08004659
 8004638:	08004677 	.word	0x08004677
 800463c:	08004661 	.word	0x08004661
 8004640:	08004677 	.word	0x08004677
 8004644:	08004667 	.word	0x08004667
 8004648:	08004677 	.word	0x08004677
 800464c:	08004677 	.word	0x08004677
 8004650:	08004677 	.word	0x08004677
 8004654:	0800466f 	.word	0x0800466f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7ff faf2 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 800465c:	61f8      	str	r0, [r7, #28]
        break;
 800465e:	e010      	b.n	8004682 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <UART_SetConfig+0x2c0>)
 8004662:	61fb      	str	r3, [r7, #28]
        break;
 8004664:	e00d      	b.n	8004682 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004666:	f7ff fa53 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 800466a:	61f8      	str	r0, [r7, #28]
        break;
 800466c:	e009      	b.n	8004682 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004672:	61fb      	str	r3, [r7, #28]
        break;
 8004674:	e005      	b.n	8004682 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004680:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8109 	beq.w	800489c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	429a      	cmp	r2, r3
 8004698:	d305      	bcc.n	80046a6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d912      	bls.n	80046cc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046ac:	e0f6      	b.n	800489c <UART_SetConfig+0x494>
 80046ae:	bf00      	nop
 80046b0:	efff69f3 	.word	0xefff69f3
 80046b4:	40008000 	.word	0x40008000
 80046b8:	40013800 	.word	0x40013800
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40004400 	.word	0x40004400
 80046c4:	40004800 	.word	0x40004800
 80046c8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2200      	movs	r2, #0
 80046d0:	461c      	mov	r4, r3
 80046d2:	4615      	mov	r5, r2
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	022b      	lsls	r3, r5, #8
 80046de:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046e2:	0222      	lsls	r2, r4, #8
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	6849      	ldr	r1, [r1, #4]
 80046e8:	0849      	lsrs	r1, r1, #1
 80046ea:	2000      	movs	r0, #0
 80046ec:	4688      	mov	r8, r1
 80046ee:	4681      	mov	r9, r0
 80046f0:	eb12 0a08 	adds.w	sl, r2, r8
 80046f4:	eb43 0b09 	adc.w	fp, r3, r9
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004706:	4650      	mov	r0, sl
 8004708:	4659      	mov	r1, fp
 800470a:	f7fb fd5f 	bl	80001cc <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4613      	mov	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471c:	d308      	bcc.n	8004730 <UART_SetConfig+0x328>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004724:	d204      	bcs.n	8004730 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	e0b5      	b.n	800489c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004736:	e0b1      	b.n	800489c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004740:	d15d      	bne.n	80047fe <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004746:	2b08      	cmp	r3, #8
 8004748:	d827      	bhi.n	800479a <UART_SetConfig+0x392>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0x348>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004775 	.word	0x08004775
 8004754:	0800477d 	.word	0x0800477d
 8004758:	08004785 	.word	0x08004785
 800475c:	0800479b 	.word	0x0800479b
 8004760:	0800478b 	.word	0x0800478b
 8004764:	0800479b 	.word	0x0800479b
 8004768:	0800479b 	.word	0x0800479b
 800476c:	0800479b 	.word	0x0800479b
 8004770:	08004793 	.word	0x08004793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7ff fa64 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8004778:	61f8      	str	r0, [r7, #28]
        break;
 800477a:	e014      	b.n	80047a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800477c:	f7ff fa76 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8004780:	61f8      	str	r0, [r7, #28]
        break;
 8004782:	e010      	b.n	80047a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004784:	4b4c      	ldr	r3, [pc, #304]	; (80048b8 <UART_SetConfig+0x4b0>)
 8004786:	61fb      	str	r3, [r7, #28]
        break;
 8004788:	e00d      	b.n	80047a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478a:	f7ff f9c1 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 800478e:	61f8      	str	r0, [r7, #28]
        break;
 8004790:	e009      	b.n	80047a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e005      	b.n	80047a6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d077      	beq.n	800489c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005a      	lsls	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	441a      	add	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b0f      	cmp	r3, #15
 80047c6:	d916      	bls.n	80047f6 <UART_SetConfig+0x3ee>
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ce:	d212      	bcs.n	80047f6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f023 030f 	bic.w	r3, r3, #15
 80047d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	8afb      	ldrh	r3, [r7, #22]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	8afa      	ldrh	r2, [r7, #22]
 80047f2:	60da      	str	r2, [r3, #12]
 80047f4:	e052      	b.n	800489c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047fc:	e04e      	b.n	800489c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004802:	2b08      	cmp	r3, #8
 8004804:	d827      	bhi.n	8004856 <UART_SetConfig+0x44e>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <UART_SetConfig+0x404>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	08004831 	.word	0x08004831
 8004810:	08004839 	.word	0x08004839
 8004814:	08004841 	.word	0x08004841
 8004818:	08004857 	.word	0x08004857
 800481c:	08004847 	.word	0x08004847
 8004820:	08004857 	.word	0x08004857
 8004824:	08004857 	.word	0x08004857
 8004828:	08004857 	.word	0x08004857
 800482c:	0800484f 	.word	0x0800484f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004830:	f7ff fa06 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8004834:	61f8      	str	r0, [r7, #28]
        break;
 8004836:	e014      	b.n	8004862 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004838:	f7ff fa18 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 800483c:	61f8      	str	r0, [r7, #28]
        break;
 800483e:	e010      	b.n	8004862 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004840:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <UART_SetConfig+0x4b0>)
 8004842:	61fb      	str	r3, [r7, #28]
        break;
 8004844:	e00d      	b.n	8004862 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004846:	f7ff f963 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 800484a:	61f8      	str	r0, [r7, #28]
        break;
 800484c:	e009      	b.n	8004862 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004852:	61fb      	str	r3, [r7, #28]
        break;
 8004854:	e005      	b.n	8004862 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004860:	bf00      	nop
    }

    if (pclk != 0U)
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d019      	beq.n	800489c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	085a      	lsrs	r2, r3, #1
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	441a      	add	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d909      	bls.n	8004896 <UART_SetConfig+0x48e>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004888:	d205      	bcs.n	8004896 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	e002      	b.n	800489c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3728      	adds	r7, #40	; 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b6:	bf00      	nop
 80048b8:	00f42400 	.word	0x00f42400

080048bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01a      	beq.n	80049d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ba:	d10a      	bne.n	80049d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b098      	sub	sp, #96	; 0x60
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a10:	f7fc fb9a 	bl	8001148 <HAL_GetTick>
 8004a14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d12e      	bne.n	8004a82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f88c 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d021      	beq.n	8004a82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a52:	653b      	str	r3, [r7, #80]	; 0x50
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e6      	bne.n	8004a3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e062      	b.n	8004b48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d149      	bne.n	8004b24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f856 	bl	8004b50 <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d03c      	beq.n	8004b24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afc:	61fa      	str	r2, [r7, #28]
 8004afe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	69b9      	ldr	r1, [r7, #24]
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	617b      	str	r3, [r7, #20]
   return(result);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e5      	bne.n	8004adc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e011      	b.n	8004b48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3758      	adds	r7, #88	; 0x58
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b60:	e04f      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d04b      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6a:	f7fc faed 	bl	8001148 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e04e      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d037      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b80      	cmp	r3, #128	; 0x80
 8004b96:	d034      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d031      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d110      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f838 	bl	8004c2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e029      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bdc:	d111      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f81e 	bl	8004c2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e00f      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d0a0      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b095      	sub	sp, #84	; 0x54
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c50:	643b      	str	r3, [r7, #64]	; 0x40
 8004c52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e6      	bne.n	8004c32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3308      	adds	r3, #8
 8004c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3308      	adds	r3, #8
 8004c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e5      	bne.n	8004c64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d118      	bne.n	8004cd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f023 0310 	bic.w	r3, r3, #16
 8004cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6979      	ldr	r1, [r7, #20]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e6      	bne.n	8004ca0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ce6:	bf00      	nop
 8004ce8:	3754      	adds	r7, #84	; 0x54
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <memset>:
 8004cf2:	4402      	add	r2, r0
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d100      	bne.n	8004cfc <memset+0xa>
 8004cfa:	4770      	bx	lr
 8004cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8004d00:	e7f9      	b.n	8004cf6 <memset+0x4>
	...

08004d04 <__libc_init_array>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	4d0d      	ldr	r5, [pc, #52]	; (8004d3c <__libc_init_array+0x38>)
 8004d08:	4c0d      	ldr	r4, [pc, #52]	; (8004d40 <__libc_init_array+0x3c>)
 8004d0a:	1b64      	subs	r4, r4, r5
 8004d0c:	10a4      	asrs	r4, r4, #2
 8004d0e:	2600      	movs	r6, #0
 8004d10:	42a6      	cmp	r6, r4
 8004d12:	d109      	bne.n	8004d28 <__libc_init_array+0x24>
 8004d14:	4d0b      	ldr	r5, [pc, #44]	; (8004d44 <__libc_init_array+0x40>)
 8004d16:	4c0c      	ldr	r4, [pc, #48]	; (8004d48 <__libc_init_array+0x44>)
 8004d18:	f000 f818 	bl	8004d4c <_init>
 8004d1c:	1b64      	subs	r4, r4, r5
 8004d1e:	10a4      	asrs	r4, r4, #2
 8004d20:	2600      	movs	r6, #0
 8004d22:	42a6      	cmp	r6, r4
 8004d24:	d105      	bne.n	8004d32 <__libc_init_array+0x2e>
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2c:	4798      	blx	r3
 8004d2e:	3601      	adds	r6, #1
 8004d30:	e7ee      	b.n	8004d10 <__libc_init_array+0xc>
 8004d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d36:	4798      	blx	r3
 8004d38:	3601      	adds	r6, #1
 8004d3a:	e7f2      	b.n	8004d22 <__libc_init_array+0x1e>
 8004d3c:	08004db4 	.word	0x08004db4
 8004d40:	08004db4 	.word	0x08004db4
 8004d44:	08004db4 	.word	0x08004db4
 8004d48:	08004db8 	.word	0x08004db8

08004d4c <_init>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	bf00      	nop
 8004d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d52:	bc08      	pop	{r3}
 8004d54:	469e      	mov	lr, r3
 8004d56:	4770      	bx	lr

08004d58 <_fini>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr
